{"sections":[{"title":"","paragraphs":["Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 110–114, Jeju, Republic of Korea, 8-14 July 2012. c⃝2012 Association for Computational Linguistics"]},{"title":"Estimating Compact Yet Rich Tree Insertion Grammars Elif Yamangil and Stuart M. Shieber Harvard University Cambridge, Massachusetts, USA {elif, shieber}@seas.harvard.edu Abstract","paragraphs":["We present a Bayesian nonparametric model for estimating tree insertion grammars (TIG), building upon recent work in Bayesian inference of tree substitution grammars (TSG) via Dirichlet processes. Under our general variant of TIG, grammars are estimated via the Metropolis-Hastings algorithm that uses a context free grammar transformation as a proposal, which allows for cubic-time string parsing as well as tree-wide joint sampling of derivations in the spirit of Cohn and Blunsom (2010). We use the Penn treebank for our experiments and find that our proposal Bayesian TIG model not only has competitive parsing performance but also finds compact yet linguistically rich TIG representations of the data."]},{"title":"1 Introduction","paragraphs":["There is a deep tension in statistical modeling of grammatical structure between providing good expressivity — to allow accurate modeling of the data with sparse grammars — and low complexity — making induction of the grammars and parsing of novel sentences computationally practical. Recent work that incorporated Dirichlet process (DP) nonparametric models into TSGs has provided an efficient solution to the problem of segmenting training data trees into elementary parse tree fragments to form the grammar (Cohn et al., 2009; Cohn and Blunsom, 2010; Post and Gildea, 2009). DP inference tackles this problem by exploring the space of all possible segmentations of the data, in search for fragments that are on the one hand large enough so that they incorporate the useful dependencies, and on the other small enough so that they recur and have a chance to be useful in analyzing unseen data.","The elementary trees combined in a TSG are, in-tuitively, primitives of the language, yet certain linguistic phenomena (notably various forms of modification) “split them up”, preventing their reuse, lead-ing to less sparse grammars than might be ideal. For instance, imagine modeling the following set of structures: • [NP the [NN [NN [NN president] of the university] who","resigned yesterday]] • [NP the [NN former [NN [NN president] of the univer-","sity]]] • [NP the [NN [NN president] who resigned yesterday]] A natural recurring structure here would be the structure “[NP the [NN president]]”, yet it occurs not at all in the data.","TSGs are a special case of the more flexible grammar formalism of tree adjoining grammar (TAG) (Joshi et al., 1975). TAG augments TSG with an adjunction operator and a set of auxiliary trees in addition to the substitution operator and initial trees of TSG, allowing for “splicing in” of syntactic fragments within trees. In the example, by augmenting a TSG with an operation of adjunction, a grammar that hypothesizes auxiliary trees corresponding to adjoining “[NN former N N ]”, “[NN N N of the university]”, and “[NN N N who resigned yesterday]” would be able to reuse the basic structure “[NP the [NN president]]”.","Unfortunately, TAG’s expressivity comes at the cost of greatly increased complexity. Parsing complexity for unconstrained TAG scales as O(n6","), im-110 NP DT NN the president NP NP* SBAR WHNP S who NP NP* PP IN NP of NN JJ NN* former Figure 1: Example TIG derivation of an NP constituent: One left insertion (at NN) and two simultaneous right insertions (at NP). practical as compared to CFG and TSG’s O(n3","). In addition, the model selection problem for TAG is significantly more complicated than for TSG since one must reason about many more combinatorial options with two types of derivation operators.1","This has led researchers to resort to heuristic grammar extraction techniques (Chiang, 2000; Carreras et al., 2008) or using a very small number of grammar categories (Hwa, 1998).","Hwa (1998) first proposed to use tree-insertion grammars (TIG), a kind of expressive compromise between TSG and TAG, as a substrate on which to build grammatical inference. TIG constrains the adjunction operation so that spliced-in material falls completely to the left or completely to the right of the splice point. By restricting the form of possible auxiliary trees to only left or right auxiliary trees in this way, TIG remains within the realm of context-free formalisms (with cubic complexity) while still modeling rich linguistic phenomena (Schabes and Waters, 1995). Figure 1 depicts some examples of TIG derivations.","Sharing the same intuitions, Shindo et al. (2011) have provided a previous attempt at combining TIG and Bayesian nonparametric principles, albeit with severe limitations. Their TIG variant (which we will refer to as TIG0) is highly constrained in the following ways. 1. The foot node in an auxiliary tree must be the immediate","child of the root node. 2. Only one adjunction can occur at a given node. 1","This can be seen by the fact that tree-path languages under TAG are context free, whereas they are regular for TSG. (Schabes and Waters, 1995) (a) (b) NP NP","RNP","L NP DT NN the NP L ε NN president","NN L NN","R NN R ε NP","NP* PP IN NP of ε NP","SBAR WHNP S who NP R NP","NP* PP IN NP of NP","NP R ε","NP R NP","NP* SBAR WHNP S who ε NP R","NN JJ NN* former ε NN L Figure 2: TIG-to-TSG transform: (a) and (b) illustrate transformed TSG derivations for two different TIG derivations of the same parse tree structure. The TIG nodes where we illustrate the transformation are in bold. (We suppress the rest of the transformational nodes.)","3. Even modeling multiple adjunction with root adjunction is disallowed. There is thus no recursion possibility with adjunction, no stacking of auxiliary trees.","4. As a consequence of the prior two constraints, no adjunction along the spines of auxiliary trees is allowed.","5. As a consequence of the first constraint, all nonterminals along the spine of an auxiliary tree are identical.","In this paper we explore a Bayesian nonparametric model for estimating a far more expressive version of TIG, and compare its performance against TSG and the restricted TIG0 variant. Our more general formulation avoids these limitations by support-ing the following features and thus relaxing four of the five restrictions of TIG0. 1. Auxiliary trees may have the foot node at depth greater","than one.2 2. Both left and right adjunctions may occur at the same","node. 3. Simultanous adjunction (that is, more than one left or","right adjunction per node) is allowed via root adjunction. 4. Adjunctions may occur along the spines of auxiliary trees.","The increased expressivity of our TIG variant is motivated both linguistically and practically. From a linguistic point of view: Deeper auxiliary trees can help model large patterns of insertion and potential correlations between lexical items that extend over multiple levels of tree. Combining left and right auxiliary trees can help model modifiers of the same node from left and right (combination of adjectives","2","Throughout the paper, we will refer to the depth of an auxiliary tree to indicate the length of its spine. 111 and relative clauses for instance). Simultaneous insertion allows us to deal with multiple independent modifiers for the same constituent (for example, a series of adjectives). From a practical point of view, we show that an induced TIG provides modeling performance superior to TSG and comparable with TIG0. However we show that the grammars we in-duce are compact yet rich, in that they succinctly represent complex linguistic structures."]},{"title":"2 Probabilistic Model","paragraphs":["In the basic nonparametric TSG model, there is an independent DP for every grammar category (such as c = N P ), each of which uses a base distribution P0 that generates an initial tree by making stepwise decisions.","Ginit","c ∼ DP(αinit","c , P init","0 (· | c)) The canonical P0 uses a probabilistic CFG P̃ that is fixed a priori to sample CFG rules top-down and Bernoulli variables for determining where substitutions should occur (Cohn et al., 2009; Cohn and Blunsom, 2010).","We extend this model by adding specialized DPs for left and right auxiliary trees.3","Gright c ∼ DP(αright","c , P right 0 (· | c)) Therefore, we have an exchangeable process for generating right auxiliary trees p(aj | a<j) = naj + α right c P right 0 (aj | c) j − 1 + α right c (1) as for initial trees in TSG.","We must define three distinct base distributions for initial trees, left auxiliary trees, and right auxiliary trees. P init","0 generates an initial tree with root label c by sampling CFG rules from P̃ and making a binary decision at every node generated whether to leave it as a frontier node or further expand (with probability βc) (Cohn et al., 2009). Similarly, our P","right 0 generates a right auxiliary tree with root label c by first making a binary decision whether to generate an immediate foot or not (with probability γ right c ), and then sampling an appropriate CFG rule 3","We use right insertions for illustration; the symmetric analog applies to left insertions. (VP (, ,) (VP PP (VP (, ,) VP*))) (VP (SBAR (WHADVP (WRB (WRB When) ) ) S) (VP (, ,) VP*)) (VP (PP (IN For) (NP NN )) (VP (, ,) VP*)) (VP (CC But) (VP PP (VP (, ,) VP*))) (VP ADVP (VP (, ,) VP*)) (IN (ADVP (RB (RB particularly) ) ) IN*) (NP PP (NP (CC and) (NP PP NP*))) Figure 3: Example left auxiliary trees that occur in the top derivations for Section 23. Simultaneous insertions occur most frequently for the labels VP (85 times), NNS (21 times), NNP (14 times). from P̃ . For the right child, we sample an initial tree from P init","0 . For the left child, if decision to generate an immediate foot was made, we generate a foot node, and stop. Otherwise we recur into P","right","0 which generates a right auxiliary tree that becomes the left child.","We bring together these three sets of processes via a set of insertion parameters μleft","c , μright","c . In any derivation, for every initial tree node labelled c (except for frontier nodes) we determine whether or not there are insertions at this node by sampling a Bernoulli(μleft","c ) distributed left insertion variable and a Bernoulli(μ","right","c ) distributed right insertion variable. For left auxiliary trees, we treat the nodes that are not along the spine of the auxiliary tree the same way we treat initial tree nodes, however for nodes that are along the spine (including root nodes, excluding foot nodes) we consider only left insertions by sampling the left insertion variable (symmetrically for right insertions)."]},{"title":"3 Inference","paragraphs":["Given this model, our inference task is to explore optimal derivations underlying the data. Since TIG derivations are highly structured objects, a basic sampling strategy based on local node-level moves such as Gibbs sampling (Geman and Geman, 1984) would not hold much promise. Following previous work, we design a blocked Metropolis-Hastings sampler that samples derivations per entire parse trees all at once in a joint fashion (Cohn and Blunsom, 2010; Shindo et al., 2011). This is achieved by proposing derivations from an approximating distribution and stochastically correcting via accept/reject to achieve convergence into the correct posterior (Johnson et al., 2007).","Since our base distributions factorize over levels of tree, CFG is the most convenient choice for a 112","CFG rule CFG probability","Base distribution: Pinit","0","NP → NPinit","αinit","c /(ninit","NP + αinit","c )","NPinit","→ NP","L NPinit NP R 1.0","NPinit","→ DT NN  ̃ P(NP → DT NN) × (1 − β","DT) × (1 − β","NN)","NPinit","→ DT NNinit ̃ P(NP → DT NN) × (1 − β","DT) × β","NN","NPinit","→ DTinit","NN  ̃ P(NP → DT NN) × β","DT × (1 − β","NN)","NPinit","→ DTinit","NNinit ̃ P(NP → DT NN) × β","DT × β","NN","Base distribution: Pright","0","NP","R → NPright","μright","NP ×","( αright c /(nright","NP + αright","c )) NP R → ε 1 − μright","NP","NPright","→ NPright","NP","R 1.0","NPright","→ NP","* SBARinit ̃ P(NP → NP SBAR | NP → NP )","×(1 − γright","NP ) × (1 − β","SBAR)","NPright","→ NP","* SBAR  ̃ P(NP → NP SBAR | NP → NP )","×(1 − γright","NP ) × β","SBAR","NPright","→ NPright","SBARinit ̃ P(NP → NP SBAR | NP → NP )","×γright","NP × (1 − β","SBAR)","NPright","→ NPright","SBAR  ̃ P(NP → NP SBAR | NP → NP )","×γright","NP × β","SBAR Figure 4: Transformation CFG rules that represent infinite base distributions. P init","0 is taken from Cohn and Blunsom (2010). Underscored labels (such as NPright","as opposed to NPright",") are used to differentiate the pre-insertion nodes in Figure 2 from the post-insertion ones. P left","0 rules","are omitted for brevity and mirror the P right 0 rules above. Model FMeasure # Initial Trees # Auxiliary Trees (# Left) TSG 77.51 6.2K - TIG0 78.46 6.0K 251 (137) TIG 78.62 5.6K 604 (334) Figure 5: EVALB results after training on Section 2 and testing on Section 23. Note that TIG finds a compact yet rich representation. Elementary tree counts are based on ones with count > 1. proposal distribution. Fortunately, Schabes and Waters (1995) provide an (exact) transformation from a fully general TIG into a TSG that generates the same string languages. It is then straightforward to represent this TSG as a CFG using the Goodman transform (Goodman, 2002; Cohn and Blunsom, 2010). Figure 4 lists the additional CFG productions we have designed, as well as the rules used that trigger them."]},{"title":"4 Evaluation Results","paragraphs":["We use the standard Penn treebank methodology of training on sections 2–21 and testing on section 23. All our data is head-binarized and words occurring only once are mapped into unknown categories of the Berkeley parser. As has become standard, we carried out a small treebank experiment where we train on Section 2, and a large one where we train on the full training set. All hyperparameters are resampled under appropriate vague gamma and beta priors. All reported numbers are averages over three runs. Parsing results are based on the maximum probability parse which was obtained by sampling derivations under the transform CFG.","We compare our system (referred to as TIG) to our implementation of the TSG system of (Cohn and Blunsom, 2010) (referred to as TSG) and the constrained TIG variant of (Shindo et al., 2011) (referred to as TIG0). The upshot of our experiments is that, while on the large training set all models have similar performance (85.6, 85.3, 85.4 for TSG, TIG0 and TIG respectively), on the small dataset insertion helps nonparametric model to find more compact and generalizable representations for the data, which affects parsing performance (Figure 4). Although TIG0 has performance close to TIG, note that TIG achieves this performance using a more succinct representation and extracting a rich set of auxiliary trees. As a result, TIG finds many chances to apply insertions to test sentences, whereas TIG0 depends mostly on TSG rules. If we look at the most likely derivations for the test data, TIG0 assigns 663 insertions (351 left insertions) in the parsing of entire Section 23, meanwhile TIG assigns 3924 (2100 left insertions). Some of these linguistically sophisticated auxiliary trees that apply to test data are listed in Figure 3."]},{"title":"5 Conclusion","paragraphs":["We described a nonparametric Bayesian inference scheme for estimating TIG grammars and showed the power of TIG formalism over TSG for returning rich, generalizable, yet compact representations of data. The nonparametric inference scheme presents a principled way of addressing the difficult model selection problem with TIG which has been prohibitive in this area of research. TIG still remains within context free and both our sampling and parsing techniques are highly scalable."]},{"title":"Acknowledgements","paragraphs":["The first author was supported in part by a Google PhD Fellowship in Natural Language Processing. 113"]},{"title":"References","paragraphs":["Xavier Carreras, Michael Collins, and Terry Koo. 2008. TAG, dynamic programming, and the perceptron for efficient, feature-rich parsing. In Proceedings of the Twelfth Conference on Computational Natural Language Learning, CoNLL ’08, pages 9–16, Stroudsburg, PA, USA. Association for Computational Linguistics.","David Chiang. 2000. Statistical parsing with an automatically-extracted tree adjoining grammar. In Proceedings of the 38th Annual Meeting on Association for Computational Linguistics, ACL ’00, pages 456–463, Morristown, NJ, USA. Association for Computational Linguistics.","Trevor Cohn and Phil Blunsom. 2010. Blocked inference in Bayesian tree substitution grammars. In Proceedings of the ACL 2010 Conference Short Papers, ACLShort ’10, pages 225–230, Stroudsburg, PA, USA. Association for Computational Linguistics.","Trevor Cohn, Sharon Goldwater, and Phil Blunsom. 2009. Inducing compact but accurate tree-substitution grammars. In NAACL ’09: Proceedings of Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the Association for Computational Linguistics, pages 548–556, Morristown, NJ, USA. Association for Computational Linguistics.","S. Geman and D. Geman. 1984. Stochastic Relaxation, Gibbs Distributions and the Bayesian Restoration of Images. pages 6:721–741.","J. Goodman. 2002. Efficient parsing of DOP with PCFG-reductions. Bod et al. 2003.","Rebecca Hwa. 1998. An empirical evaluation of probabilistic lexicalized tree insertion grammars. In Proceedings of the 17th international conference on Computational linguistics - Volume 1, pages 557–563, Morristown, NJ, USA. Association for Computational Linguistics.","Mark Johnson, Thomas Griffiths, and Sharon Goldwater. 2007. Bayesian inference for PCFGs via Markov chain Monte Carlo. In Human Language Technologies 2007: The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, pages 139–146, Rochester, New York, April. Association for Computational Linguistics.","Aravind K. Joshi, Leon S. Levy, and Masako Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136–163.","Matt Post and Daniel Gildea. 2009. Bayesian learn-ing of a tree substitution grammar. In Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 45–48, Suntec, Singapore, August. Association for Computational Linguistics.","Remko Scha and Rens Bod. 2003. Efficient parsing of DOP with PCFG-reductions, October.","Yves Schabes and Richard C. Waters. 1995. Tree insertion grammar: a cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced. Comput. Linguist., 21:479–513, December.","Hiroyuki Shindo, Akinori Fujino, and Masaaki Nagata. 2011. Insertion operator for Bayesian tree substitution grammars. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies: short papers - Volume 2, HLT ’11, pages 206–211, Stroudsburg, PA, USA. Association for Computational Linguistics. 114"]}],"references":[{"authors":[{"first":"Xavier","last":"Carreras"},{"first":"Michael","last":"Collins"},{"first":"Terry","last":"Koo"}],"year":"2008","title":"TAG, dynamic programming, and the perceptron for efficient, feature-rich parsing","source":"Xavier Carreras, Michael Collins, and Terry Koo. 2008. TAG, dynamic programming, and the perceptron for efficient, feature-rich parsing. In Proceedings of the Twelfth Conference on Computational Natural Language Learning, CoNLL ’08, pages 9–16, Stroudsburg, PA, USA. Association for Computational Linguistics."},{"authors":[{"first":"David","last":"Chiang"}],"year":"2000","title":"Statistical parsing with an automatically-extracted tree adjoining grammar","source":"David Chiang. 2000. Statistical parsing with an automatically-extracted tree adjoining grammar. In Proceedings of the 38th Annual Meeting on Association for Computational Linguistics, ACL ’00, pages 456–463, Morristown, NJ, USA. Association for Computational Linguistics."},{"authors":[{"first":"Trevor","last":"Cohn"},{"first":"Phil","last":"Blunsom"}],"year":"2010","title":"Blocked inference in Bayesian tree substitution grammars","source":"Trevor Cohn and Phil Blunsom. 2010. Blocked inference in Bayesian tree substitution grammars. In Proceedings of the ACL 2010 Conference Short Papers, ACLShort ’10, pages 225–230, Stroudsburg, PA, USA. Association for Computational Linguistics."},{"authors":[{"first":"Trevor","last":"Cohn"},{"first":"Sharon","last":"Goldwater"},{"first":"Phil","last":"Blunsom"}],"year":"2009","title":"Inducing compact but accurate tree-substitution grammars","source":"Trevor Cohn, Sharon Goldwater, and Phil Blunsom. 2009. Inducing compact but accurate tree-substitution grammars. In NAACL ’09: Proceedings of Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the Association for Computational Linguistics, pages 548–556, Morristown, NJ, USA. Association for Computational Linguistics."},{"authors":[{"first":"S.","last":"Geman"},{"first":"D.","last":"Geman"}],"year":"1984","title":"Stochastic Relaxation, Gibbs Distributions and the Bayesian Restoration of Images","source":"S. Geman and D. Geman. 1984. Stochastic Relaxation, Gibbs Distributions and the Bayesian Restoration of Images. pages 6:721–741."},{"authors":[{"first":"J.","last":"Goodman"}],"year":"2002","title":"Efficient parsing of DOP with PCFG-reductions","source":"J. Goodman. 2002. Efficient parsing of DOP with PCFG-reductions. Bod et al. 2003."},{"authors":[{"first":"Rebecca","last":"Hwa"}],"year":"1998","title":"An empirical evaluation of probabilistic lexicalized tree insertion grammars","source":"Rebecca Hwa. 1998. An empirical evaluation of probabilistic lexicalized tree insertion grammars. In Proceedings of the 17th international conference on Computational linguistics - Volume 1, pages 557–563, Morristown, NJ, USA. Association for Computational Linguistics."},{"authors":[{"first":"Mark","last":"Johnson"},{"first":"Thomas","last":"Griffiths"},{"first":"Sharon","last":"Goldwater"}],"year":"2007","title":"Bayesian inference for PCFGs via Markov chain Monte Carlo","source":"Mark Johnson, Thomas Griffiths, and Sharon Goldwater. 2007. Bayesian inference for PCFGs via Markov chain Monte Carlo. In Human Language Technologies 2007: The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, pages 139–146, Rochester, New York, April. Association for Computational Linguistics."},{"authors":[{"first":"Aravind","middle":"K.","last":"Joshi"},{"first":"Leon","middle":"S.","last":"Levy"},{"first":"Masako","last":"Takahashi"}],"year":"1975","title":"Tree adjunct grammars","source":"Aravind K. Joshi, Leon S. Levy, and Masako Takahashi. 1975. Tree adjunct grammars. Journal of Computer and System Sciences, 10(1):136–163."},{"authors":[{"first":"Matt","last":"Post"},{"first":"Daniel","last":"Gildea"}],"year":"2009","title":"Bayesian learn-ing of a tree substitution grammar","source":"Matt Post and Daniel Gildea. 2009. Bayesian learn-ing of a tree substitution grammar. In Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 45–48, Suntec, Singapore, August. Association for Computational Linguistics."},{"authors":[{"first":"Remko","last":"Scha"},{"first":"Rens","last":"Bod"}],"year":"2003","title":"Efficient parsing of DOP with PCFG-reductions, October","source":"Remko Scha and Rens Bod. 2003. Efficient parsing of DOP with PCFG-reductions, October."},{"authors":[{"first":"Yves","last":"Schabes"},{"first":"Richard","middle":"C.","last":"Waters"}],"year":"1995","title":"Tree insertion grammar: a cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced","source":"Yves Schabes and Richard C. Waters. 1995. Tree insertion grammar: a cubic-time parsable formalism that lexicalizes context-free grammar without changing the trees produced. Comput. Linguist., 21:479–513, December."},{"authors":[{"first":"Hiroyuki","last":"Shindo"},{"first":"Akinori","last":"Fujino"},{"first":"Masaaki","last":"Nagata"}],"year":"2011","title":"Insertion operator for Bayesian tree substitution grammars","source":"Hiroyuki Shindo, Akinori Fujino, and Masaaki Nagata. 2011. Insertion operator for Bayesian tree substitution grammars. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies: short papers - Volume 2, HLT ’11, pages 206–211, Stroudsburg, PA, USA. Association for Computational Linguistics. 114"}],"cites":[{"style":0,"text":"Cohn and Blunsom (2010)","origin":{"pointer":"/sections/1/paragraphs/0","offset":466,"length":23},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Cohn et al., 2009","origin":{"pointer":"/sections/2/paragraphs/0","offset":511,"length":17},"authors":[{"last":"Cohn"},{"last":"al."}],"year":"2009","references":["/references/3"]},{"style":0,"text":"Cohn and Blunsom, 2010","origin":{"pointer":"/sections/2/paragraphs/0","offset":530,"length":22},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Post and Gildea, 2009","origin":{"pointer":"/sections/2/paragraphs/0","offset":554,"length":21},"authors":[{"last":"Post"},{"last":"Gildea"}],"year":"2009","references":["/references/9"]},{"style":0,"text":"Joshi et al., 1975","origin":{"pointer":"/sections/2/paragraphs/4","offset":96,"length":18},"authors":[{"last":"Joshi"},{"last":"al."}],"year":"1975","references":["/references/8"]},{"style":0,"text":"Chiang, 2000","origin":{"pointer":"/sections/2/paragraphs/8","offset":79,"length":12},"authors":[{"last":"Chiang"}],"year":"2000","references":["/references/1"]},{"style":0,"text":"Carreras et al., 2008","origin":{"pointer":"/sections/2/paragraphs/8","offset":93,"length":21},"authors":[{"last":"Carreras"},{"last":"al."}],"year":"2008","references":["/references/0"]},{"style":0,"text":"Hwa, 1998","origin":{"pointer":"/sections/2/paragraphs/8","offset":168,"length":9},"authors":[{"last":"Hwa"}],"year":"1998","references":["/references/6"]},{"style":0,"text":"Hwa (1998)","origin":{"pointer":"/sections/2/paragraphs/9","offset":0,"length":10},"authors":[{"last":"Hwa"}],"year":"1998","references":["/references/6"]},{"style":0,"text":"Schabes and Waters, 1995","origin":{"pointer":"/sections/2/paragraphs/9","offset":549,"length":24},"authors":[{"last":"Schabes"},{"last":"Waters"}],"year":"1995","references":["/references/11"]},{"style":0,"text":"Shindo et al. (2011)","origin":{"pointer":"/sections/2/paragraphs/10","offset":29,"length":20},"authors":[{"last":"Shindo"},{"last":"al."}],"year":"2011","references":["/references/12"]},{"style":0,"text":"Schabes and Waters, 1995","origin":{"pointer":"/sections/2/paragraphs/12","offset":117,"length":24},"authors":[{"last":"Schabes"},{"last":"Waters"}],"year":"1995","references":["/references/11"]},{"style":0,"text":"Cohn et al., 2009","origin":{"pointer":"/sections/3/paragraphs/4","offset":182,"length":17},"authors":[{"last":"Cohn"},{"last":"al."}],"year":"2009","references":["/references/3"]},{"style":0,"text":"Cohn and Blunsom, 2010","origin":{"pointer":"/sections/3/paragraphs/4","offset":201,"length":22},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Cohn et al., 2009","origin":{"pointer":"/sections/3/paragraphs/9","offset":209,"length":17},"authors":[{"last":"Cohn"},{"last":"al."}],"year":"2009","references":["/references/3"]},{"style":0,"text":"Geman and Geman, 1984","origin":{"pointer":"/sections/4/paragraphs/0","offset":227,"length":21},"authors":[{"last":"Geman"},{"last":"Geman"}],"year":"1984","references":["/references/4"]},{"style":0,"text":"Cohn and Blunsom, 2010","origin":{"pointer":"/sections/4/paragraphs/0","offset":432,"length":22},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Shindo et al., 2011","origin":{"pointer":"/sections/4/paragraphs/0","offset":456,"length":19},"authors":[{"last":"Shindo"},{"last":"al."}],"year":"2011","references":["/references/12"]},{"style":0,"text":"Johnson et al., 2007","origin":{"pointer":"/sections/4/paragraphs/0","offset":654,"length":20},"authors":[{"last":"Johnson"},{"last":"al."}],"year":"2007","references":["/references/7"]},{"style":0,"text":"Cohn and Blunsom (2010)","origin":{"pointer":"/sections/4/paragraphs/69","offset":16,"length":23},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Schabes and Waters (1995)","origin":{"pointer":"/sections/4/paragraphs/73","offset":415,"length":25},"authors":[{"last":"Schabes"},{"last":"Waters"}],"year":"1995","references":["/references/11"]},{"style":0,"text":"Goodman, 2002","origin":{"pointer":"/sections/4/paragraphs/73","offset":640,"length":13},"authors":[{"last":"Goodman"}],"year":"2002","references":["/references/5"]},{"style":0,"text":"Cohn and Blunsom, 2010","origin":{"pointer":"/sections/4/paragraphs/73","offset":655,"length":22},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Cohn and Blunsom, 2010","origin":{"pointer":"/sections/5/paragraphs/1","offset":87,"length":22},"authors":[{"last":"Cohn"},{"last":"Blunsom"}],"year":"2010","references":["/references/2"]},{"style":0,"text":"Shindo et al., 2011","origin":{"pointer":"/sections/5/paragraphs/1","offset":168,"length":19},"authors":[{"last":"Shindo"},{"last":"al."}],"year":"2011","references":["/references/12"]}]}
