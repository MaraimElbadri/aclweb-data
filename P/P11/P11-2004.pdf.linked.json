{"sections":[{"title":"","paragraphs":["Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:shortpapers, pages 18–23, Portland, Oregon, June 19-24, 2011. c⃝2011 Association for Computational Linguistics"]},{"title":"Efficient Online Locality Sensitive Hashing via Reservoir Counting Benjamin Van Durme HLTCOE Johns Hopkins University Ashwin Lall Mathematics and Computer Science Denison University Abstract","paragraphs":["We describe a novel mechanism called Reservoir Counting for application in online Locality Sensitive Hashing. This technique allows for significant savings in the streaming setting, allowing for maintaining a larger number of signatures, or an increased level of approximation accuracy at a similar memory footprint."]},{"title":"1 Introduction","paragraphs":["Feature vectors based on lexical co-occurrence are often of a high dimension, d. This leads to O(d) operations to calculate cosine similarity, a fundamental tool in distributional semantics. This is improved in practice through the use of data structures that exploit feature sparsity, leading to an expected O(f ) operations, where f is the number of unique features we expect to have non-zero entries in a given vector.","Ravichandran et al. (2005) showed that the Locality Sensitive Hash (LSH) procedure of Charikar (2002), following from Indyk and Motwani (1998) and Goemans and Williamson (1995), could be successfully used to compress textually derived feature vectors in order to achieve speed efficiencies in large-scale noun clustering. Such LSH bit signatures are constructed using the following hash function, where ⃗v ∈ Rd","is a vector in the original feature space, and ⃗r is randomly drawn from N (0, 1)d",": h(⃗v) = {","1 if ⃗v · ⃗r ≥ 0,","0 otherwise.","If hb","(⃗v) is the b-bit signature resulting from b such","hash functions, then the cosine similarity between","vectors ⃗u and ⃗v is approximated by:","cos(⃗u, ⃗v) = ⃗u·⃗v |⃗u||⃗v| ≈ cos(","D(hb","(⃗u),hb","(⃗v))","b ∗ π), where D(·, ·) is Hamming distance, the number of bits that disagree. This technique is used when b ≪ d, which leads to faster pair-wise comparisons between vectors, and a lower memory footprint.","Van Durme and Lall (2010) observed1","that if the feature values are additive over a dataset (e.g., when collecting word co-occurrence frequencies), then these signatures may be constructed online by unrolling the dot-product into a series of local operations: ⃗v ·⃗ri = Σt⃗vt ·⃗ri, where ⃗vt represents features observed locally at time t in a data-stream.","Since updates may be done locally, feature vectors do not need to be stored explicitly. This directly leads to significant space savings, as only one counter is needed for each of the b running sums.","In this work we focus on the following observa-tion: the counters used to store the running sums may themselves be an inefficient use of space, in that they may be amenable to compression through approximation.2","Since the accuracy of this LSH routine is a function of b, then if we were able to reduce the online requirements of each counter, we might afford a larger number of projections. Even if a chance of approximation error were introduced for each hash function, this may be justified in greater overall fidelity from the resultant increase inb.","1","A related point was made by Li et al. (2008) when discussing stable random projections.","2","A b bit signature requires the online storage of b ∗ 32 bits of memory when assuming a 32-bit floating point representation per counter, but since here the only thing one cares about these sums are their sign (positive or negative) then an approximation to the true sum may be sufficient. 18","Thus, we propose to approximate the online hash function, using a novel technique we call Reservoir Counting, in order to create a space trade-off between the number of projections and the amount of memory each projection requires. We show experimentally that this leads to greater accuracy approximations at the same memory cost, or similar accuracy approximations at a significantly reduced cost. This result is relevant to work in large-scale distributional semantics (Bhagat and Ravichandran, 2008; Van Durme and Lall, 2009; Pantel et al., 2009; Lin et al., 2010; Goyal et al., 2010; Bergsma and Van Durme, 2011), as well as large-scale processing of social media (Petrovic et al., 2010)."]},{"title":"2 Approach","paragraphs":["While not strictly required, we assume here to be dealing exclusively with integer-valued features. We then employ an integer-valued projection matrix in order to work with an integer-valued stream of online updates, which is reduced (implicitly) to a stream of positive and negative unit updates. The sign of the sum of these updates is approximated through a novel twist on Reservoir Sampling. When computed explicitly this leads to an impractical mechanism linear in each feature value update. To ensure our counter can (approximately) add and subtract in constant time, we then derive expressions for the expected value of each step of the update. The full algorithms are provided at the close. Unit Projection Rather than construct a projection matrix from N (0, 1), a matrix randomly populated with entries from the set {−1, 0, 1} will suffice, with quality dependent on the relative proportion of these elements. If we let p be the percent probability mass allocated to zeros, then we create a discrete projection matrix by sampling from the multinomial: ( 1−p","2 : −1, p : 0, 1−p","2 : +1). An experiment displaying the resultant quality is displayed in Fig. 1, for varied p. Henceforth we assume this discrete projection matrix, with p = 0.5.3","The use of such sparse projections was first proposed by Achlioptas (2003), then extended by Li et al. (2006). 3 Note that if using the pooling trick of Van Durme and Lall","(2010), this equates to a pool of the form: (-1,0,0,1). Percent.Zeros Mean.Absolute .Error 0.1 0.2 0.3 0.4 0.5 0.2 0.4 0.6 0.8 1.0 Method Discrete Normal Figure 1: With b = 256, mean absolute error in cosine approximation when using a projection based on N (0, 1), compared to {−1, 0, 1}. Unit Stream Based on a unit projection, we can view an online counter as summing over a stream drawn from {−1, 1}: each projected feature value unrolled into its (positive or negative) unary representation. For example, the stream: (3,-2,1), can be viewed as the updates: (1,1,1,-1,-1,1). Reservoir Sampling We can maintain a uniform sample of size k over a stream of unknown length as follows. Accept the firstk elements into an reservoir (array) of size k. Each following element at position n is accepted with probability k","n , whereupon an element currently in the reservoir is evicted, and replaced with the just accepted item. This scheme is guaranteed to provide a uniform sample, where early items are more likely to be accepted, but also at greater risk of eviction. Reservoir sampling is a folklore algorithm that was extended by Vitter (1985) to allow for multiple updates. Reservoir Counting If we are sampling over a stream drawn from just two values, we can implicitly represent the reservoir by counting only the frequency of one or the other elements.4","We can therefore sample the proportion of positive and negative unit values by tracking the current position in the stream, n, and keeping a log2(k + 1)-bit integer","4","For example, if we have a reservoir of size 5, containing three values of −1, and two values of 1, then the exchangeability of the elements means the reservoir is fully characterized by knowing k, and that there are two 1’s. 19 counter, s, for tracking the number of 1 values currently in the reservoir.5","When a negative value is accepted, we decrement the counter with probability s k . When a positive update is accepted, we increment the counter with probability (1 − s","k ). This reflects an update evicting either an element of the same sign, which has no effect on the makeup of the reservoir, or decreasing/increasing the number of 1’s currently sampled. An approximate sum of all values seen up to position n is then simply: n( 2s","k − 1). While this value is potentially interesting in future applications, here we are only concerned with its sign. Parallel Reservoir Counting On its own this counting mechanism hardly appears useful: as it is dependent on knowing n, then we might just as well sum the elements of the stream directly, counting in whatever space we would otherwise use in maintaining the value of n. However, if we have a set of tied streams that we process in parallel,6","then we only need to track n once, across b different streams, each with their own reservoir.","When dealing with parallel streams resulting from different random projections of the same vector, we cannot assume these will be strictly tied. Some projections will cancel out heavier elements than others, leading to update streams of different lengths once elements are unrolled into their (positive or negative) unary representation. In practice we have found that tracking the mean value of n across b streams is sufficient. When using ap = 0.5 zeroed matrix, we can update n by one half the magnitude of each observed value, as on average half the projections will cancel out any given element. This step can be found in Algorithm 2, lines 8 and 9. Example To make concrete what we have covered to this point, consider a given feature vector of dimensionality d = 3, say: [3, 2, 1]. This might be projected into b = 4, vectors: [3, 0, 0], [0, -2, 1], [0, 0, 1], and [-3, 2, 0]. When viewed as positive/negative, loosely-tied unit streams, they respectively have length n: 3, 3, 1, and 5, with mean length 3. The goal of reservoir counting is to efficiently keep track of an approximation of their sums (here: 3, -1, 1, and -1), while the underlying feature","5","E.g., a reservoir of size k = 255 requires an 8-bit integer.","6","Tied in the sense that each stream is of the same length, e.g., (-1,1,1) is the same length as (1,-1,-1). k n m mean(A) mean(A′",") 10 20 10 3.80 4.02 10 20 1000 37.96 39.31 50 150 1000 101.30 101.83 100 1100 100 8.88 8.72 100 10100 10 0.13 0.10","Table 1: Average over repeated calls to A and A′ . vector is being updated online. A k = 3 reservoir used for the last projected vector, [-3, 2, 0], might reasonably contain two values of -1, and one value of 1.7","Represented explicitly as a vector, the reservoir would thus be in the arrangement:","[1, -1, -1], [-1, 1, -1], or [-1, -1, 1]. These are functionally equivalent: we only need to know that one of the k = 3 elements is positive. Expected Number of Samples Traversing m consecutive values of either 1 or −1 in the unit stream should be thought of as seeing positive or negative m as a feature update. For a reservoir of size k, let A(m, n, k) be the number of samples accepted when traversing the stream from position n + 1 to n + m. A is non-deterministic: it represents the results of flipping m consecutive coins, where each coin is in-creasingly biased towards rejection.","Rather than computing A explicitly, which is linear in m, we will instead use the expected number of updates, A′","(m, n, k) = E[A(m, n, k)], which can be computed in constant time. Where H(x) is the harmonic number of x:8","A′ (m, n, k) = n+m ∑ i=n+1 k i = k(H(n + m) − H(n)) ≈ k loge(","n + m n ). For example, consider m = 30, encountered at","position n = 100, with a reservoir of k = 10. We","will then accept 10 loge( 130","100 ) ≈ 3.79 samples of 1. As the reservoir is a discrete set of bins, fractional","portions of a sample are resolved by a coin flip: if","a = k loge( n+m","n ), then accept u = ⌈a⌉ samples","with probability (a − ⌊a⌋), and u = ⌊a⌋ samples 7 Other options are: three -1’s, or one -1 and two 1’s. 8 With x a positive integer, H(x) = ∑x","i=1 1/x ≈ loge(x)+ γ, where γ is Euler’s constant. 20 otherwise. These steps are found in lines 3 and 4 of Algorithm 1. See Table 1 for simulation results using a variety of parameters. Expected Reservoir Change We now discuss how to simulate many independent updates of the same type to the reservoir counter, e.g.: five updates of 1, or three updates of -1, using a single estimate. Consider a situation in which we have a reservoir of size k with some current value of s, 0 ≤ s ≤ k, and we wish to perform u independent updates. We denote by U ′","k(s, u) the expected value of the reservoir after these u updates have taken place. Since a single update leads to no change with probability s","k , we","can write the following recurrence for U ′ k: U ′ k(s, u) = s k U ′ k(s, u − 1) +","k − s k U ′ k(s + 1, u − 1), with the boundary condition: for all s, U ′","k(s, 0) = s. Solving the above recurrence, we get that the expected value of the reservoir after these updates is: U ′ k(s, u) = k + (s − k)","( 1 − 1 k )u , which can be mechanically checked via induction. The case for negative updates follows similarly (see lines 7 and 8 of Algorithm 1).","Hence, instead of simulating u independent updates of the same type to the reservoir, we simply update it to this expected value, where fractional updates are handled similarly as when estimating the number of accepts. These steps are found in lines 5 through 9 of Algorithm 1, and as seen in Fig. 2, this can give a tight estimate. Comparison Simulation results over Zipfian distributed data can be seen in Fig. 3, which shows the use of reservoir counting in Online Locality Sensitive Hashing (as made explicit in Algorithm 2), as compared to the method described by Van Durme and Lall (2010).","The total amount of space required when using this counting scheme is b log2(k + 1) + 32: b reservoirs, and a 32 bit integer to track n. This is compared to b 32 bit floating point values, as is standard. Note that our scheme comes away with similar levels of accuracy, often at half the memory cost, while requiring larger b to account for the chance of approximation errors in individual reservoir counters. Expected T r ue 50 100 150 200 250 50 100 150 200 250 Figure 2: Results of simulating many iterations of U ′",", for k = 255, and various values of s and u. Algorithm 1 RESERVOIRUPDATE(n, k, m, σ, s) Parameters: n : size of stream so far k : size of reservoir, also maximum value of s m : magnitude of update σ : sign of update s : current value of reservoir 1: if m = 0 or σ = 0 then 2: Return without doing anything 3: a := A′","(m, n, k) = k log e","(n+m n )","4: u := ⌈a⌉ with probability a − ⌊a⌋, ⌊a⌋ otherwise","5: if σ = 1 then","6: s′ := U ′","(s, a) = k + (s − k) (1 − 1/k)u","7: else","8: s′ := U ′","(s, a) = s (1 − 1/k)u","9: Return ⌈s′","⌉ with probability s′","− ⌊s′","⌋, ⌊s′","⌋ otherwise Bits.Required Mean.Absolute .Error 0.06 0.07 0.08 0.09 0.10 0.11 0.12 l l l l l l l l l l l 1000 2000 3000 4000 5000 6000 7000 8000 log2.k l 8 l32 b l 64 128 192 256 512 Figure 3: Online LSH using reservoir counting (red) vs. standard counting mechanisms (blue), as measured by the amount of total memory required to the resultant error. 21 Algorithm 2 COMPUTESIGNATURE(S,k,b,p) Parameters: S : bit array of size b k : size of each reservoir b : number of projections p : percentage of zeros in projection, p ∈ [0, 1]","1: Initialize b reservoirs R[1, . . . , b], each represented by a log2(k + 1)-bit unsigned integer","2: Initialize b hash functions hi(w) that map features w to elements in a vector made up of −1 and 1 each with proportion 1−p","2 , and 0 at proportion p. 3: n := 0 4: {Processing the stream} 5: for each feature value pair (w, m) in stream do 6: for i := 1 to b do 7: R[i] := ReservoirUpdate(n, k, m, hi(w), R[i]) 8: n := n + ⌊m(1 − p)⌋ 9: n := n+1 with probability m(1−p)−⌊m(1−p)⌋ 10: {Post-processing to compute signature} 11: for i := 1 . . . b do 12: if R[i] > k","2 then 13: S[i] := 1 14: else 15: S[i] := 0"]},{"title":"3 Discussion Time and Space","paragraphs":["While we have provided a constant time, approximate update mechanism, the constants involved will practically remain larger than the cost of performing single hardware addition or subtraction operations on a traditional 32-bit counter. This leads to a tradeoff in space vs. time, where a high-throughput streaming application that is not concerned with online memory requirements will not have reason to consider the developments in this article. The approach given here is motivated by cases where data is not flooding in at breakneck speed, and resource considerations are dominated by a large number of unique elements for which we are maintaining signatures. Empirically investigat-ing this tradeoff is a matter of future work. Random Walks As we here only care for the sign of the online sum, rather than an approximation of its actual value, then it is reasonable to consider instead modeling the problem directly as a random walk on a linear Markov chain, with unit updates directly corresponding to forward or backward state"]},{"title":"-4 -3 -2 -1 0 1 2 3","paragraphs":["Figure 4: A simple 8-state Markov chain, requiring lg(8) = 3 bits. Dark or light states correspond to a prediction of a running sum being positive or negative. States are numerically labeled to reflect the similarity to a small bit integer data type, one that never overflows. transitions. Assuming a fixed probability of a positive versus negative update, then in expectation the state of the chain should correspond to the sign. However if we are concerned with the global statistic, as we are here, then the assumption of a fixed probability update precludes the analysis of streaming sources that contain local irregularities.9","In distributional semantics, consider a feature stream formed by sequentially reading the n-gram resource of Brants and Franz (2006). The pair: (the dog : 3,502,485), can be viewed as a feature value pair: (leftWord=’the’ : 3,502,485), with respect to online signature generation for the word dog. Rather than viewing this feature repeatedly, spread over a large corpus, the update happens just once, with large magnitude. A simple chain such as seen in Fig. 4 will be “pushed” completely to the right or the left, based on the polarity of the projection, irrespective of previously observed updates. Reservoir Counting, representing an online uniform sample, is agnostic to the ordering of elements in the stream."]},{"title":"4 Conclusion","paragraphs":["We have presented a novel approximation scheme we call Reservoir Counting, motivated here by a desire for greater space efficiency in Online Locality Sensitive Hashing. Going beyond our results provided for synthetic data, future work will explore applications of this technique, such as in experiments with streaming social media like Twitter. Acknowledgments This work benefited from conversations with Daniel Štefonkovič and Damianos Karakos. 9 For instance: (1,1,...,1,1,-1,-1,-1), is overall positive, but","locally negative at the end. 22"]},{"title":"References","paragraphs":["Dimitris Achlioptas. 2003. Database-friendly random projections: Johnson-lindenstrauss with binary coins. J. Comput. Syst. Sci., 66:671–687, June.","Shane Bergsma and Benjamin Van Durme. 2011. Learning Bilingual Lexicons using the Visual Similarity of Labeled Web Images. In Proc. of the International Joint Conference on Artificial Intelligence (IJCAI).","Rahul Bhagat and Deepak Ravichandran. 2008. Large Scale Acquisition of Paraphrases for Learning Surface Patterns. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL).","Thorsten Brants and Alex Franz. 2006. Web 1T 5-gram version 1.","Moses Charikar. 2002. Similarity estimation techniques from rounding algorithms. In Proceedings of STOC.","Michel X. Goemans and David P. Williamson. 1995. Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. JACM, 42:1115–1145.","Amit Goyal, Jagadeesh Jagarlamudi, Hal Daumé III, and Suresh Venkatasubramanian. 2010. Sketch Techniques for Scaling Distributional Similarity to the Web. In Proceedings of the ACL Workshop on GEometrical Models of Natural Language Semantics.","Piotr Indyk and Rajeev Motwani. 1998. Approximate nearest neighbors: towards removing the curse of dimensionality. In Proceedings of STOC.","Ping Li, Trevor J. Hastie, and Kenneth W. Church. 2006. Very sparse random projections. In Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, KDD ’06, pages 287–296, New York, NY, USA. ACM.","Ping Li, Kenneth W. Church, and Trevor J. Hastie. 2008. One Sketch For All: Theory and Application of Conditional Random Sampling. In Proc. of the Conference on Advances in Neural Information Processing Systems (NIPS).","Dekang Lin, Kenneth Church, Heng Ji, Satoshi Sekine, David Yarowsky, Shane Bergsma, Kailash Patil, Emily Pitler, Rachel Lathbury, Vikram Rao, Kapil Dalwani, and Sushant Narsale. 2010. New Tools for Web-Scale N-grams. In Proceedings of LREC.","Patrick Pantel, Eric Crestan, Arkady Borkovsky, Ana-Maria Popescu, and Vishnu Vyas. 2009. Web-Scale Distributional Similarity and Entity Set Expansion. In Proc. of the Conference on Empirical Methods in Natural Language Processing (EMNLP).","Sasa Petrovic, Miles Osborne, and Victor Lavrenko. 2010. Streaming First Story Detection with application to Twitter. In Proceedings of the Annual Meeting of the North American Association of Computational Linguistics (NAACL).","Deepak Ravichandran, Patrick Pantel, and Eduard Hovy. 2005. Randomized Algorithms and NLP: Using Locality Sensitive Hash Functions for High Speed Noun Clustering. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL).","Benjamin Van Durme and Ashwin Lall. 2009. Streaming Pointwise Mutual Information. In Proc. of the Conference on Advances in Neural Information Processing Systems (NIPS).","Benjamin Van Durme and Ashwin Lall. 2010. Online Generation of Locality Sensitive Hash Signatures. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL).","Jeffrey S. Vitter. 1985. Random sampling with a reservoir. ACM Trans. Math. Softw., 11:37–57, March. 23"]}],"references":[{"authors":[{"first":"Dimitris","last":"Achlioptas"}],"year":"2003","title":"Database-friendly random projections: Johnson-lindenstrauss with binary coins","source":"Dimitris Achlioptas. 2003. Database-friendly random projections: Johnson-lindenstrauss with binary coins. J. Comput. Syst. Sci., 66:671–687, June."},{"authors":[{"first":"Shane","last":"Bergsma"},{"first":"Benjamin","last":"Van Durme"}],"year":"2011","title":"Learning Bilingual Lexicons using the Visual Similarity of Labeled Web Images","source":"Shane Bergsma and Benjamin Van Durme. 2011. Learning Bilingual Lexicons using the Visual Similarity of Labeled Web Images. In Proc. of the International Joint Conference on Artificial Intelligence (IJCAI)."},{"authors":[{"first":"Rahul","last":"Bhagat"},{"first":"Deepak","last":"Ravichandran"}],"year":"2008","title":"Large Scale Acquisition of Paraphrases for Learning Surface Patterns","source":"Rahul Bhagat and Deepak Ravichandran. 2008. Large Scale Acquisition of Paraphrases for Learning Surface Patterns. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL)."},{"authors":[{"first":"Thorsten","last":"Brants"},{"first":"Alex","last":"Franz"}],"year":"2006","title":"Web 1T 5-gram version 1","source":"Thorsten Brants and Alex Franz. 2006. Web 1T 5-gram version 1."},{"authors":[{"first":"Moses","last":"Charikar"}],"year":"2002","title":"Similarity estimation techniques from rounding algorithms","source":"Moses Charikar. 2002. Similarity estimation techniques from rounding algorithms. In Proceedings of STOC."},{"authors":[{"first":"Michel X","middle":".","last":"Goemans"},{"first":"David","middle":"P.","last":"Williamson"}],"year":"1995","title":"Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming","source":"Michel X. Goemans and David P. Williamson. 1995. Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. JACM, 42:1115–1145."},{"authors":[{"first":"Amit","last":"Goyal"},{"first":"Jagadeesh","last":"Jagarlamudi"},{"first":"Hal","last":"Daumé III"},{"first":"Suresh","last":"Venkatasubramanian"}],"year":"2010","title":"Sketch Techniques for Scaling Distributional Similarity to the Web","source":"Amit Goyal, Jagadeesh Jagarlamudi, Hal Daumé III, and Suresh Venkatasubramanian. 2010. Sketch Techniques for Scaling Distributional Similarity to the Web. In Proceedings of the ACL Workshop on GEometrical Models of Natural Language Semantics."},{"authors":[{"first":"Piotr","last":"Indyk"},{"first":"Rajeev","last":"Motwani"}],"year":"1998","title":"Approximate nearest neighbors: towards removing the curse of dimensionality","source":"Piotr Indyk and Rajeev Motwani. 1998. Approximate nearest neighbors: towards removing the curse of dimensionality. In Proceedings of STOC."},{"authors":[{"first":"Ping","last":"Li"},{"first":"Trevor","middle":"J.","last":"Hastie"},{"first":"Kenneth","middle":"W.","last":"Church"}],"year":"2006","title":"Very sparse random projections","source":"Ping Li, Trevor J. Hastie, and Kenneth W. Church. 2006. Very sparse random projections. In Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, KDD ’06, pages 287–296, New York, NY, USA. ACM."},{"authors":[{"first":"Ping","last":"Li"},{"first":"Kenneth","middle":"W.","last":"Church"},{"first":"Trevor","middle":"J.","last":"Hastie"}],"year":"2008","title":"One Sketch For All: Theory and Application of Conditional Random Sampling","source":"Ping Li, Kenneth W. Church, and Trevor J. Hastie. 2008. One Sketch For All: Theory and Application of Conditional Random Sampling. In Proc. of the Conference on Advances in Neural Information Processing Systems (NIPS)."},{"authors":[{"first":"Dekang","last":"Lin"},{"first":"Kenneth","last":"Church"},{"first":"Heng","last":"Ji"},{"first":"Satoshi","last":"Sekine"},{"first":"David","last":"Yarowsky"},{"first":"Shane","last":"Bergsma"},{"first":"Kailash","last":"Patil"},{"first":"Emily","last":"Pitler"},{"first":"Rachel","last":"Lathbury"},{"first":"Vikram","last":"Rao"},{"first":"Kapil","last":"Dalwani"},{"first":"Sushant","last":"Narsale"}],"year":"2010","title":"New Tools for Web-Scale N-grams","source":"Dekang Lin, Kenneth Church, Heng Ji, Satoshi Sekine, David Yarowsky, Shane Bergsma, Kailash Patil, Emily Pitler, Rachel Lathbury, Vikram Rao, Kapil Dalwani, and Sushant Narsale. 2010. New Tools for Web-Scale N-grams. In Proceedings of LREC."},{"authors":[{"first":"Patrick","last":"Pantel"},{"first":"Eric","last":"Crestan"},{"first":"Arkady","last":"Borkovsky"},{"first":"Ana-Maria","last":"Popescu"},{"first":"Vishnu","last":"Vyas"}],"year":"2009","title":"Web-Scale Distributional Similarity and Entity Set Expansion","source":"Patrick Pantel, Eric Crestan, Arkady Borkovsky, Ana-Maria Popescu, and Vishnu Vyas. 2009. Web-Scale Distributional Similarity and Entity Set Expansion. In Proc. of the Conference on Empirical Methods in Natural Language Processing (EMNLP)."},{"authors":[{"first":"Sasa","last":"Petrovic"},{"first":"Miles","last":"Osborne"},{"first":"Victor","last":"Lavrenko"}],"year":"2010","title":"Streaming First Story Detection with application to Twitter","source":"Sasa Petrovic, Miles Osborne, and Victor Lavrenko. 2010. Streaming First Story Detection with application to Twitter. In Proceedings of the Annual Meeting of the North American Association of Computational Linguistics (NAACL)."},{"authors":[{"first":"Deepak","last":"Ravichandran"},{"first":"Patrick","last":"Pantel"},{"first":"Eduard","last":"Hovy"}],"year":"2005","title":"Randomized Algorithms and NLP: Using Locality Sensitive Hash Functions for High Speed Noun Clustering","source":"Deepak Ravichandran, Patrick Pantel, and Eduard Hovy. 2005. Randomized Algorithms and NLP: Using Locality Sensitive Hash Functions for High Speed Noun Clustering. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL)."},{"authors":[{"first":"Benjamin","last":"Van Durme"},{"first":"Ashwin","last":"Lall"}],"year":"2009","title":"Streaming Pointwise Mutual Information","source":"Benjamin Van Durme and Ashwin Lall. 2009. Streaming Pointwise Mutual Information. In Proc. of the Conference on Advances in Neural Information Processing Systems (NIPS)."},{"authors":[{"first":"Benjamin","last":"Van Durme"},{"first":"Ashwin","last":"Lall"}],"year":"2010","title":"Online Generation of Locality Sensitive Hash Signatures","source":"Benjamin Van Durme and Ashwin Lall. 2010. Online Generation of Locality Sensitive Hash Signatures. In Proc. of the Annual Meeting of the Association for Computational Linguistics (ACL)."},{"authors":[{"first":"Jeffrey","middle":"S.","last":"Vitter"}],"year":"1985","title":"Random sampling with a reservoir","source":"Jeffrey S. Vitter. 1985. Random sampling with a reservoir. ACM Trans. Math. Softw., 11:37–57, March. 23"}],"cites":[{"style":0,"text":"Ravichandran et al. (2005)","origin":{"pointer":"/sections/2/paragraphs/1","offset":0,"length":26},"authors":[{"last":"Ravichandran"},{"last":"al."}],"year":"2005","references":["/references/13"]},{"style":0,"text":"Charikar (2002)","origin":{"pointer":"/sections/2/paragraphs/1","offset":86,"length":15},"authors":[{"last":"Charikar"}],"year":"2002","references":["/references/4"]},{"style":0,"text":"Indyk and Motwani (1998)","origin":{"pointer":"/sections/2/paragraphs/1","offset":118,"length":24},"authors":[{"last":"Indyk"},{"last":"Motwani"}],"year":"1998","references":["/references/7"]},{"style":0,"text":"Goemans and Williamson (1995)","origin":{"pointer":"/sections/2/paragraphs/1","offset":147,"length":29},"authors":[{"last":"Goemans"},{"last":"Williamson"}],"year":"1995","references":["/references/5"]},{"style":0,"text":"Durme and Lall (2010)","origin":{"pointer":"/sections/2/paragraphs/15","offset":4,"length":21},"authors":[{"last":"Durme"},{"last":"Lall"}],"year":"2010","references":[]},{"style":0,"text":"Li et al. (2008)","origin":{"pointer":"/sections/2/paragraphs/21","offset":28,"length":16},"authors":[{"last":"Li"},{"last":"al."}],"year":"2008","references":["/references/9"]},{"style":0,"text":"Bhagat and Ravichandran, 2008","origin":{"pointer":"/sections/2/paragraphs/24","offset":472,"length":29},"authors":[{"last":"Bhagat"},{"last":"Ravichandran"}],"year":"2008","references":["/references/2"]},{"style":0,"text":"Durme and Lall, 2009","origin":{"pointer":"/sections/2/paragraphs/24","offset":507,"length":20},"authors":[{"last":"Durme"},{"last":"Lall"}],"year":"2009","references":[]},{"style":0,"text":"Pantel et al., 2009","origin":{"pointer":"/sections/2/paragraphs/24","offset":529,"length":19},"authors":[{"last":"Pantel"},{"last":"al."}],"year":"2009","references":["/references/11"]},{"style":0,"text":"Lin et al., 2010","origin":{"pointer":"/sections/2/paragraphs/24","offset":550,"length":16},"authors":[{"last":"Lin"},{"last":"al."}],"year":"2010","references":["/references/10"]},{"style":0,"text":"Goyal et al., 2010","origin":{"pointer":"/sections/2/paragraphs/24","offset":568,"length":18},"authors":[{"last":"Goyal"},{"last":"al."}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Durme, 2011","origin":{"pointer":"/sections/2/paragraphs/24","offset":604,"length":11},"authors":[{"last":"Durme"}],"year":"2011","references":[]},{"style":0,"text":"Petrovic et al., 2010","origin":{"pointer":"/sections/2/paragraphs/24","offset":669,"length":21},"authors":[{"last":"Petrovic"},{"last":"al."}],"year":"2010","references":["/references/12"]},{"style":0,"text":"Achlioptas (2003)","origin":{"pointer":"/sections/3/paragraphs/3","offset":57,"length":17},"authors":[{"last":"Achlioptas"}],"year":"2003","references":["/references/0"]},{"style":0,"text":"Li et al. (2006)","origin":{"pointer":"/sections/3/paragraphs/3","offset":93,"length":16},"authors":[{"last":"Li"},{"last":"al."}],"year":"2006","references":["/references/8"]},{"style":0,"text":"Vitter (1985)","origin":{"pointer":"/sections/3/paragraphs/5","offset":313,"length":13},"authors":[{"last":"Vitter"}],"year":"1985","references":["/references/16"]},{"style":0,"text":"Durme and Lall (2010)","origin":{"pointer":"/sections/3/paragraphs/40","offset":573,"length":21},"authors":[{"last":"Durme"},{"last":"Lall"}],"year":"2010","references":[]},{"style":0,"text":"Brants and Franz (2006)","origin":{"pointer":"/sections/5/paragraphs/1","offset":109,"length":23},"authors":[{"last":"Brants"},{"last":"Franz"}],"year":"2006","references":["/references/3"]}]}
