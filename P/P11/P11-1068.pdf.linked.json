{"sections":[{"title":"","paragraphs":["Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 673–682, Portland, Oregon, June 19-24, 2011. c⃝2011 Association for Computational Linguistics"]},{"title":"Dynamic Programming Algorithms for Transition-Based Dependency Parsers Marco Kuhlmann","paragraphs":["Dept. of Linguistics and Philology","Uppsala University, Sweden marco.kuhlmann@lingfil.uu.se"]},{"title":"Carlos Gómez-Rodríguez","paragraphs":["Departamento de Computación Universidade da Coruña, Spain","cgomezr@udc.es"]},{"title":"Giorgio Satta","paragraphs":["Dept. of Information Engineering University of Padua, Italy satta@dei.unipd.it"]},{"title":"Abstract","paragraphs":["We develop a general dynamic programming technique for the tabulation of transition-based dependency parsers, and apply it to obtain novel, polynomial-time algorithms for parsing with the arc-standard and arc-eager models. We also show how to reverse our technique to obtain new transition-based dependency parsers from existing tabular methods. Additionally, we provide a detailed discussion of the conditions under which the feature models commonly used in transition-based parsing can be integrated into our algorithms."]},{"title":"1 Introduction","paragraphs":["Dynamic programming algorithms, also known as tabular or chart-based algorithms, are at the core of many applications in natural language processing. When applied to formalisms such as context-free grammar, they provide polynomial-time parsing algorithms and polynomial-space representations of the resulting parse forests, even in cases where the size of the search space is exponential in the length of the input string. In combination with appropriate semirings, these packed representations can be exploited to compute many values of interest for machine learning, such as best parses and feature expectations (Goodman, 1999; Li and Eisner, 2009).","In this paper, we follow the line of investigation started by Huang and Sagae (2010) and apply dynamic programming to (projective) transition-based dependency parsing (Nivre, 2008). The basic idea, originally developed in the context of push-down automata (Lang, 1974; Tomita, 1986; Billot and Lang, 1989), is that while the number of computations of a transition-based parser may be exponential in the length of the input string, several portions of these computations, when appropriately represented, can be shared. This can be effectively implemented through dynamic programming, resulting in a packed representation of the set of all computations.","The contributions of this paper can be summarized as follows. We provide (declarative specifications of) novel, polynomial-time algorithms for two widely-used transition-based parsing models: arc-standard (Nivre, 2004; Huang and Sagae, 2010) and arc-eager (Nivre, 2003; Zhang and Clark, 2008). Our algorithm for the arc-eager model is the first tabular algorithm for this model that runs in polynomial time. Both algorithms are derived using the same general technique; in fact, we show that this technique is applicable to all transition-parsing models whose transitions can be classified into “shift” and “reduce” transitions. We also show how to reverse the tabulation to derive a new transition system from an existing tabular algorithm for dependency parsing, originally developed by Gómez-Rodríguez et al. (2008). Finally, we discuss in detail the role of feature information in our algorithms, and in particular the conditions under which the feature models traditionally used in transition-based dependency parsing can be integrated into our framework.","While our general approach is the same as the one of Huang and Sagae (2010), we depart from their framework by not representing the computations of a parser as a graph-structured stack in the sense of Tomita (1986). We instead simulate computations as in Lang (1974), which results in simpler algorithm specifications, and also reveals deep similarities between transition-based systems for dependency parsing and existing tabular methods for lexicalized context-free grammars. 673"]},{"title":"2 Transition-Based Dependency Parsing","paragraphs":["We start by briefly introducing the framework of transition-based dependency parsing; for details, we refer to Nivre (2008). 2.1 Dependency Graphs Let w D w0 wn 1 be a string over some fixed alphabet, where n 1 and w0 is the special token root. A dependency graph for w is a directed graph G D .Vw ; A/, where Vw D f0; : : : ; n 1g is the set of nodes, and A Vw Vw is the set of arcs. Each node in Vw encodes the position of a token in w, and each arc in A encodes a dependency relation between two tokens. To denote an arc .i; j / 2 A, we write i ! j ; here, the node i is the head, and the node j is the dependent. A sample dependency graph is given in the left part of Figure 2. 2.2 Transition Systems A transition system is a structure S D .C; T; I; Ct /, where C is a set of configurations, T is a finite set of transitions, which are partial functions t W C * C , I is a total initialization function mapping each input string to a unique initial configuration, andCt C is a set of terminal configurations.","The transition systems that we investigate in this paper differ from each other only with respect to their sets of transitions, and are identical in all other aspects. In each of them, a configuration is defined relative to a stringw as above, and is a triple c D .; ;̌ A/ , where and ̌are disjoint lists of nodes from Vw , called stack and buffer, respectively, and A Vw Vw is a set of arcs. We denote the stack, buffer and arc set associated with c by .c/ , .̌c/, and A.c/, respectively. We follow a standard convention and write the stack with its topmost element to the right, and the buffer with its first element to the left; furthermore, we indicate concatenation in the stack and in the buffer by a vertical bar. The initialization function maps each string w to the initial configuration.Œ; Œ0; : : : ; jwj 1; ;/. The set of terminal configurations contains all configurations of the form .Œ0; Œ; A/, where A is some set of arcs.","Given an input string w, a parser based on S processes w from left to right, starting in the initial configuration I.w/. At each point, it applies one of the transitions, until at the end it reaches a terminal",".; i j;̌ A/ ̀. ji; ;̌ A/ .sh/ . jijj; ;̌ A/ ̀. jj; ;̌ A [ fj ! ig/ .la/ . jijj; ;̌ A/ ̀. ji; ;̌ A [ fi ! j g/ .ra/ Figure 1: Transitions in the arc-standard model. configuration; the dependency graph defined by the arc set associated with that configuration is then re-turned as the analysis for w. Formally, a computation of S on w is a sequence D c0; : : : ; cm, m 0, of configurations (defined relative tow) in which each configuration is obtained as the value of the preceding one under some transition. It is called complete whenever c0 D I.w/, and cm 2 Ct . We note that a computation can be uniquely specified by its initial configurationc0 and the sequence of its transitions, understood as a string over T . Complete computations, where c0 is fixed, can be specified by their transition sequences alone."]},{"title":"3 Arc-Standard Model","paragraphs":["To introduce the core concepts of the paper, we first look at a particularly simple model for transition-based dependency parsing, known as the arc-standard model. This model has been used, in slightly different variants, by a number of parsers (Nivre, 2004; Attardi, 2006; Huang and Sagae, 2010). 3.1 Transition System The arc-standard model uses three types of transitions: Shift (sh) removes the first node in the buffer and pushes it to the stack. Left-Arc (la) creates a new arc with the topmost node on the stack as the head and the second-topmost node as the dependent, and removes the second-topmost node from the stack. Right-Arc (ra) is symmetric to Left-Arc in that it creates an arc with the second-topmost node as the head and the topmost node as the dependent, and removes the topmost node.","The three transitions can be formally specified as in Figure 1. The right half of Figure 2 shows a complete computation of the arc-standard transition system, specified by its transition sequence. The picture also shows the contents of the stack over the course of the computation; more specifically, columni shows the stack .c i / associated with the configurationci . 674 root This news had little effect on the markets 0 1 0 0 1 2 0 2 0 2 3 0 3 0 3 0 3 0 3 54 4 5 0 3 5 0 3 5 0 3 5 6 6 6 77 8 0 3 5 6 8 0 3 5 6 0 3 5 0 3 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sh sh sh la sh la sh sh la sh sh sh la ra ra ra ra 1 2 0 Figure 2: A dependency tree (left) and a computation generating this tree in the arc-standard system (right). 3.2 Push Computations The key to the tabulation of transition-based dependency parsers is to find a way to decompose computations into smaller, shareable parts. For the arc-standard model, as well as for the other transition systems that we consider in this paper, we base our decomposition on the concept of push computations. By this, we mean computations D c0; : : : ; cm ; m 1 ; on some input string w with the following properties:","(P1) The initial stack .c 0/ is not modified during the computation, and is not even exposed after the first transition: For every1 i m, there exists a non-empty stack i such that .c i / D .c 0/j i .","(P2) The overall effect of the computation is to push a single node to the stack: The stack .c m/ can be written as .c m/ D .c 0/jh, for some h 2 Vw .","We can verify that the computation in Figure 2 is a push computation. We can also see that it contains shorter computations that are push computations; one example is the computation 0 D c1; : : : ; c16, whose overall effect is to push the node 3. In Figure 2, this computation is marked by the zig-zag path traced in bold. The dashed line delineates the stack .c 1/, which is not modified during 0.","Every computation that consists of a single sh transition is a push computation. Starting from these atoms, we can build larger push computations by means of two (partial) binary operations fla and fra, defined as follows. Let 1 D c10; : : : ; c1m1 and 2 D c20; : : : ; c2m2 be push computations on the same input string w such that c1m1 D c20. Then fra. 1; 2/ D c10; : : : ; c1m1; c21; : : : ; c2m2; c ; where c is obtained from c2m2 by applying the ra transition. (The operation fla is defined analogously.) We can verify that fra. 1; 2/ is another push computation. For instance, with respect to Figure 2, fra. 1; 2/ D 0. Conversely, we say that the push computation 0 can be decomposed into the subcomputations 1 and 2, and the operation fra. 3.3 Deduction System Building on the compositional structure of push computations, we now construct a deduction system (in the sense of Shieber et al. (1995)) that tabulates the computations of the arc-standard model for a given input string w D w0 wn 1. For 0 i n, we shall write ǐ to denote the buffer Œi; : : : ; n 1. Thus, 0̌ denotes the full buffer, associated with the initial configurationI.w/, and ň denotes the empty buffer, associated with a terminal configurationc 2 Ct .","Item form. The items of our deduction system take the form Œi; h; j , where 0 i h < j n. The intended interpretation of an item Œi; h; j is: For every configuration c0 with .̌c0/ D ǐ , there exists a push computation D c0; : : : ; cm such that .̌cm/ D ǰ , and .c m/ D .c 0/jh.","Goal. The only goal item is Œ0; 0; n, asserting that there exists a complete computation for w.","Axioms. For every stack , position i < n and arc set A, by a single sh transition we obtain the push computation .; ̌i ; A/; . ji; ǐC1; A/. Therefore we can take the set of all items of the form Œi; i; i C 1 as the axioms of our system.","Inference rules. The inference rules parallel the composition operations fla and fra. Suppose that we have deduced the items Œi; h1; k and Œk; h2; j , where 0 i h1 < k h2 < j n. The item Œi; h1; k asserts that for every configurationc10 675 Item form: Œi; h; j , 0 i h < j j wj Goal: Œ0; 0; jwj Axioms: Œi; i; i C 1 Inference rules: Œi; h1; k Œk; h2; j Œi; h2; j .laI h2 ! h1/ Œi; h1; k Œk; h2; j Œi; h1; j .raI h1 ! h2/ Figure 3: Deduction system for the arc-standard model. with .̌c10/ D ǐ , there exists a push computation 1 D c10; : : : ; c1m1 such that .̌c1m1/ D ǩ, and .c 1m1/ D .c 10/jh1. Using the item Œk; h2; j , we deduce the existence of a second push computation 2 D c20; : : : ; c2m2 such that c20 D c1m1, .̌c2m2/ D ǰ , and .c 2m2/ D .c 10/jh1jh2. By means of fra, we can then compose 1 and 2 into a new push computation fra. 1; 2/ D c10; : : : ; c1m1; c21; : : : ; c2m2; c : Here, .̌c/ D ǰ , and .c/ D .c 10/jh1. Therefore, we may generate the item Œi; h1; j . The inference rule for la can be derived analogously. Figure 3 shows the complete deduction system. 3.4 Completeness and Non-Ambiguity We have informally argued that our deduction system is sound. To show completeness, we prove the following lemma: For all 0 i h < j j wj and every push computation D c0; : : : ; cm on w with .̌c0/ D ǐ , .̌cm/ D ǰ and .c m/ D .c 0/jh, the item Œi; h; j is generated. The proof is by induction on m, and there are two cases: m D 1. In this case, consists of a single sh transition, h D i , j D i C 1, and we need to show that the item Œi; i; i C 1 is generated. This holds because this item is an axiom. m 2. In this case, ends with either a la or a ra transition. Let c be the rightmost configuration in that is different from cm and whose stack size is one larger than the size of .c 0/. The computations 1 D c0; : : : ; c and 2 D c; : : : ; cm 1 are both push computations with strictly fewer transitions than . Suppose that the last transition in is ra. In this case, .̌c/ D ǩ for some i < k < j , .c/ D .c 0/jh with h < k, .̌cm 1/ D ǰ , and .c m 1/ D .c 0/jhjh0","for some k h0","< j . By induction, we may assume that we have generated items Œi; h; k and Œk; h0","; j . Applying the inference rule for ra, we deduce the item Œi; h; j . An analogous argument can be made for fla.","Apart from being sound and complete, our deduction system also has the property that it assigns at most one derivation to a given item. To see this, note that in the proof of the lemma, the choice of c is uniquely determined: If we take any other configuration c0","that meets the selection criteria, then the computation 0","2 D c0","; : : : ; c","m 1 is not a push computation, as it contains c as an intermediate configuration, and thereby violates property P1. 3.5 Discussion Let us briefly take stock of what we have achieved so far. We have provided a deduction system capable of tabulating the set of all computations of an arc-standard parser on a given input string, and proved the correctness of this system relative to an interpretation based on push computations. Inspecting the system, we can see that its generic implementation takes space in O.jwj3","/ and time in O.jwj5","/.","Our deduction system is essentially the same as the one for the CKY algorithm for bilexicalized context-free grammar (Collins, 1996; Gómez-Rodríguez et al., 2008). This equivalence reveals a deep correspondence between the arc-standard model and bilexicalized context-free grammar, and, via results by Eisner and Satta (1999), to head automata. In particular, Eisner’s and Satta’s “hook trick” can be applied to our tabulation to reduce its runtime to O.jwj4","/."]},{"title":"4 Adding Features","paragraphs":["The main goal with the tabulation of transition-based dependency parsers is to obtain a representation based on which semiring values such as the highest-scoring computation for a given input (and with it, a dependency tree) can be calculated. Such computations involve the use of feature information. In this section, we discuss how our tabulation of the arc-standard system can be extended for this purpose. 676 Œi; h1; kI hx2; x1i; hx1; x3i W v1 Œk; h2; j I hx1; x3i; hx3; x4i W v2 Œi; h1; j I hx2; x1i; hx1; x3i W v1 C v2 C hx3; x4i Er̨a .ra/ Œi; h; j I hx2; x1i; hx1; x3i W v Œj; j; j C 1I hx1; x3i; hx3; wj i W hx1; x3i Es̨h .sh/ Figure 4: Extended inference rules under the feature model ̊D hs1:w; s0:wi. The annotations indicate how to calculate a candidate for an update of the Viterbi score of the conclusion using the Viterbi scores of the premises. 4.1 Scoring Computations For the sake of concreteness, suppose that we want to score computations based on the following model, taken from Zhang and Clark (2008). The score of a computation is broken down into a sum of scores score.t; ct / for combinations of a transition t in the transition sequence associated with and the configuration ct in which t was taken: score. / D X t2 score.t; ct / (1) The score score.t; ct / is defined as the dot product of the feature representation of ct relative to a feature model ̊and a transition-specific weight vector Et̨ : score.t; ct / D .̊ct / Et̨ The feature model ̊is a vector h 1; : : : ; ni of elementary feature functions, and the feature representation .̊c/ of a configuration c is a vector Ex D h 1.c/; : : : ; n.c/i of atomic values. Two examples of feature functions are the word form associated with the topmost and second-topmost node on the stack; adopting the notation of Huang and Sagae (2010), we will write these functions as s0:w and s1:w, respectively. Feature functions like these have been used in several parsers (Nivre, 2006; Zhang and Clark, 2008; Huang et al., 2009). 4.2 Integration of Feature Models To integrate feature models into our tabulation of the arc-standard system, we can use extended items of the form Œi; h; j I ExL; ExR with the same intended interpretation as the old items Œi; h; j , except that the initial configuration of the asserted computations D c0; : : : ; cm now is required to have the feature representation ExL, and the final configuration is required to have the representation ExR: .̊c0/ D ExL and .̊cm/ D ExR We shall refer to the vectors ExL and ExR as the left-context vector and the right-context vector of the computation , respectively.","We now need to change the deduction rules so that they become faithful to the extended interpretation. Intuitively speaking, we must ensure that the feature values can be computed along the inference rules. As a concrete example, consider the feature model ̊D hs1:w; s0:wi. In order to integrate this model into our tabulation, we change the rule for ra as in Figure 4, where x1; : : : ; x4 range over possible word forms. The shared variable occurrences in this rule capture the constraints that hold between the feature values of the subcomputations 1 and 2 asserted by the premises, and the computations fra. 1; 2/ asserted by the conclusion. To illustrate this, suppose that 1 and 2 are as in Figure 2. Then the three occurrences of x3 for instance encode that Œs0:w.c6/ D Œs1:w.c15/ D Œs0:w.c16/ D w3 :","We also need to extend the axioms, which correspond to computations consisting of a single sh transition. The most conservative way to do this is to use a generate-and-test technique: Extend the existing axioms by all valid choices of left-context and right-context vectors, that is, by all pairs ExL; ExR such that there exists a configurationc with .̊c/ D ExL and .̊sh.c// D ExR. The task of filtering out useless guesses can then be delegated to the deduction system.","A more efficient way is to only have one axiom, for the case where c D I.w/, and to add to the deduction system a new, unary inference rule for sh as in Figure 4. This rule only creates items whose left-context vector is the right-context vector of some other item, which prevents the generation of useless items. In the following, we take this second approach, which is also the approach of Huang and Sagae (2010). 677 Œi; h; j I hx2; x1i; hx1; x3i W .p; v/ Œj; j; j C 1I hx1; x3i; hx3; wj i W .p C ; / .sh/ , where D hx1; x3i Es̨h Œi; h1; kI hx2; x1i; hx1; x3i W .p1; v1/ Œk; h2; j I hx1; x3i; hx3; x4i W .p2; v2/ Œi; h1; j I hx2; x1i; hx1; x3i W .p1 C v2 C ; v 1 C v2 C / .ra/ , where D hx3; x4i Er̨a Figure 5: Extended inference rules under the feature model ̊D hs0:w; s1:wi. The annotations indicate how to calculate a candidate for an update of the prefix score and Viterbi score of the conclusion. 4.3 Computing Viterbi Scores Once we have extended our deduction system with feature information, many values of interest can be computed. One simple example is the Viterbi score for an input w, defined as arg max 2 .w/ score. / ; (2) where .w/ denotes the set of all complete computations for w. The score of a complex computation ft . 1; 2/ is the sum of the scores of its subcomputations 1; 2, plus the transition-specific dot product. Since this dot product only depends on the feature representation of the final configuration of 2, the Viterbi score can be computed on top of the inference rules using standard techniques. The crucial calculation is indicated in Figure 4. 4.4 Computing Prefix Scores Another interesting value is the prefix scoreof an item, which, apart from the Viterbi score, also in-cludes the cost of the best search path leading to the item. Huang and Sagae (2010) use this quantity to order the items in a beam search on top of their dynamic programming method. In our framework, prefix scores can be computed as indicated in Figure 5. Alternatively, we can also use the more involved calculation employed by Huang and Sagae (2010), which allows them to get rid of the left-context vector from their items.1 4.5 Compatibility So far we have restricted our attention to a concrete and extremely simplistic feature model. The feature models that are used in practical systems are considerably more complex, and not all of them are 1","The essential idea in the calculation by Huang and Sagae (2010) is to delegate (in the computation of the Viterbi score) the scoring of sh transitions to the inference rules for la/ra. compatible with our framework in the sense that they can be integrated into our deduction system in the way described in Section 4.2.","For a simple example of a feature model that is incompatible with our tabulation, consider the model ̊0","D hs0:rc:wi, whose single feature function extracts the word form of the right child (rc) of the topmost node on the stack. Even if we know the values of this feature for two computations 1; 2, we have no way to compute its value for the composed computation fra. 1; 2/: This value coincides with the word form of the topmost node on the stack associated with 2, but in order to have access to it in the context of the ra rule, our feature model would need to also include the feature function s0:w.","The example just given raises the question whether there is a general criterion based on which we can de-cide if a given feature model is compatible with our tabulation. An attempt to provide such a criterion has been made by Huang and Sagae (2010), who define a constraint on feature models called “monotonicity” and claim that this constraint guarantees that feature values can be computed using their dynamic programming approach. Unfortunately, this claim is wrong. In particular, the feature model ̊0","given above is “monotonic”, but cannot be tabulated, neither in our nor in their framework. In general, it seems clear that the question of compatibility is a question about the relation between the tabulation and the feature model, and not about the feature model alone. To find practically useful characterizations of compatibility is an interesting avenue for future research."]},{"title":"5 Arc-Eager Model","paragraphs":["Up to now, we have only discussed the arc-standard model. In this section, we show that the framework of push computations also provides a tabulation of another widely-used model for dependency parsing, the arc-eager model (Nivre, 2003). 678 .; i j;̌ A/ ̀. ji; ;̌ A/ .sh/",". ji; j j;̌ A/ ̀.; j j;̌ A [ fj ! ig/ .lae/","only if i does not have an incoming arc",". ji; j j;̌ A/ ̀. jijj; ;̌ A [ fi ! j g/ .rae/ . ji; ;̌ A/ ̀.; ;̌ A/ . re/","only if i has an incoming arc Figure 6: Transitions in the arc-eager model. 5.1 Transition System The arc-eager model has three types of transitions, shown in Figure 6: Shift (sh) works just like in arc-standard, moving the first node in the buffer to the stack. Left-Arc (lae) creates a new arc with the first node in the buffer as the head and the topmost node on the stack as the dependent, and pops the stack. It can only be applied if the topmost node on the stack has not already been assigned a head, so as to preserve the single-head constraint. Right-Arc (rae) creates an arc in the opposite direction as Left-Arc, and moves the first node in the buffer to the stack. Finally, Reduce (re) simply pops the stack; it can only be applied if the topmost node on the stack has already been assigned a head.","Note that, unlike in the case of arc-standard, the parsing process in the arc-eager model is not bottomup: the right dependents of a node are attached before they have been assigned their own right dependents. 5.2 Shift-Reduce Parsing If we look at the specification of the transitions of the arc-standard and the arc-eager model and restrict our attention to the effect that they have on the stack and the buffer, then we can see that all seven transitions fall into one of three types: .; i j/̌ ̀. ji; /̌ sh; rae (T1) . ji jj; /̌ ̀. jj; /̌ la (T2) . ji; /̌ ̀.; /̌ ra; lae; re (T3) We refer to transitions of type T1 as shift and to transitions of type T2 and T3 as reduce transitions.","The crucial observation now is that the concept of push computations and the approach to their tabulation that we have taken for the arc-standard system can easily be generalized to other transition systems whose transitions are of the type shift or reduce. In particular, the proof of the correctness of our deduction system that we gave in Section 3 still goes through if instead of sh we write “shift” and instead of la and ra we write “reduce”. 5.3 Deduction System Generalizing our construction for the arc-standard model along these lines, we obtain a tabulation of the arc-eager model. Just like in the case of arc-standard, each single shift transition in that model (be it sh or rae) constitutes a push computation, while the reduce transitions induce operations flae and fre. The only difference is that the preconditions of lae and re must be met. Therefore, flae. 1; 2/ is only defined if the topmost node on the stack in the final configuration of 2 has not yet been assigned a head, and fre. 1; 2/ is only defined in the opposite case.","Item form. In our deduction system for the arc-eager model we use items of the form Œi; hb","; j , where 0 i h < j j wj, and b 2 f0; 1g. An item Œi; hb","; j has the same meaning as the corresponding item in our deduction system for arc-standard, but also keeps record of whether the node h has been assigned a head (b D 1) or not (b D 0).","Goal. The only goal item is Œ0; 00","; jwj. (The item Œ0; 01","; jwj asserts that the node 0 has a head, which never happens in a complete computation.)","Axioms. Reasoning as in arc-standard, the axioms of the deduction system for the arc-eager model are the items of the form Œi; i 0","; i C 1 and Œj; j 1","; j C 1, where j > 0: the former correspond to the push computations obtained from a single sh, the latter to those obtained from a single rae, which apart from shifting a node also assigns it a head.","Inference rules. Also analogously to arc-standard, if we know that there exists a push computation 1 of the form asserted by the item Œi; hb","; k, and a push computation 2 of the form asserted by Œk; g0","; j , where j < jwj, then we can build the push computation flae. 1; 2/ of the form asserted by the item Œi; hb","; j . Similarly, if","2 is of the form asserted by","Œk; g1 ; j , then we can build fre. 1; 2/, which again","is of the form by asserted Œi; hb","; j . Thus:","Œi; ib ; k Œk; k0","; j Œi; ib","; j .lae/ ,","Œi; ib ; k Œk; k1","; j Œi; ib","; j .re/ . 679","Item form: Œib","; j , 0 i < j j wj , b 2 f0; 1g Goal: Œ00","; jwj Axioms: Œ00","; 1 Œib","; j","Œj 0 ; j C 1 .sh/","Œib ; k Œk0","; j Œib","; j .laeI j ! k/ , j < jwj Œib","; j","Œj 1 ; j C 1 .raeI i ! j /","Œib ; k Œk1","; j Œib","; j .re/ Figure 7: Deduction system for the arc-eager model.","As mentioned above, the correctness and non-ambiguity of the system can be proved as in Section 3. Features can be added in the same way as discussed in Section 4. 5.4 Computational Complexity Looking at the inference rules, it is clear that an implementation of the deduction system for arc-eager takes space in O.jwj3","/ and time in O.jwj5","/, just like in the case of arc-standard. However, a closer inspec-tion reveals that we can give even tighter bounds.","In all derivable items Œi; hb","; j , it holds that i D h. This can easily be shown by induction: The property holds for the axioms, and the first two indexes of a consequent of a deduction rule coincide with the first two indexes of the left antecedent. Thus, if we use the notation Œi b","; k as a shorthand for Œi; i b","; k, then we can rewrite the inference rules for the arc-eager system as in Figure 7, where, additionally, we have added unary rules for sh and ra and restricted the set of axioms along the lines set out in Section 4.2. With this formulation, it is apparent that the space complexity of the generic implementation of the deduction system is in fact even in O.jwj2","/, and its time complexity is in O.jwj3","/."]},{"title":"6 Hybrid Model","paragraphs":["We now reverse the approach that we have taken in the previous sections: Instead of tabulating a transition system in order to get a dynamic-programming parser that simulates its computations, we start with a tabular parser and derive a transition system from it. In the new model, dependency trees are built bottom-up as in the arc-standard model, but the set of all computations in the system can be tabulated in space O.jwj2","/ and time O.jwj3","/, as in arc-eager. 6.1 Deduction System Gómez-Rodríguez et al. (2008) present a deductive version of the dependency parser of Yamada and Matsumoto (2003); their deduction system is given in Figure 8. The generic implementation of the deduction system takes space O.jwj2","/ and time O.jwj3","/.","In the original interpretation of the deduction system, an item Œi; j asserts the existence of a pair of (projective) dependency trees: the first tree rooted at token wi , having all nodes in the substring wi wk 1 as descendants, where i < k j ; and the second tree rooted at token wj , having all nodes in the substring wk wj as descendants. (Note that we use fencepost indexes, while Gómez-Rodríguez et al. (2008) indexes positions.) 6.2 Transition System In the context of our tabulation framework, we adopt a new interpretation of items: An item Œi; j has the same meaning as an item Œi; i; j in the tabulation of the arc-standard model; for every configurationc with .̌c/ D ǐ , it asserts the existence of a push computation that starts with c and ends with a configuration c0","for which .̌c0","/ D ǰ and .c 0","/ D .c/ ji .","If we interpret the inference rules of the system in terms of composition operations on push computations as usual, and also take the intended direction of the dependency arcs into account, then this induces a transition system with three transitions: .; i j;̌ A/ ̀. ji; ;̌ A/ .sh/ . ji; j j;̌ A/ ̀.; j j;̌ A [ fj ! i g/ .lah/ . ji jj; ;̌ A/ ̀. ji; ;̌ A [ fi ! j g/ .ra/ We call this transition system the hybrid model, as sh and ra are just like in arc-standard, while lah is like the Left-Arc transition in the arc-eager model (lae), except that it does not have the precondition. Like the arc-standard but unlike the arc-eager model, the hybrid model builds dependencies bottom-up."]},{"title":"7 Conclusion","paragraphs":["In this paper, we have provided a general technique for the tabulation of transition-based dependency parsers, and applied it to obtain dynamic programming algorithms for two widely-used parsing models, 680 Item form: Œi; j , 0 i < j j wj Goal: Œ0; jwj Axioms: Œ0; 1 Inference rules: Œi; j Œj; j C 1 .sh/ Œi; k Œk; j Œi; j .lahI j ! k/ , j < jwj Œi; k Œk; j Œi; j .raI i ! k/ Figure 8: Deduction system for the hybrid model. arc-standard and (for the first time) arc-eager. The basic idea behind our technique is the same as the one implemented by Huang and Sagae (2010) for the special case of the arc-standard model, but instead of their graph-structured stack representation we use a tabulation akin to Lang’s approach to the simulation of pushdown automata (Lang, 1974). This considerably simplifies both the presentation and the implementation of parsing algorithms. It has also enabled us to give simple proofs of correctness and establish relations between transition-based parsers and existing parsers based on dynamic programming.","While this paper has focused on the theoretical aspects and the analysis of dynamic programming versions of transition-based parsers, an obvious avenue for future work is the evaluation of the empirical performance and efficiency of these algorithms in connection with specific feature models. The feature models used in transition-based dependency parsing are typically very expressive, and exhaustive search with them quickly becomes impractical even for our cubic-time algorithms of the arc-eager and hybrid model. However, Huang and Sagae (2010) have provided evidence that the use of dynamic programming on top of a transition-based dependency parser can improve accuracy even without exhaustive search. The tradeoff between expressivity of the feature models on the one hand and the efficiency of the search on the other is a topic that we find worth investigating. Another interesting observation is that dynamic programming makes it possible to use predictive features, which cannot easily be integrated into a non-tabular transition-based parser. This could lead to the development of parsing models that cross the border between transition-based and tabular parsing."]},{"title":"Acknowledgments","paragraphs":["All authors contributed equally to the work presented in this paper. M. K. wrote most of the manuscript. C. G.-R. has been partially supported by Ministerio de Educación y Ciencia and FEDER (HUM2007-66607-C04) and Xunta de Galicia (PGIDIT07SIN005206PR, Rede Galega de Procesamento da Linguaxe e Recuperación de Información, Rede Galega de Lingüística de Corpus, Bolsas Estadías INCITE/FSE cofinanced)."]},{"title":"References","paragraphs":["Giuseppe Attardi. 2006. Experiments with a multilanguage non-projective dependency parser. In Proceedings of the Tenth Conference on Computational Natural Language Learning (CoNLL), pages 166–170, New York, USA.","Sylvie Billot and Bernard Lang. 1989. The structure of shared forests in ambiguous parsing. In Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics (ACL), pages 143–151, Vancouver, Canada.","Michael Collins. 1996. A new statistical parser based on bigram lexical dependencies. In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL), pages 184–191, Santa Cruz, CA, USA.","Jason Eisner and Giorgio Satta. 1999. Efficient parsing for bilexical context-free grammars and Head Automaton Grammars. In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics (ACL), pages 457–464, College Park, MD, USA.","Carlos Gómez-Rodríguez, John Carroll, and David J. Weir. 2008. A deductive approach to dependency parsing. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics (ACL): Human Language Technologies, pages 968–976, Columbus, OH, USA.","Joshua Goodman. 1999. Semiring parsing. Computational Linguistics, 25(4):573–605.","Liang Huang and Kenji Sagae. 2010. Dynamic programming for linear-time incremental parsing. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics (ACL), pages 1077–1086, Uppsala, Sweden.","Liang Huang, Wenbin Jiang, and Qun Liu. 2009. Bilingually-constrained (monolingual) shift-reduce parsing. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1222–1231, Singapore.","Bernard Lang. 1974. Deterministic techniques for efficient non-deterministic parsers. In Jacques Loecx, 681 editor, Automata, Languages and Programming, 2nd Colloquium, University of Saarbrücken, July 29–August 2, 1974, number 14 in Lecture Notes in Computer Science, pages 255–269. Springer.","Zhifei Li and Jason Eisner. 2009. First- and second-order expectation semirings with applications to minimumrisk training on translation forests. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 40–51, Singapore.","Joakim Nivre. 2003. An efficient algorithm for projective dependency parsing. In Proceedings of the Eighth International Workshop on Parsing Technologies (IWPT), pages 149–160, Nancy, France.","Joakim Nivre. 2004. Incrementality in deterministic dependency parsing. In Workshop on Incremental Parsing: Bringing Engineering and Cognition Together, pages 50–57, Barcelona, Spain.","Joakim Nivre. 2006. Inductive Dependency Parsing, volume 34 of Text, Speech and Language Technology. Springer.","Joakim Nivre. 2008. Algorithms for deterministic incremental dependency parsing. Computational Linguistics, 34(4):513–553.","Stuart M. Shieber, Yves Schabes, and Fernando Pereira. 1995. Principles and implementation of deductive parsing. Journal of Logic Programming, 24(1–2):3–36.","Masaru Tomita. 1986. Efficient Parsing for Natural Language: A Fast Algorithm for Practical Systems. Springer.","Hiroyasu Yamada and Yuji Matsumoto. 2003. Statistical dependency analysis with support vector machines. In Proceedings of the Eighth International Workshop on Parsing Technologies (IWPT), pages 195–206, Nancy, France.","Yue Zhang and Stephen Clark. 2008. A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing. In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 562—571, Honolulu, HI, USA. 682"]}],"references":[{"authors":[{"first":"Giuseppe","last":"Attardi"}],"year":"2006","title":"Experiments with a multilanguage non-projective dependency parser","source":"Giuseppe Attardi. 2006. Experiments with a multilanguage non-projective dependency parser. In Proceedings of the Tenth Conference on Computational Natural Language Learning (CoNLL), pages 166–170, New York, USA."},{"authors":[{"first":"Sylvie","last":"Billot"},{"first":"Bernard","last":"Lang"}],"year":"1989","title":"The structure of shared forests in ambiguous parsing","source":"Sylvie Billot and Bernard Lang. 1989. The structure of shared forests in ambiguous parsing. In Proceedings of the 27th Annual Meeting of the Association for Computational Linguistics (ACL), pages 143–151, Vancouver, Canada."},{"authors":[{"first":"Michael","last":"Collins"}],"year":"1996","title":"A new statistical parser based on bigram lexical dependencies","source":"Michael Collins. 1996. A new statistical parser based on bigram lexical dependencies. In Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics (ACL), pages 184–191, Santa Cruz, CA, USA."},{"authors":[{"first":"Jason","last":"Eisner"},{"first":"Giorgio","last":"Satta"}],"year":"1999","title":"Efficient parsing for bilexical context-free grammars and Head Automaton Grammars","source":"Jason Eisner and Giorgio Satta. 1999. Efficient parsing for bilexical context-free grammars and Head Automaton Grammars. In Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics (ACL), pages 457–464, College Park, MD, USA."},{"authors":[{"first":"Carlos","last":"Gómez-Rodríguez"},{"first":"John","last":"Carroll"},{"first":"David","middle":"J.","last":"Weir"}],"year":"2008","title":"A deductive approach to dependency parsing","source":"Carlos Gómez-Rodríguez, John Carroll, and David J. Weir. 2008. A deductive approach to dependency parsing. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics (ACL): Human Language Technologies, pages 968–976, Columbus, OH, USA."},{"authors":[{"first":"Joshua","last":"Goodman"}],"year":"1999","title":"Semiring parsing","source":"Joshua Goodman. 1999. Semiring parsing. Computational Linguistics, 25(4):573–605."},{"authors":[{"first":"Liang","last":"Huang"},{"first":"Kenji","last":"Sagae"}],"year":"2010","title":"Dynamic programming for linear-time incremental parsing","source":"Liang Huang and Kenji Sagae. 2010. Dynamic programming for linear-time incremental parsing. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics (ACL), pages 1077–1086, Uppsala, Sweden."},{"authors":[{"first":"Liang","last":"Huang"},{"first":"Wenbin","last":"Jiang"},{"first":"Qun","last":"Liu"}],"year":"2009","title":"Bilingually-constrained (monolingual) shift-reduce parsing","source":"Liang Huang, Wenbin Jiang, and Qun Liu. 2009. Bilingually-constrained (monolingual) shift-reduce parsing. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1222–1231, Singapore."},{"authors":[{"first":"Bernard","last":"Lang"}],"year":"1974","title":"Deterministic techniques for efficient non-deterministic parsers","source":"Bernard Lang. 1974. Deterministic techniques for efficient non-deterministic parsers. In Jacques Loecx, 681 editor, Automata, Languages and Programming, 2nd Colloquium, University of Saarbrücken, July 29–August 2, 1974, number 14 in Lecture Notes in Computer Science, pages 255–269. Springer."},{"authors":[{"first":"Zhifei","last":"Li"},{"first":"Jason","last":"Eisner"}],"year":"2009","title":"First- and second-order expectation semirings with applications to minimumrisk training on translation forests","source":"Zhifei Li and Jason Eisner. 2009. First- and second-order expectation semirings with applications to minimumrisk training on translation forests. In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 40–51, Singapore."},{"authors":[{"first":"Joakim","last":"Nivre"}],"year":"2003","title":"An efficient algorithm for projective dependency parsing","source":"Joakim Nivre. 2003. An efficient algorithm for projective dependency parsing. In Proceedings of the Eighth International Workshop on Parsing Technologies (IWPT), pages 149–160, Nancy, France."},{"authors":[{"first":"Joakim","last":"Nivre"}],"year":"2004","title":"Incrementality in deterministic dependency parsing","source":"Joakim Nivre. 2004. Incrementality in deterministic dependency parsing. In Workshop on Incremental Parsing: Bringing Engineering and Cognition Together, pages 50–57, Barcelona, Spain."},{"authors":[{"first":"Joakim","last":"Nivre"}],"year":"2006","title":"Inductive Dependency Parsing, volume 34 of Text, Speech and Language Technology","source":"Joakim Nivre. 2006. Inductive Dependency Parsing, volume 34 of Text, Speech and Language Technology. Springer."},{"authors":[{"first":"Joakim","last":"Nivre"}],"year":"2008","title":"Algorithms for deterministic incremental dependency parsing","source":"Joakim Nivre. 2008. Algorithms for deterministic incremental dependency parsing. Computational Linguistics, 34(4):513–553."},{"authors":[{"first":"Stuart","middle":"M.","last":"Shieber"},{"first":"Yves","last":"Schabes"},{"first":"Fernando","last":"Pereira"}],"year":"1995","title":"Principles and implementation of deductive parsing","source":"Stuart M. Shieber, Yves Schabes, and Fernando Pereira. 1995. Principles and implementation of deductive parsing. Journal of Logic Programming, 24(1–2):3–36."},{"authors":[{"first":"Masaru","last":"Tomita"}],"year":"1986","title":"Efficient Parsing for Natural Language: A Fast Algorithm for Practical Systems","source":"Masaru Tomita. 1986. Efficient Parsing for Natural Language: A Fast Algorithm for Practical Systems. Springer."},{"authors":[{"first":"Hiroyasu","last":"Yamada"},{"first":"Yuji","last":"Matsumoto"}],"year":"2003","title":"Statistical dependency analysis with support vector machines","source":"Hiroyasu Yamada and Yuji Matsumoto. 2003. Statistical dependency analysis with support vector machines. In Proceedings of the Eighth International Workshop on Parsing Technologies (IWPT), pages 195–206, Nancy, France."},{"authors":[{"first":"Yue","last":"Zhang"},{"first":"Stephen","last":"Clark"}],"year":"2008","title":"A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing","source":"Yue Zhang and Stephen Clark. 2008. A tale of two parsers: Investigating and combining graph-based and transition-based dependency parsing. In Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 562—571, Honolulu, HI, USA. 682"}],"cites":[{"style":0,"text":"Goodman, 1999","origin":{"pointer":"/sections/5/paragraphs/0","offset":615,"length":13},"authors":[{"last":"Goodman"}],"year":"1999","references":["/references/5"]},{"style":0,"text":"Li and Eisner, 2009","origin":{"pointer":"/sections/5/paragraphs/0","offset":630,"length":19},"authors":[{"last":"Li"},{"last":"Eisner"}],"year":"2009","references":["/references/9"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/5/paragraphs/1","offset":62,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Nivre, 2008","origin":{"pointer":"/sections/5/paragraphs/1","offset":168,"length":11},"authors":[{"last":"Nivre"}],"year":"2008","references":["/references/13"]},{"style":0,"text":"Lang, 1974","origin":{"pointer":"/sections/5/paragraphs/1","offset":257,"length":10},"authors":[{"last":"Lang"}],"year":"1974","references":["/references/8"]},{"style":0,"text":"Tomita, 1986","origin":{"pointer":"/sections/5/paragraphs/1","offset":269,"length":12},"authors":[{"last":"Tomita"}],"year":"1986","references":["/references/15"]},{"style":0,"text":"Billot and Lang, 1989","origin":{"pointer":"/sections/5/paragraphs/1","offset":283,"length":21},"authors":[{"last":"Billot"},{"last":"Lang"}],"year":"1989","references":["/references/1"]},{"style":0,"text":"Nivre, 2004","origin":{"pointer":"/sections/5/paragraphs/2","offset":206,"length":11},"authors":[{"last":"Nivre"}],"year":"2004","references":["/references/11"]},{"style":0,"text":"Huang and Sagae, 2010","origin":{"pointer":"/sections/5/paragraphs/2","offset":219,"length":21},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Nivre, 2003","origin":{"pointer":"/sections/5/paragraphs/2","offset":257,"length":11},"authors":[{"last":"Nivre"}],"year":"2003","references":["/references/10"]},{"style":0,"text":"Zhang and Clark, 2008","origin":{"pointer":"/sections/5/paragraphs/2","offset":270,"length":21},"authors":[{"last":"Zhang"},{"last":"Clark"}],"year":"2008","references":["/references/17"]},{"style":0,"text":"Gómez-Rodríguez et al. (2008)","origin":{"pointer":"/sections/5/paragraphs/2","offset":789,"length":29},"authors":[{"last":"Gómez-Rodríguez"},{"last":"al."}],"year":"2008","references":["/references/4"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/5/paragraphs/3","offset":53,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Tomita (1986)","origin":{"pointer":"/sections/5/paragraphs/3","offset":201,"length":13},"authors":[{"last":"Tomita"}],"year":"1986","references":["/references/15"]},{"style":0,"text":"Lang (1974)","origin":{"pointer":"/sections/5/paragraphs/3","offset":255,"length":11},"authors":[{"last":"Lang"}],"year":"1974","references":["/references/8"]},{"style":0,"text":"Nivre (2008)","origin":{"pointer":"/sections/6/paragraphs/0","offset":111,"length":12},"authors":[{"last":"Nivre"}],"year":"2008","references":["/references/13"]},{"style":0,"text":"Nivre, 2004","origin":{"pointer":"/sections/7/paragraphs/0","offset":246,"length":11},"authors":[{"last":"Nivre"}],"year":"2004","references":["/references/11"]},{"style":0,"text":"Attardi, 2006","origin":{"pointer":"/sections/7/paragraphs/0","offset":259,"length":13},"authors":[{"last":"Attardi"}],"year":"2006","references":["/references/0"]},{"style":0,"text":"Huang and Sagae, 2010","origin":{"pointer":"/sections/7/paragraphs/0","offset":274,"length":21},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Shieber et al. (1995)","origin":{"pointer":"/sections/7/paragraphs/5","offset":883,"length":21},"authors":[{"last":"Shieber"},{"last":"al."}],"year":"1995","references":["/references/14"]},{"style":0,"text":"Collins, 1996","origin":{"pointer":"/sections/7/paragraphs/20","offset":118,"length":13},"authors":[{"last":"Collins"}],"year":"1996","references":["/references/2"]},{"style":0,"text":"Gómez-Rodríguez et al., 2008","origin":{"pointer":"/sections/7/paragraphs/20","offset":133,"length":28},"authors":[{"last":"Gómez-Rodríguez"},{"last":"al."}],"year":"2008","references":["/references/4"]},{"style":0,"text":"Eisner and Satta (1999)","origin":{"pointer":"/sections/7/paragraphs/20","offset":302,"length":23},"authors":[{"last":"Eisner"},{"last":"Satta"}],"year":"1999","references":["/references/3"]},{"style":0,"text":"Zhang and Clark (2008)","origin":{"pointer":"/sections/8/paragraphs/0","offset":1000,"length":22},"authors":[{"last":"Zhang"},{"last":"Clark"}],"year":"2008","references":["/references/17"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/0","offset":1789,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Nivre, 2006","origin":{"pointer":"/sections/8/paragraphs/0","offset":1939,"length":11},"authors":[{"last":"Nivre"}],"year":"2006","references":["/references/12"]},{"style":0,"text":"Zhang and Clark, 2008","origin":{"pointer":"/sections/8/paragraphs/0","offset":1952,"length":21},"authors":[{"last":"Zhang"},{"last":"Clark"}],"year":"2008","references":["/references/17"]},{"style":0,"text":"Huang et al., 2009","origin":{"pointer":"/sections/8/paragraphs/0","offset":1975,"length":18},"authors":[{"last":"Huang"},{"last":"al."}],"year":"2009","references":["/references/7"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/3","offset":392,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/3","offset":1775,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/3","offset":2043,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/4","offset":41,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/8/paragraphs/7","offset":226,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Nivre, 2003","origin":{"pointer":"/sections/9/paragraphs/0","offset":224,"length":11},"authors":[{"last":"Nivre"}],"year":"2003","references":["/references/10"]},{"style":0,"text":"Gómez-Rodríguez et al. (2008)","origin":{"pointer":"/sections/10/paragraphs/2","offset":41,"length":29},"authors":[{"last":"Gómez-Rodríguez"},{"last":"al."}],"year":"2008","references":["/references/4"]},{"style":0,"text":"Yamada and Matsumoto (2003)","origin":{"pointer":"/sections/10/paragraphs/2","offset":127,"length":27},"authors":[{"last":"Yamada"},{"last":"Matsumoto"}],"year":"2003","references":["/references/16"]},{"style":0,"text":"Gómez-Rodríguez et al. (2008)","origin":{"pointer":"/sections/10/paragraphs/5","offset":386,"length":29},"authors":[{"last":"Gómez-Rodríguez"},{"last":"al."}],"year":"2008","references":["/references/4"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/11/paragraphs/0","offset":548,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]},{"style":0,"text":"Lang, 1974","origin":{"pointer":"/sections/11/paragraphs/0","offset":762,"length":10},"authors":[{"last":"Lang"}],"year":"1974","references":["/references/8"]},{"style":0,"text":"Huang and Sagae (2010)","origin":{"pointer":"/sections/11/paragraphs/1","offset":527,"length":22},"authors":[{"last":"Huang"},{"last":"Sagae"}],"year":"2010","references":["/references/6"]}]}
