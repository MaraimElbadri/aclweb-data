{"sections":[{"title":"","paragraphs":["Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 361–368, Sydney, July 2006. c⃝2006 Association for Computational Linguistics"]},{"title":"Graph Branch Algorithm: An Optimum Tree Search Method for Scored Dependency Graph with Arc Co-occurrence Constraints Hideki Hirakawa Toshiba R&D Center 1 Komukai Toshiba-cho, Saiwai-ku, Kawasaki 210, JAPAN hideki.hirakawa@toshiba.co.jp Abstract","paragraphs":["Various kinds of scored dependency graphs are proposed as packed shared data structures in combination with optimum dependency tree search algorithms. This paper classifies the scored dependency graphs and discusses the specific features of the “Dependency Forest” (DF) which is the packed shared data structure adopted in the “Preference Dependency Grammar” (PDG), and proposes the “Graph Branch Algorithm” for computing the optimum dependency tree from a DF. This paper also reports the experiment showing the computational amount and behavior of the graph branch algorithm."]},{"title":"1 Introduction","paragraphs":["The dependency graph (DG) is a packed shared data structure which consists of the nodes corresponding to the words in a sentence and the arcs showing dependency relations between the nodes. The scored DG has preference scores attached to the arcs and is widely used as a basis of the optimum tree search method. For example, the scored DG is used in Japanese Kakari-uke analysis1 to represent all possible kakari-uke(dependency) trees(Ozeki, 1994),(Hirakawa, 2001). (McDonald et al., 2005) proposed a dependency analysis method using a scored DG and some maximum spanning tree search algorithms. In this method, scores on arcs are computed from a set of features obtained from the dependency trees based on the","1","Kakari-uke relation, widely adopted in Japanese sentence analysis, is projective dependency relation with a constraint such that the dependent word is located at the left-hand side of its governor word. optimum parameters for scoring dependency arcs obtained by the discriminative learning method.","There are various kinds of dependency analysis methods based on the scored DGs. This paper classifies these methods based on the types of the DGs and the basic well-formed constraints and explains the features of the DF adopted in PDG(Hirakawa, 2006). This paper proposes the graph branch algorithm which searches the optimum dependency tree from a DF based on the branch and bound (B&B) method(Ibaraki, 1978) and reports the experiment showing the computational amount and behavior of the graph branch algorithm. As shown below, the combination of the DF and the graph branch algorithm enables the treatment of non-projective dependency analysis and optimum solution search satisfying the single valence occupation constraint, which are out of the scope of most of the DP(dynamic programming)- based parsing methods."]},{"title":"2 Optimum Tree Search in a Scored DG 2.1 Basic Framework","paragraphs":["Figure 1 shows the basic framework of the optimum dependency tree search in a scored DG. In general, nodes in a DG correspond to words in the sentence and the arcs show some kind of dependency relations between nodes. Each arc has   ","Scored Dependency Graph Dependency Tree Set of Scored Well-formed Dependency","Trees Well-formed dependency tree constraint Optimum Tree Search Algorithm Well-formed Dependency Tree with the highest score s1 s2 s3 s4 s5 (score=s1+s2+s3+s4+s5 )","Scored Dependency Graph Dependency Tree Set of Scored Well-formed Dependency","Trees Well-formed dependency tree constraint Optimum Tree Search Algorithm Well-formed Dependency Tree with the highest score s1 s2 s3 s4 s5 (score=s1+s2+s3+s4+s5 ) Figure 1: The optimum tree search in a scored DG 361 a preference score representing plausibility of the relation. The well-formed dependency tree constraint is a set of well-formed constraints which should be satisfied by all dependency trees representing sentence interpretations. A DG and a well-formed dependency tree constraint prescribe a set of well-formed dependency trees. The score of a dependency tree is the sum total of arc scores. The optimum tree is a dependency tree with the highest score in the set of dependency trees. 2.2 Dependency Graph DGs are classified into some classes based on the types of nodes and arcs. This paper assumes three types of nodes, i.e. word-type, WPP-type2","and concept-type3",". The types of DGs are called a word DG, a WPP DG and a concept DG, respectively. DGs are also classified into non-labeled and labeled DGs. There are some types of arc labels such as syntactic label (ex. “subject”,“object”) and semantic label (ex. “agent”,“target”). Various types of DGs are used in existing systems according to these classifications, such as non-label word DG(Lee and Choi, 1997; Eisner, 1996; McDonald et al., 2005)4",", syntactic-label word DG (Maruyama, 1990), semantic-label word DG(Hirakawa, 2001), non-label WPP DG(Ozeki, 1994; Katoh and Ehara, 1989), syntactic-label WPP DG(Wang and Harper, 2004), semantic-label concept DG(Harada and Mizuno, 2001).","2.3 Well-formedness Constraints and Graph Search Algorithms There can be a variety of well-formedness constraints from very basic and language-independent constraints to specific and language-dependent constraints. This paper focuses on the following four basic and language-independent constraints which may be embedded in data structure and/or the optimum tree search algorithm.","(C1) Coverage constraint: Every input word has a corresponding node in the tree","(C2) Single role constraint(SRC): No two nodes in a dependency tree occupy the same input position 2 WPP is a pair of a word and a part of speech (POS). The","word “time” has WPPs such as “time/n” and “time/v”. 3 One WPP (ex. “time/n”) can be categorized into one or","more concepts semantically (ex. “time/n/period time” and","“time/n/clock time”). 4 This does not mean that these algorithms can not handle","labeled DGs.","(C3) Projectivity constraint(PJC): No arc crosses another arc5","(C4) Single valence occupation constraint(SVOC): No two arcs in a tree occupy the same valence of a predicate (C1) and (C2), collectively referred to as “covering constraint”, are basic constraints adopted by almost all dependency parsers. (C3) is adopted by the majority of dependency parsers which are called projective dependency parsers. A projective dependency parser fails to analyze non-projective sentences. (C4) is a basic constraint for valency but is not adopted by the majority of dependency parsers.","Graph search algorithms, such as the Chu-Liu-Edmonds maximum spanning tree algorithm (Chu and Liu, 1965; Edmonds, 1967), algorithms based on the dynamic programming (DP) principle (Ozeki, 1994; Eisner, 1996) and the algorithm based on the B&B method (Hirakawa, 2001), are used for the optimum tree search in scored DGs. The applicability of these algorithms is closely related to the types of DGs and/or well-formedness constraints. The Chu-Liu-Edmonds algorithm is very fast (","","","","","for sentence length","), but it works correctly only on word DGs. DP-based algorithms can satisfy (C1)-(C3) and run efficiently, but seems not to satisfy (C4) as shown in 2.4.","(C2)-(C4) can be described as a set of co-occurrence constraints between two arcs in a DG. As described in Section 2.6, the DF can represent (C2)-(C4) and more precise constraints because it can handle co-occurrence constraints between two arbitrary arcs in a DG. The graph branch algorithm described in Section 3 can find the optimum tree from the DF. 2.4 SVOC and DP (Ozeki and Zhang, 1999) proposed the minimum cost partitioning method (MCPM) which is a partitioning computation based on the recurrence equa-tion where the cost of joining two partitions is the cost of these partitions plus the cost of combining these partitions. MCPM is a generalization of (Ozeki, 1994) and (Katoh and Ehara, 1989) which compute the optimum dependency tree in a scored DG. MCPM is also a generalization of the probabilistic CKY algorithm and the Viterbi algo-","5","Another condition for projectivity, i.e. “no arc covers top node” is equivalent to the crossing arc constraint if special root node , which is a governor of top node, is introduced at the top (or end) of a sentence. 362    agent1,15 Isha-mo (doctor) Wakaranai (not_know) Byouki-no (sickness) Kanja (patient) target2,10 agent3,5target4,7 in-state7,10 agent5,15target6,5 OS1[15]: (agent1,15) OS3[22]: (agent1,15) + (target4,7) OS2[10]: (in-state7,10) OS4[25]: (agent5,15) + (in-state7,10)NOS1[10]: (target2,10) NOS2[20]: (target4,10) + (in-state7,10)OS1[15]: (agent1,15) OS4[25]: (agent5,15) + (in-state7,10) Well-formed optimum solutions for covering whole phrase agent1,15 Isha-mo (doctor) Wakaranai (not_know) Byouki-no (sickness) Kanja (patient) target2,10 agent3,5target4,7 in-state7,10 agent5,15target6,5 OS1[15]: (agent1,15) OS3[22]: (agent1,15) + (target4,7) OS2[10]: (in-state7,10) OS4[25]: (agent5,15) + (in-state7,10)NOS1[10]: (target2,10) NOS2[20]: (target4,10) + (in-state7,10)OS1[15]: (agent1,15) OS4[25]: (agent5,15) + (in-state7,10) Well-formed optimum solutions for covering whole phrase","Figure 2: Optimum tree search satisfying SVOC","rithm6",". The minimum cost partition of the whole","sentence is calculated very efficiently by the DP","principle. The optimum partitioning obtained by","MCPM constitutes a tree covering the whole sen-","tence satisfying the SRC and PJC. However, it is","not assured that the SVOC is satisfied by MCPM.","Figure 2 shows a DG for the Japanese phrase","“Isha-mo Wakaranai Byouki-no Kanja” encom-","passing dependency trees corresponding to “a pa-","tient suffering from a disease that the doctor","doesn’t know”, “a sick patient who does not know","the doctor”, and so on.","","","-","","","represent the op-","timum solutions for the phrases specified by their","brackets computed based on MCPM. For exam-","ple,",""," gives an optimum tree with a score of","(consisting of","","","and","","","",") for the phrase","“Isha-mo Wakaranai Byouki-no”. The optimum","solution for the whole phrase is either","","","","","","","or","","","  ","","due to MCPM. The former has the","highest score","","","","but does not satisfy","the SVOC because it has","","","and","","","si-","multaneously. The optimum solutions satisfying","the SVOC are","","","","","","","","and","","","","","","","","shown at the bottom of Figure 2.","","","","and","","","","","are not optimum solutions for their word","coverages. This shows that it is not assured that","MCPM will obtain the optimum solution satisfy-","ing the SVOC.","On the contrary, it is assured that the graph","branch algorithm computes the optimum solu-","tion(s) satisfying the SVOC because it com-","putes the optimum solution(s) satisfying any co-","occurrence constraints in the constraint matrix. It","is an open problem whether an algorithm based","on the DP framework exists which can handle the","SVOC and arbitrary arc co-occurrence constraints.","6","Specifically, MTCM corresponds to probabilistic CKY","and the Viterbi algorithm because it computes both the opti-","mum tree score and its structure.     Constraint Matrix Dependency Graph Meaning of Arc Name sub : subject obj : object npp : noun-preposition vpp : verb-preposition pre : preposition nc : noun compound det : determiner rt : root    ","","       ","     npp19 det14 pre15vpp20 vpp18sub24 sub23obj4","nc2 obj16 0,time/n 1,fly/v 0,time/v 1,fly/n 2,like/p 2,like/v 3,an/det 4,arrow/n root rt29 rt32 rt31","","","","","","","","","    ","","","","","","","","","","","","","","","","","","",""," ","","","","","","  ","","","",""," ","","","","",""," ","","","","",""," ","","","","","","  ","","","","","","","","   ","","","","","","","",""," ","","","","","","","    ","","","","",""," ","","","","",""," ","","","","","","  ","",""," Constraint Matrix Dependency Graph Meaning of Arc Name sub : subject obj : object npp : noun-preposition vpp : verb-preposition pre : preposition nc : noun compound det : determiner rt : root    ","","       ","     npp19 det14 pre15vpp20 vpp18sub24 sub23obj4","nc2 obj16 0,time/n 1,fly/v 0,time/v 1,fly/n 2,like/p 2,like/v 3,an/det 4,arrow/n root rt29 rt32 rt31","","","","","","","","","    ","","","","","","","","","","","","","","","","","","",""," ","","","","","","  ","","","",""," ","","","","",""," ","","","","",""," ","","","","","","  ","","","","","","","","   ","","","","","","","",""," ","","","","","","","    ","","","","",""," ","","","","",""," ","","","","","","  ","",""," Meaning of Arc Name sub : subject obj : object npp : noun-preposition vpp : verb-preposition pre : preposition nc : noun compound det : determiner rt : root    ","","       ","     npp19 det14 pre15vpp20 vpp18sub24 sub23obj4","nc2 obj16 0,time/n 1,fly/v 0,time/v 1,fly/n 2,like/p 2,like/v 3,an/det 4,arrow/n root rt29 rt32 rt31","","","","","","","","","    ","","","","","","","","","","","","","","","","","","",""," ","","","","","","  ","","","",""," ","","","","",""," ","","","","",""," ","","","","","","  ","","","","","","","","   ","","","","","","","",""," ","","","","","","","    ","","","","",""," ","","","","",""," ","","","","","","  ","","","    ","","       ","     npp19 det14 pre15vpp20 vpp18sub24 sub23obj4","nc2 obj16 0,time/n 1,fly/v 0,time/v 1,fly/n 2,like/p 2,like/v 3,an/det 4,arrow/n root rt29 rt32 rt31    ","","       ","     npp19 det14 pre15vpp20 vpp18sub24 sub23obj4","nc2 obj16 0,time/n 1,fly/v 0,time/v 1,fly/n 2,like/p 2,like/v 3,an/det 4,arrow/n root rt29 rt32 rt31","","","","","","","","","    ","","","","","","","","","","","","","","","","","","",""," ","","","","","","  ","","","",""," ","","","","",""," ","","","","",""," ","","","","","","  ","","","","","","","","   ","","","","","","","",""," ","","","","","","","    ","","","","",""," ","","","","",""," ","","","","","","  ","",""," Figure 3: Scored dependency forest 2.5 Semantic Dependency Graph (SDG) The SDG is a semantic-label word DG designed for Japanese sentence analysis. The optimum tree search algorithm searches for the optimum tree satisfying the well-formed constraints (C1)-(C4) in a SDG(Hirakawa, 2001). This method is lack-ing in terms of generality in that it cannot handle backward dependency and multiple WPP because it depends on some linguistic features peculiar to Japanese. Therefore, this method is inherently in-applicable to languages like English that require backward dependency and multiple POS analysis.","The DF described below can be seen as the extension of the SDG. Since the DF has none of the language-dependent premises that the SDG has, it is applicable to English and other languages. 2.6 Dependency Forest (DF) The DF is a packed shared data structure encompassing all possible dependency trees for a sentence adopted in PDG. The DF consists of a dependency graph (DG) and a constraint matrix (CM). Figure 3 shows a DF for the example sentence “Time flies like an arrow.” The DG consists of nodes and directed arcs. A node represents a WPP and an arc shows the dependency relation between nodes. An arc has its ID and preference score. CM is a matrix whose rows and columns are a set of arcs in DG and prescribes the co-occurrence constraint between arcs. Only when CM(i,j) is !{,","","","and","","","are co-occurrable in one dependency tree.","The DF is generated by using a phrase structure parser in PDG. PDG grammar rule is an extended CFG rule, which defines the mapping between a sequence of constituents (the body of a CFG rule) and a set of arcs (a partial dependency tree). 363 The generated CM assures that the parse trees in the parse forest and the dependency trees in the DF have mutual correspondence(Hirakawa, 2006). CM can represent (C2)-(C4) in 2.3 and more precise constraints. For example, PDG can generate a DF encompassing non-projective dependency trees by introducing the grammar rules defining non-projective constructions. This is called the controlled non-projectivity in this paper. Treatment of non-projectivity as described in (Kanahe et al., 1998; Nivre and Nilsson, 2005) is an important topic out of the scope of this paper."]},{"title":"3 The Optimum Tree Search in DF","paragraphs":["This section shows the graph branch algorithm based on the B&B principle, which searches for the optimum well-formed tree in a DF by apply-ing problem expansions called graph branching. 3.1 Outline of B&B Method The B&B method(Ibaraki, 1978) is a principle for solving computationally hard problems such as NP-complete problems. The basic strategy is that the original problem is decomposed into easier partial-problems (branching) and the original problem is solved by solving them. Pruning called a bound operation is applied if it turns out that the optimum solution to a partial-problem is inferior to the solution obtained from some other partial-problem (dominance test)7",", or if it turns out that a partial-problem gives no optimum solutions to the original problem (maximum value test). Usually, the B&B algorithm is constructed to minimize the value of the solution. The graph branch algorithm in this paper is constructed to maximize the score of the solution because the best solution is the maximum tree in the DF. 3.2 Graph Branch Algorithm The graph branch algorithm is obtained by defining the components of the original B&B skeleton algorithm, i.e. the partial-problem, the feasible solution, the lower bound value, the upper bound value, the branch operation, and so on(Ibaraki, 1978). Figure 4 shows the graph branch algorithm which has been extended from the original B&B skeleton algorithm to search for all the optimum trees in a DF. The following sections explain the B&B components of the graph branch algorithm.","7","The dominance test is not used in the graph branch algorithmigure 4: Graph branch algorithm (1) Partial-problem","Partial-problem"," in the graph branch algo-","rithm is a problem searching for all the well-","formed optimum trees in a DF","","","consisting of","the dependency graph ","","and constraint matrix","","","",".","","consists of the following elements.","(a) Dependency graph","","","(b) Constraint matrix ","","(c) Feasible solution value","","(d) Upper bound value","","","(e) Inconsistent arc pair list","","","","The constraint matrix is common to all partial-","problems, so one","","is shared by all partial-","problems.","","","is represented by “","","","","","” which","shows a set of arcs to be removed from the whole","dependency graph"," . For example, “","","","","","","”","represents a partial dependency graph","","","","","in","the case","","","","","","","","","",".","","","","is a list of","inconsistent arc pairs. An inconsistent arc pair","is an arc pair which does not satisfy some co-","occurrence constraint. 364","(2) Algorithm for Obtaining Feasible Solution","and Lower Bound Value","In the graph branch algorithm, a well-formed","dependency tree in the dependency graph","","of","the partial-problem","is assigned as the feasible","solution"," of","8",". The score of the feasible solu-","tion","","is assigned as the lower bound value",".","The function for computing these values","","","","is","called a feasible solution/lower bound value func-","tion. The details are not shown due to space lim-","itations, but ","","","is realized by the backtrack-","based depth-first search algorithm with the opti-","mization based on the arc scores.","","","","assures","that the obtained solution satisfies the covering","constraint and the arc co-occurrence constraint.","The incumbent value","(the best score so far) is","replaced by the","at","","in Figure 4 if needed.","(3) Algorithm for Obtaining Upper Bound","Given a set of arcs","which is a subset of","",",","if the set of dependent nodes9","of arcs in","satisfies","the covering constraint, the arc set","is called the","well-covered arc set. The maximum well-covered","arc set is defined as a well-covered arc set with","the highest score. In general, the maximum well-","covered arc set does not satisfy the SRC and does","not form a tree. In the graph branch algorithm, the","score of the maximum well-covered arc set of a de-","pendency graph","is assigned as the upper bound","value","","of the partial-problem",". Upper bound","function","","","calculates","","by scanning the arc","lists sorted by the surface position of the depen-","dent nodes of the arcs. (4) Branch Operation","Figure 5 shows a branch operation called a graph branch operation. Child partial-problems of ","are constructed as follows:","(a) Search for an inconsistent arc pair","","","","","","","","","in the maximum well-covered arc set of the","DG of",".","(b) Create child partial-problems","",",","","which","have new DGs","","","  ","","","","","","","and","","","","","","","","","","",""," respectively.","Since a solution to","cannot have both","","","and","","  simultaneously due to the co-occurrence con-","straint, the optimum solution of","is obtained","from either/both","","or/and","",". The child partial-8 A feasible solution may not be optimum but is a possible","interpretation of a sentence. Therefore, it can be used as an","approximate output when the search process is aborted. 9 The dependent node of an arc is the node located at the","source of the arc.   ","DG: Dependency graph of parent problem arcj arci DGj: Dependency graph for child problem Pj arcj DGi: Dependency graph for child problem Pi arci Remove arcj Remove arci","DG: Dependency graph of parent problem arcj arci arcj arci DGj: Dependency graph for child problem Pj arcjarcj DGi: Dependency graph for child problem Pi arciarci Remove arcj Remove arci Figure 5: Graph branching","problem is easier than the parent partial-problem","because the size of the DG of the child partial-","problem is less than that of its parent.","In Figure 4, ","","computes the list of incon-","sistent arc pairs  ","(Inconsistent Arc Pair List)","for the maximum well-covered arc set of","",". Then","the graph branch function","","","","","selects","one inconsistent arc pair","","","","","","","","","from","","","for branch operation. The selection criteria for","","","","","","","","","","affects the efficiency of the algorithm.","","","",""," selects the inconsistent arc pair","containing the highest score arc in","","","(Branch","Arc Candidates List).","","","","","calculates","the upper bound value for a child partial-problem","by","","","and sets it to the child partial-problem. (5) Selection of Partial-problem","","","","","","employs the best bound search strategy, i.e. it selects the partial-problem which has the maximum bound value among the active partial-problems. It is known that the number of partial-problems decomposed during computation is minimized by this strategy in the case that no dominance tests are applied (Ibaraki, 1978).","(6) Computing All Optimum Solutions","In order to obtain all optimum solutions, partial-","problems whose upper bound values are equal to","the score of the optimum solution(s) are expanded","at"," in Figure 4. In the case that at least one","inconsistent arc pair remains in a partial-problem","(i.e.   ","","","), graph branch is performed","based on the inconsistent arc pair. Otherwise,","the obtained optimum solution","","is checked if","one of the arcs in","","has an equal rival arc by","","  ","","","","","function. The equal ri-","val arc of arc","is an arc whose position and score","are equal to those of arc",". If an equal rival arc","of an arc in","","exists, a new partial-problem is","generated by removing the arc in","",".","","assures","that no partial-problem has an upper bound valueigure 6: Search diagram greater than or equal to the score of the optimum solutions when the computation stopped."]},{"title":"4 Example of Optimum Tree Search","paragraphs":["This section shows an example of the graph branch algorithm execution using the DF in Fig.3. 4.1 Example of Graph Branch Algorithm","The search process of the B&B method can be","shown as a search diagram constructing a partial-","problem tree representing the parent-child relation","between the partial-problems. Figure 6 is a search","diagram for the example DF showing the search","process of the graph branch algorithm.","In this figure, box","","is a partial-problem with","its dependency graph","",", upper bound value","","",", feasible solution and lower bound value","and inconsistent arc pair list","","",". Suffix","of","","indicates the generation order of partial-problems.","Updating of global variable","(incumbent value)","and","(set of incumbent solutions) is shown un-","der the box. The value of the left-hand side of the","arrow is updated to that of right-hand side of the","arrow during the partial-problem processing. De-","tails of the behavior of the algorithm in Figure 4","are described below.","In","","","","","",",",",","and","are set to","","",",","and ","","","respectively. The DG of","","is","that of the example DF. This is represented by","","",""," . ","","sets the upper bound value","(=63) of  to","",". In practice, this is calcu-","lated by obtaining the maximum well-covered arc","set of","",". In","","","","",",","","","","","selects","","","and","  ","","","","","is executed. The feasible so-","lution"," and its score","are calculated to set","","","","   ","","","","","",",","","","(","","in the","search diagram)."," ","","","","","","updates","and to new values. Then,","","","","","","","","computes the inconsistent arc pair","list","","","","","","","  ","","","","","","","","","","from the","maximum well-covered arc set","","","","","","","","","and set it to","","",". ","","","","","","","compares the upper bound value","","and the fea-","sible solution value . In this case,","","","","holds, so","","","is assigned the value of","","",".","The next step","","","","","","","executes the","","","","","","function.","","","","","selects","the arc pair with the highest arc score and performs","the graph branch operation with the selected arc","pair. The following is a","","","shown with the","arc names and arc scores.","","","","","","","","   ","","","","","","","","","","","","","","","   ","","","","","","","","","Scores are shown in","",". The arc pair contain-","ing the highest arc score is","","","and","","","containing"," . Here,","","","is selected and","partial-problems    ","","and","","","","","","are","generated.","","is removed from","and the new","two partial-problems are added to","resulting in","","","","","","","","","",". Then, based on the best bound","search strategy,","  ","","is tried again.","","","updates","and","because","","obtained a","feasible solution better than that in","obtained","by","",".","","and  are terminated because they","have no feasible solution.","","generates a feasi-","ble solution but and","are not updated. This","is because the obtained feasible solution is infe-","rior to the incumbent solution in",". The optimum","solution(=","","","  ","","","","","","",") is obtained by","",".","The computation from","","to","","is required to as-","sure that the feasible solution of","","is optimum."]},{"title":"5 Experiment","paragraphs":["This section describes some experimental results showing the computational amount of the graph branch algorithm. 5.1 Environment and Performance Metric An existing sentence analysis system10","(called the oracle system) is used as a generator of the test corpus, the preference knowledge source and the correct answers. Experiment data of 125,320 sentences11","extracted from English technical docu-","10","A real-world rule-based machine translation system with a long development history","11","Sentences ending with a period and parsable by the oracle system. 366 ments is divided into open data (8605 sentences) and closed data (116,715 sentences). The preference score source, i.e. the WPP frequencies and the dependency relation frequencies are obtained from the closed data. The basic PDG grammar (907 extended CFG rules) is used for generating the DFs for the open data.","The expanded problem number (EPN), a principal computational amount factor of the B&B method, is adopted as the base metric. The following three metrics are used in this experiment.","(a) EPN in total (EPN-T): The number of the expanded problems which are generated in the entire search process.","(b) EPN for the first optimum solution (EPN-F): The number of the expanded problems when the first optimum solution is obtained.","(c) EPN for the last optimum solution (EPN-L): The number of the expanded problems when the last optimum solution is obtained. At this point, all optimum solutions are obtained. Optimum solution number (OSN) for a problem, i.e. the number of optimum dependency trees in a given DF, gives the lower bound value for all these metrics because one problem generates at most one solution. The minimum value of OSN is 1 because every DF has at least one dependency tree. As the search process proceeds, the algorithm finds the first optimum solution, then the last optimum solution, and finally terminates the process by confirming no better solution is left. There-fore, the three metrics and OSN have the relation OSN","EPN-F","EPN-L","EPN-T. Average values for these are described as Ave:OSN, Ave:EPN-F, Ave:EPN-L and Ave:EPN-T. 5.2 Experimental Results An evaluation experiment for the open data is performed using a prototype PDG system implemented in Prolog. The sentences containing more than 22 words are neglected due to the limita-tion of Prolog system resources in the parsing process. 4334 sentences out of the remaining 6882 test sentences are parsable. Unparsable sentences (2584 sentences) are simply neglected in this experiment. The arc precision ratio12","of the oracle","12","Correct arc ratio with respect to arcs in the output dependency trees (Hirakawa, 2005).          ","","","","","","","","","","","","","","","  ","","","","","","","","","","","","","","","        ","","","","     ","","","","","                                  ","","       ",""," Figure 7: EPN-T, EPN-F EPN-F and OSN system for 136 sentences in this sentence set is 97.2% with respect to human analysis results.","All optimum trees are computed by the graph branch algorithm described in Section 3.2. Figure 7 shows averages of EPN-T, EPN-L, EPN-F and OSN with respect to sentence length. Over-all averages of EPN-T, EPN-L, EPN-F and OSN for the test sentences are 3.0, 1.67, 1.43 and 1.15. The result shows that the average number of problems required is relatively small. The gap between Ave:EPN-T and Ave:EPN-L (3.0-1.67=1.33) is much greater than the gap between Ave:EPN-L and Ave:OSN(1.67-1.15=0.52). This means that the major part of the computation is performed only for checking if the obtained feasible solutions are optimum or not.","According to (Hirakawa, 2001), the experiment on the B&B-based algorithm for the SDG shows the overall averages of AVE:EPN-T, AVE:EPN-F are 2.91, 1.33 and the average CPU time is 305.8ms (on EWS). These values are close to those in the experiment based on the graph branch algorithm. Two experiments show a tendency for the optimum solution to be obtained in the early stage of the search process. The graph branch algorithm is expected to obtain the comparable performance with the SDG search algorithm.","(Hirakawa, 2001) introduced the improved upper bound function g’(P) into the B&B-based algorithm for the SDG and found Ave:EPN-T is reduced from 2.91 to 1.82. The same technique is introduced to the graph branch algorithm and has obtained the reduction of the Ave:EPN-T from 3.00 to 2.68.","The tendency for the optimum solution to be obtained in the early stage of the search process suggests that limiting the number of problems to expand is an effective pruning strategy. Figure 8 shows the ratios of the sentences obtaining the whole problem expansion, the first optimum solu-367                    ","","","","","","","","  ","","","","","","","","  ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""," Figure 8: ARs for EPS-F, EPS-A, EPS-T tion and the last optimum solution to whole sentences with respect to the EPNs. This kind of ratio is called an achievement ratio (AR) in this paper. From Figure 8, the ARs for EPN-T, EPN-L, EPN-F (plotted in solid lines) are 97.1%,99.6%,99.8% respectively at the EPN 10. The dotted line shows the AR for EPN-T of the improved algorithm using g’(P). The use of g’(P) increases the AR for EPN-T from 97.1% to 99.1% at the EPN 10. However, the effect of g’(P) is quite small for EPN-F and EPN-L. This result shows that the pruning strategy based on the EPN is effective and g’(P) works for the reduction of the problems generated in the posterior part of the search processes."]},{"title":"6 Concluding Remarks","paragraphs":["This paper has described the graph branch algorithm for obtaining the optimum solution for a DF used in PDG. The well-formedness dependency tree constraints are represented by the constraint matrix of the DF, which has flexible and precise description ability so that controlled non-projectivity is available in PDG framework. The graph branch algorithm assures the search for the optimum trees with arbitrary arc co-occurrence constraints, including the SVOC which has not been treated in DP-based algorithms so far. The experimental result shows the averages of EPN-T, EPN-L and EPN-F for English test sentences are 3.0, 1.67 and 1.43, respectively. The practical code implementation of the graph branch algorithm and its performance evaluation are subjects for future work."]},{"title":"References","paragraphs":["Y. J. Chu and T. H. Liu. 1965. On the shortest arborescence of a directed graph. Science Sinica, 14.","J. Edmonds. 1967. Optimum branchings. Journal of Research of the National Bureau of Standards, 71B:233–240.","J. Eisner. 1996. Three new probabilistic models for dependency parsing: An exploration. In Proceedings of COLING’96, pages 340–345.","M. Harada and T. Mizuno. 2001. Japanese semantic analysis system sage using edr (in japanese). Transactions of JSAI, 16(1):85–93.","H. Hirakawa. 2001. Semantic dependency analysis method for japanese based on optimum tree search algorithm. In Proceedings of the PACLING2001.","H. Hirakawa. 2005. Evaluation measures for natural language analyser based on preference dependency grammar. In Proceedings of the PACLING2005.","H. Hirakawa. 2006. Preference dependency grammar and its packed shared data structure ’dependency forest’ (in japanese). To appear in Natural Language Processing, 13(3).","T. Ibaraki. 1978. Branch-and-bounding procedure and state-space representation of combinatorial optimization problems. Information and Control, 36,1-27.","S. Kanahe, A. Nasr, and O. Rambow. 1998. Pseudo-projectivity: A polynomially parsable non-projective dependency grammar. In COLING-ACL’98, pages 646–52.","N. Katoh and T. Ehara. 1989. A fast algorithm for dependency structure analysis (in japanese). In Proceedings of 39th Annual Convention of the Information Processing Society.","S. Lee and K. S. Choi. 1997. Reestimation and best-first parsing algorithm for probablistic dependency grammars. In Proceedings of the Fifth Workshop on Very Large Corpora, pages 41–55.","H. Maruyama. 1990. Constraint dependency grammar and its weak generative capacity. Computer Software.","R. McDonald, F. Pereira, K. Ribarov, and J. Hajic. 2005. Non-projective dependency parsing using spanning tree algorithms. In Proceedings of HLT-EMNLP, pages 523–530.","J. Nivre and J. Nilsson. 2005. Pseudo-projective dependency parsing. In ACL-05, pages 99–106.","K. Ozeki and Y. Zhang. 1999. :G>.%3%9%HJ,3dLdBj $H$7$F$N78$j<u$12r@O. In Proceeding of the Workshop of The Fifth Annual Meeting of The Association for Natural Language Processing, pages 9–14.","K. Ozeki. 1994. Dependency structure analysis as combinatorial optimization. Information Sciences, 78(1-2):77–99.","W. Wang and M. P. Harper. 2004. A statistical constraint dependency grammar (cdg) parser. In Workshop on Incremental Parsing: Bringing Engineering and Cognition Together (ACL), pages 42–49. 368"]}],"references":[{"authors":[{"first":"Y.","middle":"J.","last":"Chu"},{"first":"T.","middle":"H.","last":"Liu"}],"year":"1965","title":"On the shortest arborescence of a directed graph","source":"Y. J. Chu and T. H. Liu. 1965. On the shortest arborescence of a directed graph. Science Sinica, 14."},{"authors":[{"first":"J.","last":"Edmonds"}],"year":"1967","title":"Optimum branchings","source":"J. Edmonds. 1967. Optimum branchings. Journal of Research of the National Bureau of Standards, 71B:233–240."},{"authors":[{"first":"J.","last":"Eisner"}],"year":"1996","title":"Three new probabilistic models for dependency parsing: An exploration","source":"J. Eisner. 1996. Three new probabilistic models for dependency parsing: An exploration. In Proceedings of COLING’96, pages 340–345."},{"authors":[{"first":"M.","last":"Harada"},{"first":"T.","last":"Mizuno"}],"year":"2001","title":"Japanese semantic analysis system sage using edr (in japanese)","source":"M. Harada and T. Mizuno. 2001. Japanese semantic analysis system sage using edr (in japanese). Transactions of JSAI, 16(1):85–93."},{"authors":[{"first":"H.","last":"Hirakawa"}],"year":"2001","title":"Semantic dependency analysis method for japanese based on optimum tree search algorithm","source":"H. Hirakawa. 2001. Semantic dependency analysis method for japanese based on optimum tree search algorithm. In Proceedings of the PACLING2001."},{"authors":[{"first":"H.","last":"Hirakawa"}],"year":"2005","title":"Evaluation measures for natural language analyser based on preference dependency grammar","source":"H. Hirakawa. 2005. Evaluation measures for natural language analyser based on preference dependency grammar. In Proceedings of the PACLING2005."},{"authors":[{"first":"H.","last":"Hirakawa"}],"year":"2006","title":"Preference dependency grammar and its packed shared data structure ’dependency forest’ (in japanese)","source":"H. Hirakawa. 2006. Preference dependency grammar and its packed shared data structure ’dependency forest’ (in japanese). To appear in Natural Language Processing, 13(3)."},{"authors":[{"first":"T.","last":"Ibaraki"}],"year":"1978","title":"Branch-and-bounding procedure and state-space representation of combinatorial optimization problems","source":"T. Ibaraki. 1978. Branch-and-bounding procedure and state-space representation of combinatorial optimization problems. Information and Control, 36,1-27."},{"authors":[{"first":"S.","last":"Kanahe"},{"first":"A.","last":"Nasr"},{"first":"O.","last":"Rambow"}],"year":"1998","title":"Pseudo-projectivity: A polynomially parsable non-projective dependency grammar","source":"S. Kanahe, A. Nasr, and O. Rambow. 1998. Pseudo-projectivity: A polynomially parsable non-projective dependency grammar. In COLING-ACL’98, pages 646–52."},{"authors":[{"first":"N.","last":"Katoh"},{"first":"T.","last":"Ehara"}],"year":"1989","title":"A fast algorithm for dependency structure analysis (in japanese)","source":"N. Katoh and T. Ehara. 1989. A fast algorithm for dependency structure analysis (in japanese). In Proceedings of 39th Annual Convention of the Information Processing Society."},{"authors":[{"first":"S.","last":"Lee"},{"first":"K.","middle":"S.","last":"Choi"}],"year":"1997","title":"Reestimation and best-first parsing algorithm for probablistic dependency grammars","source":"S. Lee and K. S. Choi. 1997. Reestimation and best-first parsing algorithm for probablistic dependency grammars. In Proceedings of the Fifth Workshop on Very Large Corpora, pages 41–55."},{"authors":[{"first":"H.","last":"Maruyama"}],"year":"1990","title":"Constraint dependency grammar and its weak generative capacity","source":"H. Maruyama. 1990. Constraint dependency grammar and its weak generative capacity. Computer Software."},{"authors":[{"first":"R.","last":"McDonald"},{"first":"F.","last":"Pereira"},{"first":"K.","last":"Ribarov"},{"first":"J.","last":"Hajic"}],"year":"2005","title":"Non-projective dependency parsing using spanning tree algorithms","source":"R. McDonald, F. Pereira, K. Ribarov, and J. Hajic. 2005. Non-projective dependency parsing using spanning tree algorithms. In Proceedings of HLT-EMNLP, pages 523–530."},{"authors":[{"first":"J.","last":"Nivre"},{"first":"J.","last":"Nilsson"}],"year":"2005","title":"Pseudo-projective dependency parsing","source":"J. Nivre and J. Nilsson. 2005. Pseudo-projective dependency parsing. In ACL-05, pages 99–106."},{"authors":[{"first":"K.","last":"Ozeki"},{"first":"Y.","last":"Zhang"}],"year":"1999","title":":G>","source":"K. Ozeki and Y. Zhang. 1999. :G>.%3%9%HJ,3dLdBj $H$7$F$N78$j<u$12r@O. In Proceeding of the Workshop of The Fifth Annual Meeting of The Association for Natural Language Processing, pages 9–14."},{"authors":[{"first":"K.","last":"Ozeki"}],"year":"1994","title":"Dependency structure analysis as combinatorial optimization","source":"K. Ozeki. 1994. Dependency structure analysis as combinatorial optimization. Information Sciences, 78(1-2):77–99."},{"authors":[{"first":"W.","last":"Wang"},{"first":"M.","middle":"P.","last":"Harper"}],"year":"2004","title":"A statistical constraint dependency grammar (cdg) parser","source":"W. Wang and M. P. Harper. 2004. A statistical constraint dependency grammar (cdg) parser. In Workshop on Incremental Parsing: Bringing Engineering and Cognition Together (ACL), pages 42–49. 368"}],"cites":[{"style":0,"text":"Ozeki, 1994","origin":{"pointer":"/sections/2/paragraphs/0","offset":435,"length":11},"authors":[{"last":"Ozeki"}],"year":"1994","references":["/references/15"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/2/paragraphs/0","offset":449,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]},{"style":0,"text":"McDonald et al., 2005","origin":{"pointer":"/sections/2/paragraphs/0","offset":467,"length":21},"authors":[{"last":"McDonald"},{"last":"al."}],"year":"2005","references":["/references/12"]},{"style":0,"text":"Hirakawa, 2006","origin":{"pointer":"/sections/2/paragraphs/3","offset":235,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2006","references":["/references/6"]},{"style":0,"text":"Ibaraki, 1978","origin":{"pointer":"/sections/2/paragraphs/3","offset":395,"length":13},"authors":[{"last":"Ibaraki"}],"year":"1978","references":["/references/7"]},{"style":0,"text":"Lee and Choi, 1997","origin":{"pointer":"/sections/3/paragraphs/6","offset":379,"length":18},"authors":[{"last":"Lee"},{"last":"Choi"}],"year":"1997","references":["/references/10"]},{"style":0,"text":"Eisner, 1996","origin":{"pointer":"/sections/3/paragraphs/6","offset":399,"length":12},"authors":[{"last":"Eisner"}],"year":"1996","references":["/references/2"]},{"style":0,"text":"McDonald et al., 2005","origin":{"pointer":"/sections/3/paragraphs/6","offset":413,"length":21},"authors":[{"last":"McDonald"},{"last":"al."}],"year":"2005","references":["/references/12"]},{"style":0,"text":"Maruyama, 1990","origin":{"pointer":"/sections/3/paragraphs/7","offset":27,"length":14},"authors":[{"last":"Maruyama"}],"year":"1990","references":["/references/11"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/3/paragraphs/7","offset":67,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]},{"style":0,"text":"Ozeki, 1994","origin":{"pointer":"/sections/3/paragraphs/7","offset":101,"length":11},"authors":[{"last":"Ozeki"}],"year":"1994","references":["/references/15"]},{"style":0,"text":"Katoh and Ehara, 1989","origin":{"pointer":"/sections/3/paragraphs/7","offset":114,"length":21},"authors":[{"last":"Katoh"},{"last":"Ehara"}],"year":"1989","references":["/references/9"]},{"style":0,"text":"Wang and Harper, 2004","origin":{"pointer":"/sections/3/paragraphs/7","offset":161,"length":21},"authors":[{"last":"Wang"},{"last":"Harper"}],"year":"2004","references":["/references/16"]},{"style":0,"text":"Harada and Mizuno, 2001","origin":{"pointer":"/sections/3/paragraphs/7","offset":211,"length":23},"authors":[{"last":"Harada"},{"last":"Mizuno"}],"year":"2001","references":["/references/3"]},{"style":0,"text":"Chu and Liu, 1965","origin":{"pointer":"/sections/3/paragraphs/17","offset":86,"length":17},"authors":[{"last":"Chu"},{"last":"Liu"}],"year":"1965","references":["/references/0"]},{"style":0,"text":"Edmonds, 1967","origin":{"pointer":"/sections/3/paragraphs/17","offset":105,"length":13},"authors":[{"last":"Edmonds"}],"year":"1967","references":["/references/1"]},{"style":0,"text":"Ozeki, 1994","origin":{"pointer":"/sections/3/paragraphs/17","offset":181,"length":11},"authors":[{"last":"Ozeki"}],"year":"1994","references":["/references/15"]},{"style":0,"text":"Eisner, 1996","origin":{"pointer":"/sections/3/paragraphs/17","offset":194,"length":12},"authors":[{"last":"Eisner"}],"year":"1996","references":["/references/2"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/3/paragraphs/17","offset":251,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]},{"style":0,"text":"Ozeki and Zhang, 1999","origin":{"pointer":"/sections/3/paragraphs/24","offset":370,"length":21},"authors":[{"last":"Ozeki"},{"last":"Zhang"}],"year":"1999","references":["/references/14"]},{"style":0,"text":"Ozeki, 1994","origin":{"pointer":"/sections/3/paragraphs/24","offset":663,"length":11},"authors":[{"last":"Ozeki"}],"year":"1994","references":["/references/15"]},{"style":0,"text":"Katoh and Ehara, 1989","origin":{"pointer":"/sections/3/paragraphs/24","offset":681,"length":21},"authors":[{"last":"Katoh"},{"last":"Ehara"}],"year":"1989","references":["/references/9"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/3/paragraphs/559","offset":271,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]},{"style":0,"text":"Hirakawa, 2006","origin":{"pointer":"/sections/3/paragraphs/567","offset":370,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2006","references":["/references/6"]},{"style":0,"text":"Kanahe et al., 1998","origin":{"pointer":"/sections/3/paragraphs/567","offset":712,"length":19},"authors":[{"last":"Kanahe"},{"last":"al."}],"year":"1998","references":["/references/8"]},{"style":0,"text":"Nivre and Nilsson, 2005","origin":{"pointer":"/sections/3/paragraphs/567","offset":733,"length":23},"authors":[{"last":"Nivre"},{"last":"Nilsson"}],"year":"2005","references":["/references/13"]},{"style":0,"text":"Ibaraki, 1978","origin":{"pointer":"/sections/4/paragraphs/0","offset":227,"length":13},"authors":[{"last":"Ibaraki"}],"year":"1978","references":["/references/7"]},{"style":0,"text":"Ibaraki, 1978","origin":{"pointer":"/sections/4/paragraphs/1","offset":609,"length":13},"authors":[{"last":"Ibaraki"}],"year":"1978","references":["/references/7"]},{"style":0,"text":"Ibaraki, 1978","origin":{"pointer":"/sections/4/paragraphs/1508","offset":302,"length":13},"authors":[{"last":"Ibaraki"}],"year":"1978","references":["/references/7"]},{"style":0,"text":"Hirakawa, 2005","origin":{"pointer":"/sections/6/paragraphs/16","offset":71,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2005","references":["/references/5"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/6/paragraphs/61","offset":14,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]},{"style":0,"text":"Hirakawa, 2001","origin":{"pointer":"/sections/6/paragraphs/62","offset":1,"length":14},"authors":[{"last":"Hirakawa"}],"year":"2001","references":["/references/4"]}]}
