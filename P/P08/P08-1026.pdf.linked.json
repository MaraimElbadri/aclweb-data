{"sections":[{"title":"","paragraphs":["Proceedings of ACL-08: HLT, pages 218–226, Columbus, Ohio, USA, June 2008. c⃝2008 Association for Computational Linguistics"]},{"title":"Regular tree grammars as a formalism for scope underspecification Alexander Koller","paragraphs":["∗"]},{"title":"a.koller@ed.ac.uk","paragraphs":["∗"]},{"title":"University of Edinburgh Michaela Regneri","paragraphs":["† §"]},{"title":"regneri@coli.uni-sb.de","paragraphs":["†"]},{"title":"University of Groningen Stefan Thater","paragraphs":["§"]},{"title":"stth@coli.uni-sb.de","paragraphs":["§"]},{"title":"Saarland University Abstract","paragraphs":["We propose the use of regular tree grammars (RTGs) as a formalism for the underspecified processing of scope ambiguities. By applying standard results on RTGs, we obtain a novel algorithm for eliminating equivalent readings and the first efficient algorithm for computing the best reading of a scope ambiguity. We also show how to derive RTGs from more traditional underspecified descriptions."]},{"title":"1 Introduction","paragraphs":["Underspecification (Reyle, 1993; Copestake et al., 2005; Bos, 1996; Egg et al., 2001) has become the standard approach to dealing with scope ambiguity in large-scale hand-written grammars (see e.g. Copestake and Flickinger (2000)). The key idea behind underspecification is that the parser avoids computing all scope readings. Instead, it computes a single compact underspecified description for each parse. One can then strengthen the underspecified description to efficiently eliminate subsets of readings that were not intended in the given context (Koller and Niehren, 2000; Koller and Thater, 2006); so when the individual readings are eventually computed, the number of remaining readings is much smaller and much closer to the actual perceived ambiguity of the sentence.","In the past few years, a “standard model” of scope underspecification has emerged: A range of formalisms from Underspecified DRT (Reyle, 1993) to dominance graphs (Althaus et al., 2003) have offered mechanisms to specify the “semantic material” of which the semantic representations are built up, plus dominance or outscoping relations between these building blocks. This has been a very successful approach, but recent algorithms for eliminating subsets of readings have pushed the expressive power of these formalisms to their limits; for instance, Koller and Thater (2006) speculate that further improvements over their (incomplete) redundancy elimination algorithm require a more expressive formalism than dominance graphs. On the theoretical side, Ebert (2005) has shown that none of the major underspecification formalisms are expressively complete, i.e. supports the description of an arbitrary subset of readings. Furthermore, the some-what implicit nature of dominance-based descriptions makes it difficult to systematically associate readings with probabilities or costs and then compute a best reading.","In this paper, we address both of these shortcom-ings by proposing regular tree grammars (RTGs) as a novel underspecification formalism. Regular tree grammars (Comon et al., 2007) are a standard approach for specifying sets of trees in theoretical computer science, and are closely related to regular tree transducers as used e.g. in recent work on statistical MT (Knight and Graehl, 2005) and grammar formalisms (Shieber, 2006). We show that the “dominance charts” proposed by Koller and Thater (2005b) can be naturally seen as regular tree grammars; using their algorithm, classical underspecified descriptions (dominance graphs) can be translated into RTGs that describe the same sets of readings. However, RTGs are trivially expressively complete because every finite tree language is also regular. We exploit this increase in expressive power in present-ing a novel redundancy elimination algorithm that is simpler and more powerful than the one by Koller and Thater (2006); in our algorithm, redundancy elimination amounts to intersection of regular tree languages. Furthermore, we show how to define a PCFG-style cost model on RTGs and compute best readings of deterministic RTGs efficiently, and illustrate this model on a machine learning based model 218 of scope preferences (Higgins and Sadock, 2003). To our knowledge, this is the first efficient algorithm for computing best readings of a scope ambiguity in the literature.","The paper is structured as follows. In Section 2, we will first sketch the existing standard approach to underspecification. We will then define regular tree grammars and show how to see them as an underspecification formalism in Section 3. We will present the new redundancy elimination algorithm, based on language intersection, in Section 4, and show how to equip RTGs with weights and compute best readings in Section 5. We conclude in Section 6."]},{"title":"2 Underspecification","paragraphs":["The key idea behind scope underspecification is to describe all readings of an ambiguous expression with a single, compact underspecified representation (USR). This simplifies semantics construction, and current algorithms (Koller and Thater, 2005a) support the efficient enumeration of readings from an USR when it is necessary. Furthermore, it is possible to perform certain semantic processing tasks such as eliminating redundant readings (see Section 4) directly on the level of underspecified representations without explicitly enumerating individual readings.","Under the “standard model” of scope underspecification, readings are considered as formulas or trees. USRs specify the “semantic material” common to all readings, plus dominance or outscopes relations between these building blocks. In this paper, we consider dominance graphs (Egg et al., 2001; Althaus et al., 2003) as one representative of this class. An example dominance graph is shown on the left of Fig. 1. It represents the five readings of the sentence “a representative of a company saw every sample.” The (directed, labelled) graph consists of seven sub-trees, or fragments, plus dominance edges relating nodes of these fragments. Each reading is encoded as one configuration of the dominance graph, which can be obtained by “plugging” the tree fragments into each other, in a way that respects the dominance edges: The source node of each dominance edge must dominate (i.e., be an ancestor of) the target node in each configuration. The trees in Fig. 1a–e are the five configurations of the example graph.","An important class of dominance graphs are hypernormally connected dominance graphs, or dominance nets (Niehren and Thater, 2003). The precise definition of dominance nets is not important here, but note that virtually all underspecified descriptions that are produced by current grammars are nets (Flickinger et al., 2005). For the rest of the paper, we restrict ourselves to dominance graphs that are hypernormally connected."]},{"title":"3 Regular tree grammars","paragraphs":["We will now recall the definition of regular tree grammars and show how they can be used as an underspecification formalism. 3.1 Definition Let Σ be an alphabet, or signature, of tree constructors { f , g, a, . . .}, each of which is equipped with an arity ar( f ) ≥ 0. A finite constructor tree t is a finite tree in which each node is labelled with a symbol of Σ, and the number of children of the node is exactly the arity of this symbol. For instance, the configurations in Fig. 1a-e are finite constructor trees over the signature {ax|2, ay|2, compz|0, . . .}. Finite constructor trees can be seen as ground terms over Σ that respect the arities. We write T (Σ) for the finite constructor trees over Σ.","A regular tree grammar (RTG) is a 4-tuple G = (S, N, Σ, R) consisting of a nonterminal alphabet N, a terminal alphabet Σ, a start symbol S ∈ N, and a finite set of production rules R of the form A → β , where A ∈ N and β ∈ T (Σ ∪ N); the nonterminals count as zero-place constructors. Two finite constructor trees t,t′","∈ T (Σ ∪ N) stand in the derivation relation, t →G t′",", if t′","can be built from t by replacing an occurrence of some nonterminal A by the tree on the right-hand side of some production for A. The language generated by G, L(G), is the set {t ∈ T (Σ) | S →∗","G t}, i.e. all terms of terminal symbols that can be derived from the start symbol by a sequence of rule applications. Note that L(G) is a possibly infinite language of finite trees. As usual, we write A → t1 | . . . | tn as shorthand for the n production rules A → ti (1 ≤ i ≤ n). See Comon et al. (2007) for more details.","The languages that can be accepted by regular tree grammars are called regular tree languages (RTLs), and regular tree grammars are equivalent to regular 219 everyy sampley seex,y ax repr-ofx,z az compz 12 3 4 5 6 7 everyy axsampley seex,yrepr-ofx,z az compz (a) everyy az ax sampley seex,y compz repr-ofx,z (c) everyy az ax sampley seex,y","compz repr-ofx,z (d)(b) everyy sampley seex,y ax repr-ofx,z az compz (e) everyy sampley ax repr-ofx,zseex,y az compz Figure 1: A dominance graph (left) and its five configurations. tree automata, which are defined essentially like the well-known regular string automata, except that they assign states to the nodes in a tree rather than the positions in a string. Tree automata are related to tree transducers as used e.g. in statistical machine translation (Knight and Graehl, 2005) exactly like finite-state string automata are related to finite-state string transducers, i.e. they use identical mechanisms to accept rather than transduce languages. Many theoretical results carry over from regular string languages to regular tree languages; for instance, membership of a tree in a RTL can be decided in linear time, RTLs are closed under intersection, union, and complement, and so forth.","3.2 Regular tree grammars in underspecification We can now use regular tree grammars in underspecification by representing the semantic representations as trees and taking an RTG G as an underspecified description of the trees in L(G). For example, the five configurations in Fig. 1 can be represented as the tree language accepted by the following grammar with start symbol S. S → ax(A1,A2) | az(B1,A3) | everyy(B3,A4) A1 → az(B1,B2) A2 → everyy(B3,B4) A3 → ax(B2,A2) | everyy(B3,A5) A4 → ax(A1,B4) | az(B1,A5) A5 → ax(B2,B4) B1 → compz B2 → repr-ofx,z B3 → sampley B4 → seex,y","More generally, every finite set of trees can be written as the tree language accepted by a nonrecursive regular tree grammar such as this. This grammar can be much smaller than the set of trees, because nonterminal symbols (which stand for sets of possibly many subtrees) can be used on the right-hand sides of multiple rules. Thus an RTG is a compact representation of a set of trees in the same way that a parse chart is a compact representation of the set of parse trees of a context-free string grammar. Note that each tree can be enumerated from the RTG in linear time. 3.3 From dominance graphs to tree grammars Furthermore, regular tree grammars can be systematically computed from more traditional underspecified descriptions. Koller and Thater (2005b) demonstrate how to compute a dominance chart from a dominance graph D by tabulating how a subgraph can be decomposed into smaller subgraphs by removing what they call a “free fragment”. If D is hypernormally connected, this chart can be read as a regular tree grammar whose nonterminal symbols are subgraphs of the dominance graph, and whose terminal symbols are names of fragments. For the example graph in Fig. 1, it looks as follows. {1,2,3,4,5,6,7} → 1({2,4,5},{3,6,7}) {1,2,3,4,5,6,7} → 2({4},{1,3,5,6,7}) {1,2,3,4,5,6,7} → 3({6},{1,2,4,5,7})","{1,3,5,6,7} → 1({5},{3,6,7}) | 3({6},{1,5,7})","{1,2,4,5,7} → 1({2,4,5},{7}) | 2({4},{1,5,7})","{1,5,7} → 1({5},{7}) {2,4,5} → 2({4},{5}) {4} → 4 {6} → 6 {3,6,7} → 3({6},{7}) {5} → 5 {7} → 7","This grammar accepts, again, five different trees, whose labels are the node names of the dominance graph, for instance 1(2(4, 5), 3(6, 7)). If f : Σ → Σ′ is a relabelling function from one terminal alphabet to another, we can write f (G) for the grammar (S, N, Σ′",", R′","), where R′","= {A → f (a)(B1, . . . , Bn) | A → a(B1, . . . , Bn) ∈ R}. Now if we choose f to be the labelling function of D (which maps node names to node labels) and G is the chart of D, then L( f (G)) will be the set of configurations of D. The grammar in Section 3.2 is simply f (G) for the chart above (up to consistent renaming of nonterminals).","In the worst case, the dominance chart of a dominance graph with n fragments has O(2n",") production rules (Koller and Thater, 2005b), i.e. charts may be exponential in size; but note that this is still an 220 1,0E+00 1,0E+04 1,0E+08 1,0E+12 1,0E+16 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33#fragments #configurations/rules 01020304050607080 #sentences #sentences #production rules in chart #configurations Figure 2: Chart sizes in the Rondane corpus. improvement over the n! configurations that these worst-case examples have. In practice, RTGs that are computed by converting the USR computed by a grammar remain compact: Fig. 2 compares the average number of configurations and the average number of RTG production rules for USRs of increasing sizes in the Rondane treebank (see Sect. 4.3); the bars represent the number of sentences for USRs of a certain size. Even for the most ambiguous sentence, which has about 4.5 × 1012","scope readings, the dominance chart has only about 75 000 rules, and it takes only 15 seconds on a modern consumer PC (Intel Core 2 Duo at 2 GHz) to compute the grammar from the graph. Computing the charts for all 999 MRS-nets in the treebank takes about 45 seconds."]},{"title":"4 Expressive completeness and redundancy elimination","paragraphs":["Because every finite tree language is regular, RTGs constitute an expressively complete underspecification formalism in the sense of Ebert (2005): They can represent arbitrary subsets of the original set of readings. Ebert shows that the classical dominance-based underspecification formalisms, such as MRS, Hole Semantics, and dominance graphs, are all expressively incomplete, which Koller and Thater (2006) speculate might be a practical problem for algorithms that strengthen USRs to remove unwanted readings. We will now show how both the expressive completeness and the availability of standard constructions for RTGs can be exploited to get an improved redundancy elimination algorithm. 4.1 Redundancy elimination Redundancy elimination (Vestre, 1991; Chaves, 2003; Koller and Thater, 2006) is the problem of deriving from an USR U another USR U ′",", such that the readings of U ′","are a proper subset of the readings of U , but every reading in U is semantically equivalent to some reading in U ′",". For instance, the following sentence from the Rondane treebank is an-alyzed as having six quantifiers and 480 readings by the ERG grammar; these readings fall into just two semantic equivalence classes, characterized by the relative scope of “the lee of” and “a small hillside”. A redundancy elimination would therefore ideally reduce the underspecified description to one that has only two readings (one for each class).","(1) We quickly put up the tents in the lee of a small hillside and cook for the first time in the open. (Rondane 892)","Koller and Thater (2006) define semantic equivalence in terms of a rewrite system that specifies under what conditions two quantifiers may exchange their positions without changing the meaning of the semantic representation. For example, if we assume the following rewrite system (with just a single rule), the five configurations in Fig. 1a-e fall into three equivalence classes – indicated by the dotted boxes around the names a-e – because two pairs of readings can be rewritten into each other. (2) ax(az(P, Q), R) → az(P, ax(Q, R))","Based on this definition, Koller and Thater (2006) present an algorithm (henceforth, KT06) that deletes rules from a dominance chart and thus removes subsets of readings from the USR. The KT06 algorithm is fast and quite effective in practice. However, it essentially predicts for each production rule of a dominance chart whether each configuration that can be built with this rule is equivalent to a configuration that can be built with some other production for the same subgraph, and is therefore rather complex.","4.2 Redundancy elimination as language intersection We now define a new algorithm for redundancy elimination. It is based on the intersection of regular tree languages, and will be much simpler and more powerful than KT06.","Let G = (S, N, Σ, R) be an RTG with a linear order on the terminals Σ; for ease of presentation, we assume Σ ⊆ N. Furthermore, let f : Σ → Σ′","be a relabelling function into the signature Σ′","of the rewrite 221 system. For example, G could be the dominance chart of some dominance graph D, and f could be the labelling function of D.","We can then define a tree language LF as follows: LF contains all trees over Σ that do not contain a sub-tree of the form q1(x1, . . . , xi−1, q2(. . .), xi+1, . . . , xk) where q1 > q2 and the rewrite system contains a rule that has f (q1)(X1, . . . , Xi−1, f (q2)(. . .), Xi+1, . . . , Xk) on the left or right hand side. LF is a regular tree language, and can be accepted by a regular tree grammar GF with O(n) nonterminals and O(n2",") rules, where n = |Σ′","|. A filter grammar for Fig. 1 looks as follows:","S → 1(S, S) | 2(S, Q1) | 3(S, S) | 4 | . . . | 7","Q1 → 2(S, Q1) | 3(S, S) | 4 | . . . | 7 This grammar accepts all trees over Σ except ones","in which a node with label 2 is the parent of a node","with label 1, because such trees correspond to config-","urations in which a node with label az is the parent of","a node with label ax, az and ax are permutable, and","2 > 1. In particular, it will accept the configurations","(b), (c), and (e) in Fig. 1, but not (a) or (d). Since regular tree languages are closed under in-","tersection, we can compute a grammar G′","such that","L(G′",") = L(G) ∩ LF . This grammar has O(nk) nonter-","minals and O(n2","k) productions, where k is the num-","ber of production rules in G, and can be computed","in time O(n2","k). The relabelled grammar f (G′",") ac-","cepts all trees in which adjacent occurrences of per-","mutable quantifiers are in a canonical order (sorted","from lowest to highest node name). For example, the","grammar G′","for the example looks as follows; note","that the nonterminal alphabet of G′","is the product of","the nonterminal alphabets of G and GF .","{1,2,3,4,5,6,7}S → 1({2,4,5}S,{3,6,7}S)","{1,2,3,4,5,6,7}S → 2({4}S,{1,3,5,6,7}Q1)","{1,2,3,4,5,6,7}S → 3({6}S,{1,2,4,5,7}S)","{1,3,5,6,7}Q1 → 3({6}S,{1,5,7}S)","{1,2,4,5,7}S → 1({2,4,5}S,{7}S)","{1,2,4,5,7}S → 2({4}S,{1,5,7}Q1)","{2,4,5}S → 2({4}S,{5}Q1) {4}S → 4","{3,6,7}S → 3({6}S,{7}S) {5}S → 5","{1,5,7}S → 1({5}S,{7}S) {5}Q1 → 5","{6}S → 6 {7}S → 7","Significantly, the grammar contains no produc-tions for {1, 3, 5, 6, 7}Q1 with terminal symbol 1, and no production for {1, 5, 7}Q1. This reduces the tree language accepted by f (G′",") to just the configurations (b), (c), and (e) in Fig. 1, i.e. exactly one representative of every equivalence class. Notice that there are two different nonterminals, {5}Q1 and {5}S, corresponding to the subgraph {5}, so the intersected RTG is not a dominance chart any more. As we will see below, this increased expressivity in-creases the power of the redundancy elimination algorithm. 4.3 Evaluation The algorithm presented here is not only more trans-parent than KT06, but also more powerful; for example, it will reduce the graph in Fig. 4 of Koller and Thater (2006) completely, whereas KT06 won’t.","To measure the extent to which the new algorithm improves upon KT06, we compare both algorithms on the USRs in the Rondane treebank (version of January 2006). The Rondane treebank is a “Redwoods style” treebank (Oepen et al., 2002) containing MRS-based underspecified representations for sentences from the tourism domain, and is distributed together with the English Resource Gram-mar (ERG) (Copestake and Flickinger, 2000).","The treebank contains 999 MRS-nets, which we translate automatically into dominance graphs and further into RTGs; the median number of scope readings per sentence is 56. For our experiment, we consider all 950 MRS-nets with less than 650 000 configurations. We use a slightly weaker version of the rewrite system that Koller and Thater (2006) used in their evaluation.","It turns out that the median number of equivalence classes, computed by pairwise comparison of all configurations, is 8. The median number of configurations that remain after running our algorithm is also 8. By contrast, the median number after running KT06 is 11. For a more fine-grained comparison, Fig. 3 shows the percentage of USRs for which the two algorithms achieve complete reduction, i.e. retain only one reading per equivalence class. In the diagram, we have grouped USRs according to the natural logarithm of their numbers of configurations, and report the percentage of USRs in this group on which the algorithms were complete. The new algorithm dramatically outperforms KT06: In total, it reduces 96% of all USRs completely, whereas KT06 was complete only for 40%. This increase in completeness is partially due to the new algorithm’s ability to use non-chart RTGs: For 28% of the sentences, 222 0% 20% 40% 60% 80% 100% 1 3 5 7 9 11 13 KT06 RTG Figure 3: Percentage of USRs in Rondane for which the algorithms achieve complete reduction. it computes RTGs that are not dominance charts. KT06 was only able to reduce 5 of these 263 graphs completely.","The algorithm needs 25 seconds to run for the entire corpus (old algorithm: 17 seconds), and it would take 50 (38) more seconds to run on the 49 large USRs that we exclude from the experiment. By contrast, it takes about 7 hours to compute the equivalence classes by pairwise comparison, and it would take an estimated several billion years to compute the equivalence classes of the excluded USRs. In short, the redundancy elimination algorithm presented here achieves nearly complete reduction at a tiny fraction of the runtime, and makes a useful task that was completely infeasible before possible. 4.4 Compactness Finally, let us briefly consider the ramifications of expressive completeness on efficiency. Ebert (2005) proves that no expressively complete underspecification formalism can be compact, i.e. in the worst case, the USR of a set of readings become exponentially large in the number of scope-bearing operators. In the case of RTGs, this worst case is achieved by grammars of the form S → t1 | . . . | tn, where t1, . . . ,tn are the trees we want to describe. This grammar is as big as the number of readings, i.e. worst-case exponential in the number n of scope-bearing operators, and essentially amounts to a meta-level disjunction over the readings.","Ebert takes the incompatibility between compactness and expressive completeness as a fundamental problem for underspecification. We don’t see things quite as bleakly. Expressions of natural language it-self are (extremely underspecified) descriptions of sets of semantic representations, and so Ebert’s argument applies to NL expressions as well. This means that describing a given set of readings may require an exponentially long discourse. Ebert’s definition of compactness may be too harsh: An USR, although exponential-size in the number of quantifiers, may still be polynomial-size in the length of the discourse in the worst case.","Nevertheless, the tradeoff between compactness and expressive power is important for the design of underspecification formalisms, and RTGs offer a unique answer. They are expressively complete; but as we have seen in Fig. 2, the RTGs that are derived by semantic construction are compact, and even in-tersecting them with filter grammars for redundancy elimination only blows up their sizes by a factor of O(n2","). As we add more and more information to an RTG to reduce the set of readings, ultimately to those readings that were meant in the actual context of the utterance, the grammar will become less and less compact; but this trend is counterbalanced by the overall reduction in the number of readings. For the USRs in Rondane, the intersected RTGs are, on average, 6% smaller than the original charts. Only 30% are larger than the charts, by a maximal factor of 3.66. Therefore we believe that the theoretical non-compactness should not be a major problem in a well-designed practical system."]},{"title":"5 Computing best configurations","paragraphs":["A second advantage of using RTGs as an underspecification formalism is that we can apply existing algorithms for computing the best derivations of weighted regular tree grammars to compute best (that is, cheapest or most probable) configurations. This gives us the first efficient algorithm for computing the preferred reading of a scope ambiguity.","We define weighted dominance graphs and weighted tree grammars, show how to translate the former into the latter and discuss an example. 5.1 Weighted dominance graphs A weighted dominance graph D = (V, ET ⊎ ED ⊎ WD ⊎ WI) is a dominance graph with two new types of edges – soft dominance edges, WD, and soft disjointness edges, WI –, each of which is equipped with a numeric weight. Soft dominance and disjointness edges provide a mechanism for assigning weights to configurations; a soft dominance edge ex-223 everyy sampley seex,y ax repr-ofx,z az compz 12 3 4 5 6 7 9 8 Figure 4: The graph of Fig. 1 with soft constraints presses a preference that two nodes dominate each other in a configuration, whereas a soft disjointness edge expresses a preference that two nodes are disjoint, i.e. neither dominates the other.","We take the hard backbone of D to be the ordinary dominance graph B(D) = (V, ET ⊎ ED) obtained by removing all soft edges. The set of configurations of a weighted graph D is the set of configurations of its hard backbone. For each configuration t of D, we define the weight c(t) to be the product of the weights of all soft dominance and disjointness edges that are satisfied in t. We can then ask for configurations of maximal weight.","Weighted dominance graphs can be used to encode the standard models of scope preferences (Pafel, 1997; Higgins and Sadock, 2003). For example, Higgins and Sadock (2003) present a machine learning approach for determining pairwise preferences as to whether a quantifier Q1 dominates another quantifier Q2, Q2 dominates Q1, or neither (i.e. they are disjoint). We can represent these numbers as the weights of soft dominance and disjointness edges. An example (with artificial weights) is shown in Fig. 4; we draw the soft dominance edges as curved dotted arrows and the soft disjointness edges as as angled double-headed arrows. Each soft edge is annotated with its weight. The hard backbone of this dominance graph is our example graph from Fig. 1, so it has the same five configurations. The weighted graph assigns a weight of 8 to configuration (a), a weight of 1 to (d), and a weight of 9 to (e); this is also the configuration of maximum weight. 5.2 Weighted tree grammars In order to compute the maximal-weight configuration of a weighted dominance graph, we will first translate it into a weighted regular tree grammar. A weighted regular tree grammar (wRTG) (Graehl and Knight, 2004) is a 5-tuple G = (S, N, Σ, R, c) such that G′","= (S, N, Σ, R) is a regular tree grammar and c : R → R is a function that assigns each production rule a weight. G accepts the same language of trees as G′",". It assigns each derivation a cost equal to the product of the costs of the production rules used in this derivation, and it assigns each tree in the language a cost equal to the sum of the costs of its derivations. Thus wRTGs define weights in a way that is extremely similar to PCFGs, except that we don’t require any weights to sum to one.","Given a weighted, hypernormally connected dominance graph D, we can extend the chart of B(D) to a wRTG by assigning rule weights as follows: The weight of a rule D0 → i(D1, . . . , Dn) is the product over the weights of all soft dominance and disjointness edges that are established by this rule. We say that a rule establishes a soft dominance edge from u to v if u = i and v is in one of the subgraphs D1, . . . , Dn; we say that it establishes a soft disjointness edge between u and v if u and v are in different subgraphs D j and Dk ( j ̸= k). It can be shown that the weight this grammar assigns to each derivation is equal to the weight that the original dominance graph assigns to the corresponding configuration.","If we apply this construction to the example graph in Fig. 4, we obtain the following wRTG: {1,...,7} → ax({2,4,5},{3,6,7}) [9] {1,...,7} → az({4},{1,3,5,6,7}) [1] {1,...,7} → everyy({6},{1,2,4,5,7}) [8]","{2,4,5} → az({4},{5}) [1]","{3,6,7} → everyy({6},{7}) [1] {1,3,5,6,7} → ax({5},{3,6,7}) [1] {1,3,5,6,7} → everyy({6},{1,5,7}) [8] {1,2,4,5,7} → ax({2,4,5},{7}) [1] {1,2,4,5,7} → az({4},{1,5,7}) [1]","{1,5,7} → ax({5},{7}) [1]","{4} → compz [1] {5} → repr−o f x,z [1]","{6} → sampley [1] {7} → seex,y [1]","For example, picking “az” as the root of a configuration (Fig. 1 (c), (d)) of the entire graph has a weight of 1, because this rule establishes no soft edges. On the other hand, choosing “ax” as the root has a weight of 9, because this establishes the soft disjointness edge (and in fact, leads to the derivation of the maximum-weight configuration in Fig. 1 (e)). 5.3 Computing the best configuration The problem of computing the best configuration of a weighted dominance graph – or equivalently, the 224 best derivation of a weighted tree grammar – can now be solved by standard algorithms for wRTGs. For example, Knight and Graehl (2005) present an algorithm to extract the best derivation of a wRTG in time O(t + n log n) where n is the number of nonterminals and t is the number of rules. In practice, we can extract the best reading of the most ambiguous sentence in the Rondane treebank (4.5 × 1012","readings, 75 000 grammar rules) with random soft edges in about a second.","However, notice that this is not the same problem as computing the best tree in the language accepted by a wRTG, as trees may have multiple derivations. The problem of computing the best tree is NP-complete (Sima’an, 1996). However, if the weighted regular tree automaton corresponding to the wRTG is deterministic, every tree has only one derivation, and thus computing best trees becomes easy again. The tree automata for dominance charts are always deterministic, and the automata for RTGs as in Section 3.2 (whose terminals correspond to the graph’s node labels) are also typically deterministic if the variable names are part of the quantifier node labels. Furthermore, there are algorithms for determinizing weighted tree automata (Borchardt and Vogler, 2003; May and Knight, 2006), which could be applied as preprocessing steps for wRTGs."]},{"title":"6 Conclusion","paragraphs":["In this paper, we have shown how regular tree grammars can be used as a formalism for scope underspecification, and have exploited the power of this view in a novel, simpler, and more complete algorithm for redundancy elimination and the first efficient algorithm for computing the best reading of a scope ambiguity. In both cases, we have adapted standard algorithms for RTGs, which illustrates the usefulness of using such a well-understood formalism. In the worst case, the RTG for a scope ambiguity is exponential in the number of scope bearers in the sentence; this is a necessary consequence of their expressive completeness. However, those RTGs that are computed by semantic construction and redundancy elimination remain compact.","Rather than showing how to do semantic construction for RTGs, we have presented an algorithm that computes RTGs from more standard underspecification formalisms. We see RTGs as an “underspecification assembly language” – they support efficient and useful algorithms, but direct semantic construction may be inconvenient, and RTGs will rather be obtained by “compiling” higher-level underspecified representations such as dominance graphs or MRS.","This perspective also allows us to establish a connection to approaches to semantic construction which use chart-based packing methods rather than dominance-based underspecification to manage scope ambiguities. For instance, both Combinatory Categorial Grammars (Steedman, 2000) and synchronous grammars (Nesson and Shieber, 2006) represent syntactic and semantic ambiguity as part of the same parse chart. These parse charts can be seen as regular tree grammars that accept the language of parse trees, and conceivably an RTG that describes only the semantic and not the syntactic ambiguity could be automatically extracted. We could thus reconcile these completely separate approaches to semantic construction within the same formal framework, and RTG-based algorithms (e.g., for redundancy elimination) would apply equally to dominance-based and chart-based approaches. In-deed, for one particular grammar formalism it has even been shown that the parse chart contains an isomorphic image of a dominance chart (Koller and Rambow, 2007).","Finally, we have only scratched the surface of what can be be done with the computation of best configurations in Section 5. The algorithms generalize easily to weights that are taken from an arbitrary ordered semiring (Golan, 1999; Borchardt and Vogler, 2003) and to computing minimal-weight rather than maximal-weight configurations. It is also useful in applications beyond semantic construction, e.g. in discourse parsing (Regneri et al., 2008). Acknowledgments. We have benefited greatly from fruitful discussions on weighted tree grammars with Kevin Knight and Jonathan Graehl, and on discourse underspecification with Markus Egg. We also thank Christian Ebert, Marco Kuhlmann, Alex Lascarides, and the reviewers for their comments on the paper. Finally, we are deeply grateful to our former colleague Joachim Niehren, who was a great fan of tree automata before we even knew what they are. 225"]},{"title":"References","paragraphs":["E. Althaus, D. Duchier, A. Koller, K. Mehlhorn, J. Niehren, and S. Thiel. 2003. An efficient graph algorithm for dominance constraints. J. Algorithms, 48:194–219.","B. Borchardt and H. Vogler. 2003. Determinization of finite state weighted tree automata. Journal of Automata, Languages and Combinatorics, 8(3):417–463.","J. Bos. 1996. Predicate logic unplugged. In Proceedings of the Tenth Amsterdam Colloquium, pages 133–143.","R. P. Chaves. 2003. Non-redundant scope disambiguation in underspecified semantics. In Proceedings of the 8th ESSLLI Student Session, pages 47–58, Vienna.","H. Comon, M. Dauchet, R. Gilleron, C. Löding, F. Jacquemard, D. Lugiez, S. Tison, and M. Tommasi. 2007. Tree automata techniques and applications. Available on: http://www.grappa.univ-lille3.fr/tata.","A. Copestake and D. Flickinger. 2000. An opensource grammar development environment and broadcoverage English grammar using HPSG. In Conference on Language Resources and Evaluation.","A. Copestake, D. Flickinger, C. Pollard, and I. Sag. 2005. Minimal recursion semantics: An introduction. Research on Language and Computation, 3:281–332.","C. Ebert. 2005. Formal investigations of underspecified representations. Ph.D. thesis, King’s College, London.","M. Egg, A. Koller, and J. Niehren. 2001. The Constraint Language for Lambda Structures. Logic, Language, and Information, 10:457–485.","D. Flickinger, A. Koller, and S. Thater. 2005. A new well-formedness criterion for semantics debugging. In Proceedings of the 12th HPSG Conference, Lisbon.","J. S. Golan. 1999. Semirings and their applications. Kluwer, Dordrecht.","J. Graehl and K. Knight. 2004. Training tree transducers. In HLT-NAACL 2004, Boston.","D. Higgins and J. Sadock. 2003. A machine learning approach to modeling scope preferences. Computational Linguistics, 29(1).","K. Knight and J. Graehl. 2005. An overview of probabilistic tree transducers for natural language processing. In Computational linguistics and intelligent text processing, pages 1–24. Springer.","A. Koller and J. Niehren. 2000. On underspecified processing of dynamic semantics. In Proceedings of COLING-2000, Saarbrücken.","A. Koller and O. Rambow. 2007. Relating dominance formalisms. In Proceedings of the 12th Conference on Formal Grammar, Dublin.","A. Koller and S. Thater. 2005a. Efficient solving and exploration of scope ambiguities. Proceedings of the ACL-05 Demo Session.","A. Koller and S. Thater. 2005b. The evolution of dominance constraint solvers. In Proceedings of the ACL-05 Workshop on Software.","A. Koller and S. Thater. 2006. An improved redundancy elimination algorithm for underspecified descriptions. In Proceedings of COLING/ACL-2006, Sydney.","J. May and K. Knight. 2006. A better n-best list: Practical determinization of weighted finite tree automata. In Proceedings of HLT-NAACL.","R. Nesson and S. Shieber. 2006. Simpler TAG semantics through synchronization. In Proceedings of the 11th Conference on Formal Grammar.","J. Niehren and S. Thater. 2003. Bridging the gap between underspecification formalisms: Minimal recursion semantics as dominance constraints. In Proceedings of ACL 2003.","S. Oepen, K. Toutanova, S. Shieber, C. Manning, D. Flickinger, and T. Brants. 2002. The LinGO Redwoods treebank: Motivation and preliminary applications. In Proceedings of the 19th International Conference on Computational Linguistics (COLING’02), pages 1253–1257.","J. Pafel. 1997. Skopus und logische Struktur: Studien zum Quantorenskopus im Deutschen. Habilitationsschrift, Eberhard-Karls-Universität Tübingen.","M. Regneri, M. Egg, and A. Koller. 2008. Efficient processing of underspecified discourse representations. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (ACL-08: HLT) – Short Papers, Columbus, Ohio.","U. Reyle. 1993. Dealing with ambiguities by underspecification: Construction, representation and deduction. Journal of Semantics, 10(1).","S. Shieber. 2006. Unifying synchronous tree-adjoining grammars and tree transducers via bimorphisms. In Proceedings of the 11th Conference of the European Chapter of the Association for Computational Linguistics (EACL-06), Trento, Italy.","K. Sima’an. 1996. Computational complexity of probabilistic disambiguation by means of tree-grammars. In Proceedings of the 16th conference on Computational linguistics, pages 1175–1180, Morristown, NJ, USA. Association for Computational Linguistics.","M. Steedman. 2000. The syntactic process. MIT Press.","E. Vestre. 1991. An algorithm for generating nonredundant quantifier scopings. In Proc. of EACL, pages 251–256, Berlin. 226"]}],"references":[{"authors":[{"first":"E.","last":"Althaus"},{"first":"D.","last":"Duchier"},{"first":"A.","last":"Koller"},{"first":"K.","last":"Mehlhorn"},{"first":"J.","last":"Niehren"},{"first":"S.","last":"Thiel"}],"year":"2003","title":"An efficient graph algorithm for dominance constraints","source":"E. Althaus, D. Duchier, A. Koller, K. Mehlhorn, J. Niehren, and S. Thiel. 2003. An efficient graph algorithm for dominance constraints. J. Algorithms, 48:194–219."},{"authors":[{"first":"B.","last":"Borchardt"},{"first":"H.","last":"Vogler"}],"year":"2003","title":"Determinization of finite state weighted tree automata","source":"B. Borchardt and H. Vogler. 2003. Determinization of finite state weighted tree automata. Journal of Automata, Languages and Combinatorics, 8(3):417–463."},{"authors":[{"first":"J.","last":"Bos"}],"year":"1996","title":"Predicate logic unplugged","source":"J. Bos. 1996. Predicate logic unplugged. In Proceedings of the Tenth Amsterdam Colloquium, pages 133–143."},{"authors":[{"first":"R.","middle":"P.","last":"Chaves"}],"year":"2003","title":"Non-redundant scope disambiguation in underspecified semantics","source":"R. P. Chaves. 2003. Non-redundant scope disambiguation in underspecified semantics. In Proceedings of the 8th ESSLLI Student Session, pages 47–58, Vienna."},{"authors":[{"first":"H.","last":"Comon"},{"first":"M.","last":"Dauchet"},{"first":"R.","last":"Gilleron"},{"first":"C.","last":"Löding"},{"first":"F.","last":"Jacquemard"},{"first":"D.","last":"Lugiez"},{"first":"S.","last":"Tison"},{"first":"M.","last":"Tommasi"}],"year":"2007","title":"Tree automata techniques and applications","source":"H. Comon, M. Dauchet, R. Gilleron, C. Löding, F. Jacquemard, D. Lugiez, S. Tison, and M. Tommasi. 2007. Tree automata techniques and applications. Available on: http://www.grappa.univ-lille3.fr/tata."},{"authors":[{"first":"A.","last":"Copestake"},{"first":"D.","last":"Flickinger"}],"year":"2000","title":"An opensource grammar development environment and broadcoverage English grammar using HPSG","source":"A. Copestake and D. Flickinger. 2000. An opensource grammar development environment and broadcoverage English grammar using HPSG. In Conference on Language Resources and Evaluation."},{"authors":[{"first":"A.","last":"Copestake"},{"first":"D.","last":"Flickinger"},{"first":"C.","last":"Pollard"},{"first":"I.","last":"Sag"}],"year":"2005","title":"Minimal recursion semantics: An introduction","source":"A. Copestake, D. Flickinger, C. Pollard, and I. Sag. 2005. Minimal recursion semantics: An introduction. Research on Language and Computation, 3:281–332."},{"authors":[{"first":"C.","last":"Ebert"}],"year":"2005","title":"Formal investigations of underspecified representations","source":"C. Ebert. 2005. Formal investigations of underspecified representations. Ph.D. thesis, King’s College, London."},{"authors":[{"first":"M.","last":"Egg"},{"first":"A.","last":"Koller"},{"first":"J.","last":"Niehren"}],"year":"2001","title":"The Constraint Language for Lambda Structures","source":"M. Egg, A. Koller, and J. Niehren. 2001. The Constraint Language for Lambda Structures. Logic, Language, and Information, 10:457–485."},{"authors":[{"first":"D.","last":"Flickinger"},{"first":"A.","last":"Koller"},{"first":"S.","last":"Thater"}],"year":"2005","title":"A new well-formedness criterion for semantics debugging","source":"D. Flickinger, A. Koller, and S. Thater. 2005. A new well-formedness criterion for semantics debugging. In Proceedings of the 12th HPSG Conference, Lisbon."},{"authors":[{"first":"J.","middle":"S.","last":"Golan"}],"year":"1999","title":"Semirings and their applications","source":"J. S. Golan. 1999. Semirings and their applications. Kluwer, Dordrecht."},{"authors":[{"first":"J.","last":"Graehl"},{"first":"K.","last":"Knight"}],"year":"2004","title":"Training tree transducers","source":"J. Graehl and K. Knight. 2004. Training tree transducers. In HLT-NAACL 2004, Boston."},{"authors":[{"first":"D.","last":"Higgins"},{"first":"J.","last":"Sadock"}],"year":"2003","title":"A machine learning approach to modeling scope preferences","source":"D. Higgins and J. Sadock. 2003. A machine learning approach to modeling scope preferences. Computational Linguistics, 29(1)."},{"authors":[{"first":"K.","last":"Knight"},{"first":"J.","last":"Graehl"}],"year":"2005","title":"An overview of probabilistic tree transducers for natural language processing","source":"K. Knight and J. Graehl. 2005. An overview of probabilistic tree transducers for natural language processing. In Computational linguistics and intelligent text processing, pages 1–24. Springer."},{"authors":[{"first":"A.","last":"Koller"},{"first":"J.","last":"Niehren"}],"year":"2000","title":"On underspecified processing of dynamic semantics","source":"A. Koller and J. Niehren. 2000. On underspecified processing of dynamic semantics. In Proceedings of COLING-2000, Saarbrücken."},{"authors":[{"first":"A.","last":"Koller"},{"first":"O.","last":"Rambow"}],"year":"2007","title":"Relating dominance formalisms","source":"A. Koller and O. Rambow. 2007. Relating dominance formalisms. In Proceedings of the 12th Conference on Formal Grammar, Dublin."},{"authors":[{"first":"A.","last":"Koller"},{"first":"S.","last":"Thater"}],"year":"2005a","title":"Efficient solving and exploration of scope ambiguities","source":"A. Koller and S. Thater. 2005a. Efficient solving and exploration of scope ambiguities. Proceedings of the ACL-05 Demo Session."},{"authors":[{"first":"A.","last":"Koller"},{"first":"S.","last":"Thater"}],"year":"2005b","title":"The evolution of dominance constraint solvers","source":"A. Koller and S. Thater. 2005b. The evolution of dominance constraint solvers. In Proceedings of the ACL-05 Workshop on Software."},{"authors":[{"first":"A.","last":"Koller"},{"first":"S.","last":"Thater"}],"year":"2006","title":"An improved redundancy elimination algorithm for underspecified descriptions","source":"A. Koller and S. Thater. 2006. An improved redundancy elimination algorithm for underspecified descriptions. In Proceedings of COLING/ACL-2006, Sydney."},{"authors":[{"first":"J.","last":"May"},{"first":"K.","last":"Knight"}],"year":"2006","title":"A better n-best list: Practical determinization of weighted finite tree automata","source":"J. May and K. Knight. 2006. A better n-best list: Practical determinization of weighted finite tree automata. In Proceedings of HLT-NAACL."},{"authors":[{"first":"R.","last":"Nesson"},{"first":"S.","last":"Shieber"}],"year":"2006","title":"Simpler TAG semantics through synchronization","source":"R. Nesson and S. Shieber. 2006. Simpler TAG semantics through synchronization. In Proceedings of the 11th Conference on Formal Grammar."},{"authors":[{"first":"J.","last":"Niehren"},{"first":"S.","last":"Thater"}],"year":"2003","title":"Bridging the gap between underspecification formalisms: Minimal recursion semantics as dominance constraints","source":"J. Niehren and S. Thater. 2003. Bridging the gap between underspecification formalisms: Minimal recursion semantics as dominance constraints. In Proceedings of ACL 2003."},{"authors":[{"first":"S.","last":"Oepen"},{"first":"K.","last":"Toutanova"},{"first":"S.","last":"Shieber"},{"first":"C.","last":"Manning"},{"first":"D.","last":"Flickinger"},{"first":"T.","last":"Brants"}],"year":"2002","title":"The LinGO Redwoods treebank: Motivation and preliminary applications","source":"S. Oepen, K. Toutanova, S. Shieber, C. Manning, D. Flickinger, and T. Brants. 2002. The LinGO Redwoods treebank: Motivation and preliminary applications. In Proceedings of the 19th International Conference on Computational Linguistics (COLING’02), pages 1253–1257."},{"authors":[{"first":"J.","last":"Pafel"}],"year":"1997","title":"Skopus und logische Struktur: Studien zum Quantorenskopus im Deutschen","source":"J. Pafel. 1997. Skopus und logische Struktur: Studien zum Quantorenskopus im Deutschen. Habilitationsschrift, Eberhard-Karls-Universität Tübingen."},{"authors":[{"first":"M.","last":"Regneri"},{"first":"M.","last":"Egg"},{"first":"A.","last":"Koller"}],"year":"2008","title":"Efficient processing of underspecified discourse representations","source":"M. Regneri, M. Egg, and A. Koller. 2008. Efficient processing of underspecified discourse representations. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (ACL-08: HLT) – Short Papers, Columbus, Ohio."},{"authors":[{"first":"U.","last":"Reyle"}],"year":"1993","title":"Dealing with ambiguities by underspecification: Construction, representation and deduction","source":"U. Reyle. 1993. Dealing with ambiguities by underspecification: Construction, representation and deduction. Journal of Semantics, 10(1)."},{"authors":[{"first":"S.","last":"Shieber"}],"year":"2006","title":"Unifying synchronous tree-adjoining grammars and tree transducers via bimorphisms","source":"S. Shieber. 2006. Unifying synchronous tree-adjoining grammars and tree transducers via bimorphisms. In Proceedings of the 11th Conference of the European Chapter of the Association for Computational Linguistics (EACL-06), Trento, Italy."},{"authors":[{"first":"K.","last":"Sima’an"}],"year":"1996","title":"Computational complexity of probabilistic disambiguation by means of tree-grammars","source":"K. Sima’an. 1996. Computational complexity of probabilistic disambiguation by means of tree-grammars. In Proceedings of the 16th conference on Computational linguistics, pages 1175–1180, Morristown, NJ, USA. Association for Computational Linguistics."},{"authors":[{"first":"M.","last":"Steedman"}],"year":"2000","title":"The syntactic process","source":"M. Steedman. 2000. The syntactic process. MIT Press."},{"authors":[{"first":"E.","last":"Vestre"}],"year":"1991","title":"An algorithm for generating nonredundant quantifier scopings","source":"E. Vestre. 1991. An algorithm for generating nonredundant quantifier scopings. In Proc. of EACL, pages 251–256, Berlin. 226"}],"cites":[{"style":0,"text":"Reyle, 1993","origin":{"pointer":"/sections/8/paragraphs/0","offset":20,"length":11},"authors":[{"last":"Reyle"}],"year":"1993","references":["/references/25"]},{"style":0,"text":"Copestake et al., 2005","origin":{"pointer":"/sections/8/paragraphs/0","offset":33,"length":22},"authors":[{"last":"Copestake"},{"last":"al."}],"year":"2005","references":["/references/6"]},{"style":0,"text":"Bos, 1996","origin":{"pointer":"/sections/8/paragraphs/0","offset":57,"length":9},"authors":[{"last":"Bos"}],"year":"1996","references":["/references/2"]},{"style":0,"text":"Egg et al., 2001","origin":{"pointer":"/sections/8/paragraphs/0","offset":68,"length":16},"authors":[{"last":"Egg"},{"last":"al."}],"year":"2001","references":["/references/8"]},{"style":0,"text":"Copestake and Flickinger (2000)","origin":{"pointer":"/sections/8/paragraphs/0","offset":198,"length":31},"authors":[{"last":"Copestake"},{"last":"Flickinger"}],"year":"2000","references":["/references/5"]},{"style":0,"text":"Koller and Niehren, 2000","origin":{"pointer":"/sections/8/paragraphs/0","offset":553,"length":24},"authors":[{"last":"Koller"},{"last":"Niehren"}],"year":"2000","references":["/references/14"]},{"style":0,"text":"Koller and Thater, 2006","origin":{"pointer":"/sections/8/paragraphs/0","offset":579,"length":23},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Reyle, 1993","origin":{"pointer":"/sections/8/paragraphs/1","offset":130,"length":11},"authors":[{"last":"Reyle"}],"year":"1993","references":["/references/25"]},{"style":0,"text":"Althaus et al., 2003","origin":{"pointer":"/sections/8/paragraphs/1","offset":164,"length":20},"authors":[{"last":"Althaus"},{"last":"al."}],"year":"2003","references":["/references/0"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/8/paragraphs/1","offset":551,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Ebert (2005)","origin":{"pointer":"/sections/8/paragraphs/1","offset":753,"length":12},"authors":[{"last":"Ebert"}],"year":"2005","references":["/references/7"]},{"style":0,"text":"Comon et al., 2007","origin":{"pointer":"/sections/8/paragraphs/2","offset":160,"length":18},"authors":[{"last":"Comon"},{"last":"al."}],"year":"2007","references":["/references/4"]},{"style":0,"text":"Knight and Graehl, 2005","origin":{"pointer":"/sections/8/paragraphs/2","offset":365,"length":23},"authors":[{"last":"Knight"},{"last":"Graehl"}],"year":"2005","references":["/references/13"]},{"style":0,"text":"Shieber, 2006","origin":{"pointer":"/sections/8/paragraphs/2","offset":414,"length":13},"authors":[{"last":"Shieber"}],"year":"2006","references":["/references/26"]},{"style":0,"text":"Koller and Thater (2005b)","origin":{"pointer":"/sections/8/paragraphs/2","offset":478,"length":25},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2005b","references":["/references/17"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/8/paragraphs/2","offset":954,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Higgins and Sadock, 2003","origin":{"pointer":"/sections/8/paragraphs/2","offset":1286,"length":24},"authors":[{"last":"Higgins"},{"last":"Sadock"}],"year":"2003","references":["/references/12"]},{"style":0,"text":"Koller and Thater, 2005a","origin":{"pointer":"/sections/9/paragraphs/0","offset":224,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2005a","references":["/references/16"]},{"style":0,"text":"Egg et al., 2001","origin":{"pointer":"/sections/9/paragraphs/1","offset":277,"length":16},"authors":[{"last":"Egg"},{"last":"al."}],"year":"2001","references":["/references/8"]},{"style":0,"text":"Althaus et al., 2003","origin":{"pointer":"/sections/9/paragraphs/1","offset":295,"length":20},"authors":[{"last":"Althaus"},{"last":"al."}],"year":"2003","references":["/references/0"]},{"style":0,"text":"Niehren and Thater, 2003","origin":{"pointer":"/sections/9/paragraphs/2","offset":104,"length":24},"authors":[{"last":"Niehren"},{"last":"Thater"}],"year":"2003","references":["/references/21"]},{"style":0,"text":"Flickinger et al., 2005","origin":{"pointer":"/sections/9/paragraphs/2","offset":299,"length":23},"authors":[{"last":"Flickinger"},{"last":"al."}],"year":"2005","references":["/references/9"]},{"style":0,"text":"Comon et al. (2007)","origin":{"pointer":"/sections/10/paragraphs/5","offset":286,"length":19},"authors":[{"last":"Comon"},{"last":"al."}],"year":"2007","references":["/references/4"]},{"style":0,"text":"Knight and Graehl, 2005","origin":{"pointer":"/sections/10/paragraphs/7","offset":459,"length":23},"authors":[{"last":"Knight"},{"last":"Graehl"}],"year":"2005","references":["/references/13"]},{"style":0,"text":"Koller and Thater (2005b)","origin":{"pointer":"/sections/10/paragraphs/9","offset":736,"length":25},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2005b","references":["/references/17"]},{"style":0,"text":"Koller and Thater, 2005b","origin":{"pointer":"/sections/10/paragraphs/18","offset":20,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2005b","references":["/references/17"]},{"style":0,"text":"Ebert (2005)","origin":{"pointer":"/sections/11/paragraphs/0","offset":133,"length":12},"authors":[{"last":"Ebert"}],"year":"2005","references":["/references/7"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/11/paragraphs/0","offset":385,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Vestre, 1991","origin":{"pointer":"/sections/11/paragraphs/0","offset":745,"length":12},"authors":[{"last":"Vestre"}],"year":"1991","references":["/references/29"]},{"style":0,"text":"Chaves, 2003","origin":{"pointer":"/sections/11/paragraphs/0","offset":759,"length":12},"authors":[{"last":"Chaves"}],"year":"2003","references":["/references/3"]},{"style":0,"text":"Koller and Thater, 2006","origin":{"pointer":"/sections/11/paragraphs/0","offset":773,"length":23},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/11/paragraphs/5","offset":0,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/11/paragraphs/6","offset":26,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/11/paragraphs/51","offset":549,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Oepen et al., 2002","origin":{"pointer":"/sections/11/paragraphs/52","offset":212,"length":18},"authors":[{"last":"Oepen"},{"last":"al."}],"year":"2002","references":["/references/22"]},{"style":0,"text":"Copestake and Flickinger, 2000","origin":{"pointer":"/sections/11/paragraphs/52","offset":393,"length":30},"authors":[{"last":"Copestake"},{"last":"Flickinger"}],"year":"2000","references":["/references/5"]},{"style":0,"text":"Koller and Thater (2006)","origin":{"pointer":"/sections/11/paragraphs/53","offset":318,"length":24},"authors":[{"last":"Koller"},{"last":"Thater"}],"year":"2006","references":["/references/18"]},{"style":0,"text":"Ebert (2005)","origin":{"pointer":"/sections/11/paragraphs/55","offset":711,"length":12},"authors":[{"last":"Ebert"}],"year":"2005","references":["/references/7"]},{"style":0,"text":"Pafel, 1997","origin":{"pointer":"/sections/12/paragraphs/3","offset":90,"length":11},"authors":[{"last":"Pafel"}],"year":"1997","references":["/references/23"]},{"style":0,"text":"Higgins and Sadock, 2003","origin":{"pointer":"/sections/12/paragraphs/3","offset":103,"length":24},"authors":[{"last":"Higgins"},{"last":"Sadock"}],"year":"2003","references":["/references/12"]},{"style":0,"text":"Higgins and Sadock (2003)","origin":{"pointer":"/sections/12/paragraphs/3","offset":143,"length":25},"authors":[{"last":"Higgins"},{"last":"Sadock"}],"year":"2003","references":["/references/12"]},{"style":0,"text":"Graehl and Knight, 2004","origin":{"pointer":"/sections/12/paragraphs/3","offset":1166,"length":23},"authors":[{"last":"Graehl"},{"last":"Knight"}],"year":"2004","references":["/references/11"]},{"style":0,"text":"Knight and Graehl (2005)","origin":{"pointer":"/sections/12/paragraphs/13","offset":617,"length":24},"authors":[{"last":"Knight"},{"last":"Graehl"}],"year":"2005","references":["/references/13"]},{"style":0,"text":"Sima’an, 1996","origin":{"pointer":"/sections/12/paragraphs/15","offset":208,"length":13},"authors":[{"last":"Sima’an"}],"year":"1996","references":["/references/27"]},{"style":0,"text":"Borchardt and Vogler, 2003","origin":{"pointer":"/sections/12/paragraphs/15","offset":738,"length":26},"authors":[{"last":"Borchardt"},{"last":"Vogler"}],"year":"2003","references":["/references/1"]},{"style":0,"text":"May and Knight, 2006","origin":{"pointer":"/sections/12/paragraphs/15","offset":766,"length":20},"authors":[{"last":"May"},{"last":"Knight"}],"year":"2006","references":["/references/19"]},{"style":0,"text":"Steedman, 2000","origin":{"pointer":"/sections/13/paragraphs/2","offset":263,"length":14},"authors":[{"last":"Steedman"}],"year":"2000","references":["/references/28"]},{"style":0,"text":"Nesson and Shieber, 2006","origin":{"pointer":"/sections/13/paragraphs/2","offset":305,"length":24},"authors":[{"last":"Nesson"},{"last":"Shieber"}],"year":"2006","references":["/references/20"]},{"style":0,"text":"Koller and Rambow, 2007","origin":{"pointer":"/sections/13/paragraphs/2","offset":1014,"length":23},"authors":[{"last":"Koller"},{"last":"Rambow"}],"year":"2007","references":["/references/15"]},{"style":0,"text":"Golan, 1999","origin":{"pointer":"/sections/13/paragraphs/3","offset":220,"length":11},"authors":[{"last":"Golan"}],"year":"1999","references":["/references/10"]},{"style":0,"text":"Borchardt and Vogler, 2003","origin":{"pointer":"/sections/13/paragraphs/3","offset":233,"length":26},"authors":[{"last":"Borchardt"},{"last":"Vogler"}],"year":"2003","references":["/references/1"]},{"style":0,"text":"Regneri et al., 2008","origin":{"pointer":"/sections/13/paragraphs/3","offset":427,"length":20},"authors":[{"last":"Regneri"},{"last":"al."}],"year":"2008","references":["/references/24"]}]}
