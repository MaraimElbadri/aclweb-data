{"sections":[{"title":"","paragraphs":["Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 406–411, Sofia, Bulgaria, August 4-9 2013. c⃝2013 Association for Computational Linguistics"]},{"title":"Learning Non-linear Features for Machine Translation Using Gradient Boosting Machines Kristina Toutanova Microsoft Research Redmond, WA 98502","paragraphs":["kristout@microsoft.com"]},{"title":"Byung-Gyu Ahn","paragraphs":["∗"]},{"title":"Johns Hopkins University Baltimore, MD 21218","paragraphs":["bahn@cs.jhu.edu"]},{"title":"Abstract","paragraphs":["In this paper we show how to automatically induce non-linear features for machine translation. The new features are selected to approximately maximize a BLEU-related objective and decompose on the level of local phrases, which guarantees that the asymptotic complexity of machine translation decoding does not increase. We achieve this by applying gradient boosting machines (Friedman, 2000) to learn new weak learners (features) in the form of regression trees, using a differentiable loss function related to BLEU. Our results indicate that small gains in performance can be achieved using this method but we do not see the dramatic gains observed using feature induction for other important machine learning tasks."]},{"title":"1 Introduction","paragraphs":["The linear model for machine translation (Och and Ney, 2002) has become the de-facto standard in the field. Recently, researchers have proposed a large number of additional features (TaroWatanabe et al., 2007; Chiang et al., 2009) and parameter tuning methods (Chiang et al., 2008b; Hopkins and May, 2011; Cherry and Foster, 2012) which are better able to scale to the larger parameter space. However, a significant feature engineering effort is still required from practitioners. When a linear model does not fit well, researchers are careful to manually add important feature conjunctions, as for example, (Daumé III and Jagarlamudi, 2011; Clark et al., 2012). In the related field of web search ranking, automatically learned non-linear features have brought dramatic improvements in quality (Burges et al., 2005; Wu","∗","This research was conducted during the author’s internship at Microsoft Research et al., 2010). Here we adapt the main insights of such work to the machine translation setting and share results on two language pairs.","Some recent works have attempted to relax the linearity assumption on MT features (Nguyen et al., 2007), by defining non-parametric models on complete translation hypotheses, for use in an n-best re-ranking setting. In this paper we develop a framework for inducing non-linear features in the form of regression decision trees, which decompose locally and can be integrated efficiently in decoding. The regression trees encode non-linear feature combinations of the original features. We build on the work by Friedman (2000) which shows how to induce features to minimize any differentiable loss function. In our applica-tion the features are regression decision trees, and the loss function is the pairwise ranking log-loss from the PRO method for parameter tuning (Hopkins and May, 2011). Additionally, we show how to design the learning process such that the induced features are local on phrase-pairs and their language model and reordering context, and thus can be incorporated in decoding efficiently.","Our results using re-ranking on two language pairs show that the feature induction approach can bring small gains in performance. Overall, even though the method shows some promise, we do not see the dramatic gains that have been seen for the web search ranking task (Wu et al., 2010). Further improvements in the original feature set and the induction algorithm, as well as full integration in decoding are needed to potentially result in substantial performance improvements."]},{"title":"2 Feature learning using gradient boosting machines","paragraphs":["In the linear model for machine translation, the scores of translation hypotheses are weighted sums of a set of input features over the hypotheses. 406 Figure 1: A Bulgarian source sentence (meaning ”the conference in Bulgaria”, together with a candidate translation. Local and global features for the translation hypothesis are shown. f0=smoothed relative frequency estimate of log p(s|t); f1=lexical weighting estimate of log p(s|t); f2=joint count of the phrase-pair; f3=sum of language model log-probabilities of target phrase words given context. For a set of features f1(h), . . . , fL(h) and weights for these features λ1, . . . , λL, the hypothesis scores are defined as: F (h) = ∑","l=1...L λlfl(h). In current state-of-the-art models, the features fl(h) decompose locally on phrase-pairs (with language model and reordering context) inside the hypotheses. This enables hypothesis recombina-tion during machine translation decoding, leading to faster and more accurate search. As an example, Figure 1 shows a Bulgarian source sentence (spelled phonetically in Latin script) and a candidate translation. Two phrase-pairs are used to compose the translation, and each phrase-pair has a set of local feature function values. A minimal set of four features is shown, for simplicity. We can see that the hypothesis-level (global) feature values are sums of phrase-level (local) feature values. The score of a translation given feature weights λ can be computed either by scoring the phrase-pairs and adding the scores, or by scoring the complete hypothesis by computing its global feature values. The local feature values do look at some limited context outside of a phrase-pair, to compute language model scores and re-ordering scores; therefore we say that the features are defined on phrase-pairs in context.","We start with such a state-of-the-art linear model with decomposable features and show how we can automatically induce additional features. The new features are also locally decomposable, so that the scores of hypotheses can be computed as sums of phrase-level scores. The new local phrase-level features are non-linear combinations of the original phrase-level features. Figure 2: Example of two decision tree features. The left decision tree has linear nodes and the right decision tree has constant nodes. 2.1 Form of induced features We will use the example in Figure 1 to introduce the form of the new features we induce and to give an intuition of why such features might be useful. The new features are expressed by regression decision trees; Figure 2 shows two examples.","One intuition we might have is that, if a phrase pair has been seen very few times in the training corpus (for example, the first phrase pair P1 in the Figure has been seen only one time f2 = 1), we would like to trust its lexical weighting channel model score f1 more than its smoothed relative-frequency channel estimate f0. The first regression tree feature h1 in Figure 2 captures this intuition. The feature value for a phrase-pair of this feature is computed as follows: if f2 ≤ 2, then h1(f0, f1, f2, f3) = 2 × f1; otherwise, h1(f0, f1, f2, f3) = f1. The effect of this new feature h1 is to boost the importance of the lexical weighting score for phrase-pairs of low joint count. More generally, the regression tree features we consider have either linear or constant leaf nodes, and have up to 8 leaves. Deeper trees can capture more complex conditions on several input feature values. Each non-leaf node performs a comparison of some input feature value to a threshold and each leaf node (for linear nodes) returns the value of some input feature multiplied by some factor. For a given regression tree with linear nodes, all leaf nodes are expressions of the same input feature but have different coefficients for it (for example, both leaf nodes of h1 return affine functions of the input feature f1). A decision tree feature with constant-valued leaf nodes is illustrated by the right-hand-side tree in Figure 2. For these decision trees, the leaf nodes contain a constant, which is specific to each leaf. These kinds of trees can effectively perform conjunctions of several binary-valued input feature functions; or they can achieve binning of real-values features together with conjunctions over binned values. 407","Having introduced the form of the new features we learn, we now turn to the methodology for inducing them. We apply the framework of gradient boosting for decision tree weak learners (Friedman, 2000). To define the framework, we need to introduce the original input features, the differentiable loss function, and the details of the tree growing algorithm. We discuss these in turn next. 2.2 Initial features Our baseline MT system uses relative frequency and lexical weighting channel model weights, one or more language models, distortion penalty, word count, phrase count, and multiple lexicalized reordering weights, one for each distortion type. We have around 15 features in this base feature set. We further expand the input set of features to increase the possibility that useful feature combinations could be found by our feature induction method. The large feature set contains around 190 features, including source and target word count features, joint phrase count, lexical weighting scores according to alternative word-alignment model ran over morphemes instead of words, in-dicator lexicalized features for insertion and deletion of the top 15 words in each language, cluster-based insertion and deletion indicators using hard word clustering, and cluster based signatures of phrase-pairs. This is the feature set we use as a basis for weak learner induction. 2.3 Loss function We use a pair-wise ranking log-loss as in the PRO parameter tuning method (Hopkins and May, 2011). The loss is defined by comparing the model scores of pairs of hypotheses hi and hj where the BLEU score of the first hypothesis is greater than the BLEU score of the second hypothesis by a specified threshold. 1","We denote the sentences in a corpus as s1",", s2",", . . . , sN",". For each sentence sn",", we denote the ordered selected pairs of hypotheses as [hn","i1, hn","j1], . . . , [hn","iK , hn","jK ]. The loss-function Ψ is defined in terms of the hypothesis model scores","1","In our implementation, for each sentence, we sample 10, 000 pairs of translations and accept a pair of translations for use with probability proportional to the BLEU score difference, if that difference is greater than the threshold of 0.04. The top K = 100 or K = 300 hypothesis pairs with the largest BLEU difference are selected for computation of the loss. We compute sentence-level B LEUscores by add- α smoothing of the match counts for computation of n-gram precision. The α and K parameters are chosen via crossvalidation. 1: F0(x) = arg minλ Ψ(F (x, λ)) 2: for m = 1toM do 3: yr = −[ ∂Ψ(F (x)) ∂F (xr) ]F (x)=Fm−1(x), r =","1 . . . R 4: αm = arg minα,β","∑R","r=1[yr − βh(xi; α)]2 5: ρm = arg minρ Ψ(Fm−1(x) + ρh(x; αm) 6: Fm(x) = Fm−1(x) + ρmh(x; αm) 7: end for Figure 3: A gradient boosting algorithm for local feature functions. F (h) as follows:","∑ n=1...N ∑ k=1...K log(1 + e","F (hn j k )−F (hn","i","k )",").","The idea of the gradient boosting method is to induce additional features by computing a functional gradient of the target loss function and iteratively selecting the next weak learner (feature) that is most parallel to the negative gradient. Since we want to induce features such that the hypothesis scores decompose locally, we need to formulate our loss function as a function of local phrase-pair in context scores. Having the model scores decompose locally means that the scores of hypotheses F (h) decompose as F (h) =","∑","pr∈h F (pr)), where by pr ∈ h we denote the enumeration over phrase pairs in context that are parts of h. If xr denotes the input feature vector for a phrase-pair in context pr, the score of this phrase-pair can be expressed as F (xr). Appendix A expresses the pair-wise log-loss as a function of the phrase scores.","We are now ready to introduce the gradient boosting algorithm, summarized in Figure 3. In the first step of the algorithm, we start by setting the phrase-pair in context scoring function F0(x) as a linear function of the input feature values, by selecting the feature weights λ to minimize the PRO loss Ψ(F0(x)) as a function of λ. The initial scores have the form F0(x) =∑","l=1...L λlfl(x).This is equivalent to using the (Hopkins and May, 2011) method of parameter tuning for a fixed input feature set and a linear model. We used LBFGS for the optimization in Line 1. Then we iterate and induce a new decision tree weak learner h(x; αm) like the examples in Figure 2 at each iteration. The parameter vectors αm encode the topology and parameters of the decision trees, including which feature value is tested at each node, what the comparison cutoffs are, and the way to compute the values at the leaf nodes. After a new decision tree 408 Language Train Dev-Train Dev-Select Test Chs-En 999K NIST02+03 2K NIST05 Fin-En 2.2M 12K 2K 4.8K Table 1: Data sets for the two language pairs Chinese-English and Finnish-English.","Chs-En Fin-En Features Tune Dev-Train Test Dev-Train Test base MERT 31.3 30.76 49.8 51.31 base PRO 31.1 31.16 49.7 51.56 large PRO 31.8 31.44 49.8 51.77 boost-global PRO 31.8 31.30 50.0 51.87 boost-local PRO 31.8 31.44 50.1 51.95 Table 2: Results for the two language pairs using different weight tuning methods and feature sets. h(x; αm) is induced, it is treated as new feature and a linear coefficient ρm for that feature is set by minimizing the loss as a function of this parameter (Line 5). The new model scores are set as the old model scores plus a weighted contribution from the new feature (Line 6). At the end of learning, we have a linear model over the input features and additional decision tree features. FM (x) =∑ l=1...L λlfl(x) +","∑","m=1...M ρmh(x; αm). The most time-intensive step of the algorithm is the selection of the next decision tree h. This is done by first computing the functional gradient of the loss with respect to the phrase scores F (xr) at the point of the current model scores Fm−1(xr). Appendix A shows a derivation of this gradient. We then induce a regression tree using mean-squareerror minimization, setting the direction given by the negative gradient as a target to be predicted using the features of each phrase-pair in context instance. This is shown as the setting of the αm parameters by mean-squared-error minimization in Line 4 of the algorithm. The minimization is done approximately by a standard greedy tree-growing algorithm (Breiman et al., 1984). When we tune weights to minimize the loss, such as the weights λ of the initial features, or the weights ρm of induced learners, we also include an L2 penalty on the parameters, to prevent overfitting."]},{"title":"3 Experiments","paragraphs":["We report experimental results on two language pairs: Chinese-English, and Finnish-English. Table 1 summarizes statistics about the data. For each language pair, we used a training set (Train) for extracting phrase tables and language models, a Dev-Train set for tuning feature weights and inducing features, a Dev-Select set for selecting hyperparameters of PRO tuning and selecting a stopping point and other hyperparameters of the boosting method, and a Test set for reporting final results. For Chinese-English, the training corpus consists of approximately one million sentence pairs from the FBIS and HongKong portions of the LDC data for the NIST MT evaluation and the Dev-Train and Test sets are from NIST competitions. The MT system is a phrasal system with a 4gram language model, trained on the Xinhua por-tion of the English Gigaword corpus. The phrase table has maximum phrase length of 7 words on either side. For Finnish-English we used a data-set from a technical domain of software manuals. For this language pair we used two language models: one very large model trained on billions of words, and another language model trained from the target side of the parallel training set. We report performance using the BLEU- SBP metric proposed in (Chiang et al., 2008a). This is a variant of BLEU (Papineni et al., 2002) with strict brevity penalty, where a long translation for one sentence can not be used to counteract the brevity penalty for another sentence with a short translation. Chiang et al. (2008a) showed that this metric overcomes several undesirable properties of BLEU and has better correlation with human judgements. In our experiments with different feature sets and hyperparameters we observed more stable results and better correlation of Dev-Train, Dev-Select, and Test results using BLEU- SBP. For our experiments, we first trained weights for the base feature sets described in Section 2.2 using MERT. We then decoded the Dev-Train, Dev-Select, and Test datasets, generating 500-best lists for each set. All results in Table 2 report performance of re-ranking on these 500-best lists using different feature sets and parameter tuning methods.","The baseline (base feature set) performance using MERT and PRO tuning on the two language pairs is shown on the first two lines. In line with prior work, PRO tuning achieves a bit lower scores on the tuning set but higher scores on the test set, compared to MERT. The large feature set additionally contains over 170 manually specified features, described in Section 2.2. It was infeasible to run MERT training on this feature set. The test set results using PRO tuning for the large set are about a quarter of a BLEU- SBP point higher than the results using the base feature set on both language pairs. Finally, the last two rows show the performance of the gradient boosting method. In 409 addition to learning locally decomposable features boost-local, we also implemented boost-global, where we are learning combinations of the global feature values and lose decomposability. The features learned by boost-global can not be computed exactly on partial hypotheses in decoding and thus this method has a speed disadvantage, but we wanted to compare the performance of boost-local and boost-global on n-best list re-ranking to see the potential accuracy gain of the two methods. We see that boost-local is slightly better in performance, in addition to being amenable to efficient decoder integration.","The gradient boosting results are mixed; for Finnish-English, we see around .2 gain of the boost-local model over the large feature set. There is no improvement on Chinese-English, and the boost-global method brings slight degrada-tion. We did not see a large difference in performance among models using different decision tree leaf node types and different maximum numbers of leaf nodes. The selected boost-local model for FIN-ENU used trees with maximum of 2 leaf nodes and linear leaf values; 25 new features were induced before performance started to degrade on the Dev-Select set. The induced features for Finnish included combinations of language model and channel model scores, combinations of word count and channel model scores, and combinations of channel and lexicalized reordering scores. For example, one feature increases the contribution of the relative frequency channel score for phrases with many target words, and decreases the channel model contribution for shorter phrases.","The best boost-local model for Chs-Enu used trees with a maximum of 2 constant-values leaf nodes, and induced 24 new tree features. The features effectively promoted and demoted phrase-pairs in context based on whether an input feature’s value was smaller than a determined cutoff.","In conclusion, we proposed a new method to induce feature combinations for machine translation, which do not increase the decoding complexity. There were small improvements on one language pair in a re-ranking setting. Further improvements in the original feature set and the induction algorithm, as well as full integration in decoding are needed to result in substantial performance improvements.","This work did not consider alternative ways of generating non-linear features, such as taking products of two or more input features. It would be interesting to compare such alternatives to the regression tree features we explored."]},{"title":"References","paragraphs":["Leo Breiman, Jerome Friedman, Charles J. Stone, and R.A. Olshen. 1984. Classification and Regression Trees. Chapman and Hall.","Chris Burges, Tal Shaked, Erin Renshaw, Matt Deeds, Nicole Hamilton, and Greg Hullender. 2005. Learn-ing to rank using gradient descent. In ICML.","Colin Cherry and George Foster. 2012. Batch tuning strategies for statistical machine translation. In HLT-NAACL.","David Chiang, Steve DeNeefe, Yee Seng Chan, and Hwee Tou Ng. 2008a. Decomposability of translation metrics for improved evaluation and efficient algorithms. In EMNLP.","David Chiang, Yuval Marton, and Philp Resnik. 2008b. Online large margin training of syntactic and structural translation features. In EMNLP.","D. Chiang, W. Wang, and K. Knight. 2009. 11,001 new features for statistical machine translation. In NAACL.","Jonathan Clark, Alon Lavie, and Chris Dyer. 2012. One system, many domains: Open-domain statistical machine translation via feature augmentation. In AMTA.","Hal Daumé III and Jagadeesh Jagarlamudi. 2011. Domain adaptation for machine translation by mining unseen words. In ACL.","Jerome H. Friedman. 2000. Greedy function approximation: A gradient boosting machine. Annals of Statistics, 29:1189–1232.","Mark Hopkins and Jonathan May. 2011. Tuning as ranking. In EMNLP.","Patrick Nguyen, Milind Mahajan, and Xiaodong He. 2007. Training non-parametric features for statistical machine translation. In Second Workshop on Statistical Machine Translation.","Franz Josef Och and Hermann Ney. 2002. Discriminative training and maximum entropy models for statistical machine translation. In ACL.","Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. 2002. BLEU: a method for automatic evaluation of machine translation. In ACL.","TaroWatanabe, Jun Suzuki, Hajime Tsukuda, and Hideki Isozaki. 2007. Online large-margin training for statistical machine translation. In EMNLP. 410","Qiang Wu, Christopher J. Burges, Krysta M. Svore, and Jianfeng Gao. 2010. Adapting boosting for information retrieval measures. Information Retrieval, 13(3), June."]},{"title":"4 Appendix A: Derivation of derivatives","paragraphs":["Here we express the loss as a function of phrase-level in context scores and derive the derivative of the loss with respect to these scores.","Let us number all phrase-pairs in context in all hypotheses in all sentences as p1, . . . , pR and denote their input feature vectors as x1, . . . , xR. We will use F (pr) and F (xr) interchangeably, because the score of a phrase-pair in context is defined by its input feature vector. The loss Ψ(F (xr)) is expressed as follows: ∑N","n=1","∑K k=1 log(1 + e ∑","pr∈hn j k F (xr)−∑","pr∈hn i k F (xr) ).","Next we derive the derivatives of the loss Ψ(F (x)) with respect to the phrase scores. Intuitively, we are treating the scores we want to learn as parameters for the loss function; thus the loss function has a huge number of parameters, one for each instance of each phrase pair in context in each translation. We ask the loss function if these scores could be set in an arbitrary way, what direction it would like to move them in to be minimized. This is the direction given by the negative gradient.","Each phrase-pair in context pr occurs in exactly one hypothesis h in one sentence. It is possible that two phrase-pairs in context share the same set of input features, but for ease of implementation and exposition, we treat these as different training instances. To express the gradient with respect to F (xr) we therefore need to focus on the terms of the loss from a single sentence and to take into account the hypothesis pairs [hj,k, hi,k] where the left or the right hypothesis is the hypothesis h containing our focus phrase pair pr. ∂Ψ(F (x)) ∂F (xr) is expressed as: = ∑","k:h=hi k − e","∑","pr∈hn","j","k F(xr)−∑","pr∈hn i k F(xr) 1+e","∑","pr∈hn","j","k F(xr)−∑","pr∈hn i k F(xr) +","∑ k:h=hj","k e ∑","pr∈hn j k","F(xr)−∑","pr∈hn","i","k F(xr) 1+e ∑","pr∈hn j k","F(xr)−∑","pr∈hn","i","k F(xr)","Since in the boosting step we induce a decision tree to fit the negative gradient, we can see that the feature induction algorithm is trying to increase the scores of phrases that occur in better hypotheses (the first hypothesis in each pair), and it increases the scores more if weaker hypotheses have higher advantage; it is also trying to decrease the scores of phrases in weaker hypotheses that are currently receiving high scores. 411"]}],"references":[{"authors":[{"first":"Leo","last":"Breiman"},{"first":"Jerome","last":"Friedman"},{"first":"Charles","middle":"J.","last":"Stone"},{"first":"R.","middle":"A.","last":"Olshen"}],"year":"1984","title":"Classification and Regression Trees","source":"Leo Breiman, Jerome Friedman, Charles J. Stone, and R.A. Olshen. 1984. Classification and Regression Trees. Chapman and Hall."},{"authors":[{"first":"Chris","last":"Burges"},{"first":"Tal","last":"Shaked"},{"first":"Erin","last":"Renshaw"},{"first":"Matt","last":"Deeds"},{"first":"Nicole","last":"Hamilton"},{"first":"Greg","last":"Hullender"}],"year":"2005","title":"Learn-ing to rank using gradient descent","source":"Chris Burges, Tal Shaked, Erin Renshaw, Matt Deeds, Nicole Hamilton, and Greg Hullender. 2005. Learn-ing to rank using gradient descent. In ICML."},{"authors":[{"first":"Colin","last":"Cherry"},{"first":"George","last":"Foster"}],"year":"2012","title":"Batch tuning strategies for statistical machine translation","source":"Colin Cherry and George Foster. 2012. Batch tuning strategies for statistical machine translation. In HLT-NAACL."},{"authors":[{"first":"David","last":"Chiang"},{"first":"Steve","last":"DeNeefe"},{"first":"Yee","middle":"Seng","last":"Chan"},{"first":"Hwee","middle":"Tou","last":"Ng"}],"year":"2008a","title":"Decomposability of translation metrics for improved evaluation and efficient algorithms","source":"David Chiang, Steve DeNeefe, Yee Seng Chan, and Hwee Tou Ng. 2008a. Decomposability of translation metrics for improved evaluation and efficient algorithms. In EMNLP."},{"authors":[{"first":"David","last":"Chiang"},{"first":"Yuval","last":"Marton"},{"first":"Philp","last":"Resnik"}],"year":"2008b","title":"Online large margin training of syntactic and structural translation features","source":"David Chiang, Yuval Marton, and Philp Resnik. 2008b. Online large margin training of syntactic and structural translation features. In EMNLP."},{"authors":[{"first":"D.","last":"Chiang"},{"first":"W.","last":"Wang"},{"first":"K.","last":"Knight"}],"year":"2009","title":"11,001 new features for statistical machine translation","source":"D. Chiang, W. Wang, and K. Knight. 2009. 11,001 new features for statistical machine translation. In NAACL."},{"authors":[{"first":"Jonathan","last":"Clark"},{"first":"Alon","last":"Lavie"},{"first":"Chris","last":"Dyer"}],"year":"2012","title":"One system, many domains: Open-domain statistical machine translation via feature augmentation","source":"Jonathan Clark, Alon Lavie, and Chris Dyer. 2012. One system, many domains: Open-domain statistical machine translation via feature augmentation. In AMTA."},{"authors":[{"first":"Hal","last":"Daumé III"},{"first":"Jagadeesh","last":"Jagarlamudi"}],"year":"2011","title":"Domain adaptation for machine translation by mining unseen words","source":"Hal Daumé III and Jagadeesh Jagarlamudi. 2011. Domain adaptation for machine translation by mining unseen words. In ACL."},{"authors":[{"first":"Jerome","middle":"H.","last":"Friedman"}],"year":"2000","title":"Greedy function approximation: A gradient boosting machine","source":"Jerome H. Friedman. 2000. Greedy function approximation: A gradient boosting machine. Annals of Statistics, 29:1189–1232."},{"authors":[{"first":"Mark","last":"Hopkins"},{"first":"Jonathan","last":"May"}],"year":"2011","title":"Tuning as ranking","source":"Mark Hopkins and Jonathan May. 2011. Tuning as ranking. In EMNLP."},{"authors":[{"first":"Patrick","last":"Nguyen"},{"first":"Milind","last":"Mahajan"},{"first":"Xiaodong","last":"He"}],"year":"2007","title":"Training non-parametric features for statistical machine translation","source":"Patrick Nguyen, Milind Mahajan, and Xiaodong He. 2007. Training non-parametric features for statistical machine translation. In Second Workshop on Statistical Machine Translation."},{"authors":[{"first":"Franz","middle":"Josef","last":"Och"},{"first":"Hermann","last":"Ney"}],"year":"2002","title":"Discriminative training and maximum entropy models for statistical machine translation","source":"Franz Josef Och and Hermann Ney. 2002. Discriminative training and maximum entropy models for statistical machine translation. In ACL."},{"authors":[{"first":"Kishore","last":"Papineni"},{"first":"Salim","last":"Roukos"},{"first":"Todd","last":"Ward"},{"first":"Wei-Jing","last":"Zhu"}],"year":"2002","title":"BLEU: a method for automatic evaluation of machine translation","source":"Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing Zhu. 2002. BLEU: a method for automatic evaluation of machine translation. In ACL."},{"authors":[{"last":"TaroWatanabe"},{"first":"Jun","last":"Suzuki"},{"first":"Hajime","last":"Tsukuda"},{"first":"Hideki","last":"Isozaki"}],"year":"2007","title":"Online large-margin training for statistical machine translation","source":"TaroWatanabe, Jun Suzuki, Hajime Tsukuda, and Hideki Isozaki. 2007. Online large-margin training for statistical machine translation. In EMNLP. 410"},{"authors":[{"first":"Qiang","last":"Wu"},{"first":"Christopher","middle":"J.","last":"Burges"},{"first":"Krysta","middle":"M.","last":"Svore"},{"first":"Jianfeng","last":"Gao"}],"year":"2010","title":"Adapting boosting for information retrieval measures","source":"Qiang Wu, Christopher J. Burges, Krysta M. Svore, and Jianfeng Gao. 2010. Adapting boosting for information retrieval measures. Information Retrieval, 13(3), June."}],"cites":[{"style":0,"text":"Friedman, 2000","origin":{"pointer":"/sections/4/paragraphs/0","offset":376,"length":14},"authors":[{"last":"Friedman"}],"year":"2000","references":["/references/8"]},{"style":0,"text":"Och and Ney, 2002","origin":{"pointer":"/sections/5/paragraphs/0","offset":42,"length":17},"authors":[{"last":"Och"},{"last":"Ney"}],"year":"2002","references":["/references/11"]},{"style":0,"text":"TaroWatanabe et al., 2007","origin":{"pointer":"/sections/5/paragraphs/0","offset":183,"length":25},"authors":[{"last":"TaroWatanabe"},{"last":"al."}],"year":"2007","references":["/references/13"]},{"style":0,"text":"Chiang et al., 2009","origin":{"pointer":"/sections/5/paragraphs/0","offset":210,"length":19},"authors":[{"last":"Chiang"},{"last":"al."}],"year":"2009","references":["/references/5"]},{"style":0,"text":"Chiang et al., 2008b","origin":{"pointer":"/sections/5/paragraphs/0","offset":261,"length":20},"authors":[{"last":"Chiang"},{"last":"al."}],"year":"2008b","references":["/references/4"]},{"style":0,"text":"Hopkins and May, 2011","origin":{"pointer":"/sections/5/paragraphs/0","offset":283,"length":21},"authors":[{"last":"Hopkins"},{"last":"May"}],"year":"2011","references":["/references/9"]},{"style":0,"text":"Cherry and Foster, 2012","origin":{"pointer":"/sections/5/paragraphs/0","offset":306,"length":23},"authors":[{"last":"Cherry"},{"last":"Foster"}],"year":"2012","references":["/references/2"]},{"style":0,"text":"Daumé III and Jagarlamudi, 2011","origin":{"pointer":"/sections/5/paragraphs/0","offset":609,"length":31},"authors":[{"last":"Daumé III"},{"last":"Jagarlamudi"}],"year":"2011","references":["/references/7"]},{"style":0,"text":"Clark et al., 2012","origin":{"pointer":"/sections/5/paragraphs/0","offset":642,"length":18},"authors":[{"last":"Clark"},{"last":"al."}],"year":"2012","references":["/references/6"]},{"style":0,"text":"Burges et al., 2005","origin":{"pointer":"/sections/5/paragraphs/0","offset":796,"length":19},"authors":[{"last":"Burges"},{"last":"al."}],"year":"2005","references":["/references/1"]},{"style":0,"text":"Research et al., 2010","origin":{"pointer":"/sections/5/paragraphs/2","offset":72,"length":21},"authors":[{"last":"Research"},{"last":"al."}],"year":"2010","references":[]},{"style":0,"text":"Nguyen et al., 2007","origin":{"pointer":"/sections/5/paragraphs/3","offset":83,"length":19},"authors":[{"last":"Nguyen"},{"last":"al."}],"year":"2007","references":["/references/10"]},{"style":0,"text":"Friedman (2000)","origin":{"pointer":"/sections/5/paragraphs/3","offset":509,"length":15},"authors":[{"last":"Friedman"}],"year":"2000","references":["/references/8"]},{"style":0,"text":"Hopkins and May, 2011","origin":{"pointer":"/sections/5/paragraphs/3","offset":767,"length":21},"authors":[{"last":"Hopkins"},{"last":"May"}],"year":"2011","references":["/references/9"]},{"style":0,"text":"Wu et al., 2010","origin":{"pointer":"/sections/5/paragraphs/4","offset":268,"length":15},"authors":[{"last":"Wu"},{"last":"al."}],"year":"2010","references":["/references/14"]},{"style":0,"text":"Friedman, 2000","origin":{"pointer":"/sections/6/paragraphs/4","offset":184,"length":14},"authors":[{"last":"Friedman"}],"year":"2000","references":["/references/8"]},{"style":0,"text":"Hopkins and May, 2011","origin":{"pointer":"/sections/6/paragraphs/4","offset":1468,"length":21},"authors":[{"last":"Hopkins"},{"last":"May"}],"year":"2011","references":["/references/9"]},{"style":0,"text":"Hopkins and May, 2011","origin":{"pointer":"/sections/6/paragraphs/28","offset":49,"length":21},"authors":[{"last":"Hopkins"},{"last":"May"}],"year":"2011","references":["/references/9"]},{"style":0,"text":"Breiman et al., 1984","origin":{"pointer":"/sections/6/paragraphs/31","offset":728,"length":20},"authors":[{"last":"Breiman"},{"last":"al."}],"year":"1984","references":["/references/0"]},{"style":0,"text":"Chiang et al., 2008a","origin":{"pointer":"/sections/7/paragraphs/0","offset":1259,"length":20},"authors":[{"last":"Chiang"},{"last":"al."}],"year":"2008a","references":["/references/3"]},{"style":0,"text":"Papineni et al., 2002","origin":{"pointer":"/sections/7/paragraphs/0","offset":1309,"length":21},"authors":[{"last":"Papineni"},{"last":"al."}],"year":"2002","references":["/references/12"]},{"style":0,"text":"Chiang et al. (2008a)","origin":{"pointer":"/sections/7/paragraphs/0","offset":1500,"length":21},"authors":[{"last":"Chiang"},{"last":"al."}],"year":"2008a","references":["/references/3"]}]}
