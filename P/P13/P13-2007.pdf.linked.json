{"sections":[{"title":"","paragraphs":["Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 35–40, Sofia, Bulgaria, August 4-9 2013. c⃝2013 Association for Computational Linguistics"]},{"title":"Natural Language Models for Predicting Programming Comments Dana Movshovitz-Attias Computer Science Department Carnegie Mellon University dma@cs.cmu.edu William W. Cohen Computer Science Department Carnegie Mellon University wcohen@cs.cmu.edu Abstract","paragraphs":["Statistical language models have successfully been used to describe and analyze natural language documents. Recent work applying language models to programming languages is focused on the task of predicting code, while mainly ignoring the prediction of programmer comments. In this work, we predict comments from JAVA source files of open source projects, using topic models and n-grams, and we analyze the performance of the models given varying amounts of background data on the project being predicted. We evaluate models on their comment-completion capability in a setting similar to code-completion tools built into standard code editors, and show that using a comment completion tool can save up to 47% of the comment typing."]},{"title":"1 Introduction and Related Work","paragraphs":["Statistical language models have traditionally been used to describe and analyze natural language documents. Recently, software engineer-ing researchers have adopted the use of language models for modeling software code. Hindle et al. (2012) observe that, as code is created by humans it is likely to be repetitive and predictable, similar to natural language. NLP models have thus been used for a variety of software development tasks such as code token completion (Han et al., 2009; Jacob and Tairas, 2010), analysis of names in code (Lawrie et al., 2006; Binkley et al., 2011) and mining software repositories (Gabel and Su, 2008).","An important part of software programming and maintenance lies in documentation, which may come in the form of tutorials describing the code, or inline comments provided by the programmer. The documentation provides a high level description of the task performed by the code, and may include examples of use-cases for specific code segments or identifiers such as classes, methods and variables. Well documented code is easier to read and maintain in the long-run but writing comments is a laborious task that is often overlooked or at least postponed by many programmers.","Code commenting not only provides a summarization of the conceptual idea behind the code (Sridhara et al., 2010), but can also be viewed as a form of document expansion where the comment contains significant terms relevant to the described code. Accurately predicted comment words can therefore be used for a variety of linguistic uses including improved search over code bases using natural language queries, code categorization, and locating parts of the code that are relevant to a specific topic or idea (Tseng and Juang, 2003; Wan et al., 2007; Kumar and Carterette, 2013; Shepherd et al., 2007; Rastkar et al., 2011). A related and well studied NLP task is that of predicting natural language caption and commentary for images and videos (Blei and Jordan, 2003; Feng and Lapata, 2010; Feng and Lapata, 2013; Wu and Li, 2011).","In this work, our goal is to apply statistical language models for predicting class comments. We show that n-gram models are extremely successful in this task, and can lead to a saving of up to 47% in comment typing. This is expected as n-grams have been shown as a strong model for language and speech prediction that is hard to improve upon (Rosenfeld, 2000). In some cases however, for example in a document expansion task, we wish to extract important terms relevant to the code regardless of local syntactic dependencies. We hence also evaluate the use of LDA (Blei et al., 2003) and link-LDA (Erosheva et al., 2004) topic models, which are more relevant for the term extraction scenario. We find that the topic model performance can be improved by distinguishing code and text tokens in the code. 35"]},{"title":"2 Method 2.1 Models","paragraphs":["We train n-gram models (n = 1, 2, 3) over source code documents containing sequences of combined code and text tokens from multiple training datasets (described below). We use the Berkeley Language Model package (Pauls and Klein, 2011) with absolute discounting (Kneser-Ney smooth-ing; (1995)) which includes a backoff strategy to lower-order n-grams. Next, we use LDA topic models (Blei et al., 2003) trained on the same data, with 1, 5, 10 and 20 topics. The joint distribution of a topic mixture θ, and a set of N topics z, for a single source code document with N observed word tokens, d = {wi}N","i=1, given the Dirichlet parameters α and β, is therefore p(θ, z, w|α, β) = (1) p(θ|α) ∏ w p(z|θ)p(w|z, β) Under the models described so far, there is no distinction between text and code tokens.","Finally, we consider documents as having a mixed membership of two entity types, code and text tokens, d = ({wcode","i }Cn","i=1, {wtext","i }Tn","i=1), where the text words are tokens from comment and string literals, and the code words include the programming language syntax tokens (e.g., public, private, for, etc’ ) and all identifiers. In this case, we train link-LDA models (Erosheva et al., 2004) with 1, 5, 10 and 20 topics. Under the link-LDA model, the mixed-membership joint distribution of a topic mixture, words and topics is then p(θ, z, w|α, β) = p(θ|α)· (2) ∏ wtext","p(ztext","|θ)p(wtext","|ztext",", β)· ∏ wcode","p(zcode","|θ)p(wcode","|zcode",", β) where θ is the joint topic distribution, w is the set of observed document words, ztext","is a topic associated with a text word, and zcode","a topic associated with a code word.","The LDA and link-LDA models use Gibbs sampling (Griffiths and Steyvers, 2004) for topic inference, based on the implementation of Balasubramanyan and Cohen (2011) with single or multiple entities per document, respectively. 2.2 Testing Methodology Our goal is to predict the tokens of the JAVA class comment (the one preceding the class definition) in each of the test files. Each of the models described above assigns a probability to the next comment token. In the case of n-grams, the probability of a token word wi is given by considering previous words p(wi|wi−1, . . . , w0). This probability is estimated given the previous n − 1 tokens as p(wi|wi−1, . . . , wi−(n−1)).","For the topic models, we separate the document tokens into the class definition and the comment we wish to predict. The set of tokens of the class comment wc",", are all considered as text tokens. The rest of the tokens in the document wr",", are considered to be the class definition, and they may contain both code and text tokens (from string literals and other comments in the source file). We then compute the posterior probability of document topics by solving the following inference problem conditioned on the wr","tokens","p(θ, zr","|wr",", α, β) = p(θ, zr",", wr","|α, β)","p(wr","|α, β) (3) This gives us an estimate of the document distribution, θ, with which we infer the probability of the comment tokens as","p(wc","|θ, β) = ∑ z","p(wc |z, β)p(z|θ) (4)","Following Blei et al. (2003), for the case of a single entity LDA, the inference problem from equation (3) can be solved by considering p(θ, z, w|α, β), as in equation (1), and by taking the marginal distribution of the document tokens as a continuous mixture distribution for the set w = wr",", by integrating over θ and summing over the set of topics z p(w|α, β) = ∫ p(θ|α)· (5)","( ∏ w ∑ z p(z|θ)p(w|z, β) ) dθ For the case of link-LDA where the document is comprised of two entities, in our case code tokens and text tokens, we can consider the mixed-membership joint distribution θ, as in equation (2), and similarly the marginal distribution p(w|α, β) over both code and text tokens from wr",". Since comment words in wc","are all considered as text tokens they are sampled using text topics, namely ztext",", in equation (4). 36"]},{"title":"3 Experimental Settings 3.1 Data and Training Methodology","paragraphs":["We use source code from nine open source JAVA projects: Ant, Cassandra, Log4j, Maven, Minor-Third, Batik, Lucene, Xalan and Xerces. For each project, we divide the source files into a training and testing dataset. Then, for each project in turn, we consider the following three main training scenarios, leading to using three training datasets.","To emulate a scenario in which we are predicting comments in the middle of project development, we can use data (documented code) from the same project. In this case, we use the in-project training dataset (IN). Alternatively, if we train a comment prediction model at the beginning of the development, we need to use source files from other, possibly related projects. To analyze this scenario, for each of the projects above we train models using an out-of-project dataset (OUT) containing data from the other eight projects.","Typically, source code files contain a greater amount of code versus comment text. Since we are interested in predicting comments, we consider a third training data source which contains more English text as well as some code segments. We use data from the popular Q&A website StackOverflow (SO) where users ask and answer technical questions about software development, tools, algorithms, etc’. We downloaded a dataset of all actions performed on the site since it was launched in August 2008 until August 2012. The data includes 3,453,742 questions and 6,858,133 answers posted by 1,295,620 users. We used only posts that are tagged as JAVA related questions and answers.","All the models for each project are then tested on the testing set of that project. We report results averaged over all projects in Table 1.","Source files were tokenized using the Eclipse JDT compiler tools, separating code tokens and identifiers. Identifier names (of classes, methods and variables), were further tokenized by camel case notation (e.g., ’minMargin’ was converted to ’min margin’). Non alpha-numeric tokens (e.g., dot, semicolon) were discarded from the code, as well as numeric and single character literals. Text from comments or any string literals within the code were further tokenized with the Mallet statistical natural language processing package (Mc-Callum, 2002). Posts from SO were parsed using the Apache Tika toolkit1","and then tokenized with the Mallet package. We considered as raw code tokens anything labeled using a <code> markup (as indicated by the SO users who wrote the post). 3.2 Evaluation Since our models are trained using various data sources the vocabularies used by each of them are different, making the comment likelihood given by each model incomparable due to different sets of out-of-vocabulary tokens. We thus evaluate models using a character saving metric which aims at quantifying the percentage of characters that can be saved by using the model in a word-completion settings, similar to standard code completion tools built into code editors. For a comment word with n characters, w = w1, . . . , wn, we predict the two most likely words given each model filtered by the first 0, . . . , n characters of w. Let k be the minimal ki for which w is in the top two predicted word tokens where tokens are filtered by the first ki characters. Then, the number of saved characters for w is n − k. In Table 1 we report the average percentage of saved characters per comment using each of the above models. The final results are also averaged over the nine input projects. As an example, in the predicted comment shown in Table 2, taken from the project Minor-Third, the token entity is the most likely token according to the model SO trigram, out of tokens starting with the prefix ’en’. The saved characters in this case are ’tity’."]},{"title":"4 Results","paragraphs":["Table 1 displays the average percentage of characters saved per class comment using each of the models. Models trained on in-project data (IN) perform significantly better than those trained on another data source, regardless of the model type, with an average saving of 47.1% characters using a trigram model. This is expected, as files from the same project are likely to contain similar comments, and identifier names that appear in the comment of one class may appear in the code of another class in the same project. Clearly, in-project data should be used when available as it improves comment prediction leading to an average increase of between 6% for the worst model (26.6 for OUT unigram versus 33.05 for IN) and 14% for the best (32.96 for OUT trigram versus 47.1 for IN). 1 http://tika.apache.org/ 37 Model n-gram LDA Link-LDA n / topics 1 2 3 20 10 5 1 20 10 5 1","IN 33.05 43.27 47.1 34.20 33.93 33.63 33.05 35.76 35.81 35.37 34.59 (3.62) (5.79) (6.87) (3.63) (3.67) (3.67) (3.62) (3.95) (4.12) (3.98) (3.92)","OUT 26.6 31.52 32.96 26.79 26.8 26.86 26.6 28.03 28 28 27.82 (3.37) (4.17) (4.33) (3.26) (3.36) (3.44) (3.37) (3.60) (3.56) (3.67) (3.62)","SO 27.8 33.29 34.56 27.25 27.22 27.34 27.8 28.08 28.12 27.94 27.9 (3.51) (4.40) (4.78) (3.67) (3.44) (3.55) (3.51) (3.48) (3.58) (3.56) (3.45) Table 1: Average percentage of characters saved per comment using n-gram, LDA and link-LDA models trained on three training sets: IN, OUT, and SO. The results are averaged over nine JAVA projects (with standard deviations in parenthesis). Model Predicted Comment IN trigram “Train a named-entity extractor“ IN link-LDA “Train a named-entity extractor“ OUT trigram “Train a named-entity extractor“ SO trigram “Train a named-entity extractor“ Table 2: Sample comment from the Minor-Third project predicted using IN, OUT and SO based models. Saved characters are underlined.","Of the out-of-project data sources, models using a greater amount of text (SO) mostly out-performed models based on more code (OUT). This increase in performance, however, comes at a cost of greater run-time due to the larger word dictionary associated with the SO data. Note that in the scope of this work we did not investigate the contribution of each of the background projects used in OUT, and how their relevance to the target prediction project effects their performance.","The trigram model shows the best performance across all training data sources (47% for IN, 32% for OUT and 34% for SO). Amongst the tested topic models, link-LDA models which distinguish code and text tokens perform consistently better than simple LDA models in which all tokens are considered as text. We did not however find a correlation between the number of latent topics learned by a topic model and its performance. In fact, for each of the data sources, a different number of topics gave the optimal character saving results.","Note that in this work, all topic models are based on unigram tokens, therefore their results are most comparable with that of the unigram in Dataset n-gram link-LDA IN 2778.35 574.34 OUT 1865.67 670.34 SO 1898.43 638.55 Table 3: Average words per project for which each tested model completes the word better than the other. This indicates that each of the models is better at predicting a different set of comment words. Table 1, which does not benefit from the backoff strategy used by the bigram and trigram models. By this comparison, the link-LDA topic model proves more successful in the comment prediction task than the simpler models which do not distinguish code and text tokens. Using n-grams without backoff leads to results significantly worse than any of the presented models (not shown).","Table 2 shows a sample comment segment for which words were predicted using trigram models from all training sources and an in-project link-LDA. The comment is taken from the TrainExtractor class in the Minor-Third project, a machine learning library for annotating and categorizing text. Both IN models show a clear advantage in completing the project-specific word Train, compared to models based on out-of-project data (OUT and SO). Interestingly, in this example the trigram is better at completing the term named-entity given the prefix named. However, the topic model is better at completing the word extractor which refers to the target class. This example indicates that each model type may be more successful in predicting different comment words, and that combining multiple models may be advantageous. 38 This can also be seen by the analysis in Table 3 where we compare the average number of words completed better by either the best n-gram or topic model given each training dataset. Again, while n-grams generally complete more words better, a considerable portion of the words is better completed using a topic model, further motivating a hybrid solution."]},{"title":"5 Conclusions","paragraphs":["We analyze the use of language models for predicting class comments for source file documents containing a mixture of code and text tokens. Our experiments demonstrate the effectiveness of using language models for comment completion, showing a saving of up to 47% of the comment characters. When available, using in-project training data proves significantly more successful than using out-of-project data. However, we find that when using out-of-project data, a dataset based on more words than code performs consistently better. The results also show that different models are better at predicting different comment words, which motivates a hybrid solution combining the advantages of multiple models."]},{"title":"Acknowledgments","paragraphs":["This research was supported by the NSF under grant CCF-1247088."]},{"title":"References","paragraphs":["Ramnath Balasubramanyan and William W Cohen. 2011. Block-lda: Jointly modeling entity-annotated text and entity-entity links. In Proceedings of the 7th SIAM International Conference on Data Mining.","Dave Binkley, Matthew Hearn, and Dawn Lawrie. 2011. Improving identifier informativeness using part of speech information. In Proc. of the Working Conference on Mining Software Repositories. ACM.","David M Blei and Michael I Jordan. 2003. Modeling annotated data. In Proceedings of the 26th annual international ACM SIGIR conference on Research and development in informaion retrieval. ACM.","David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent dirichlet allocation. Journal of Ma-chine Learning Research.","Elena Erosheva, Stephen Fienberg, and John Lafferty. 2004. Mixed-membership models of scientific publications. Proceedings of the National Academy of Sciences of the United States of America.","Yansong Feng and Mirella Lapata. 2010. How many words is a picture worth? automatic caption generation for news images. In Proc. of the 48th Annual Meeting of the Association for Computational Linguistics. Association for Computational Linguistics.","Yansong Feng and Mirella Lapata. 2013. Automatic caption generation for news images. IEEE transactions on pattern analysis and machine intelligence.","Mark Gabel and Zhendong Su. 2008. Javert: fully automatic mining of general temporal properties from dynamic traces. In Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering, pages 339–349. ACM.","Thomas L Griffiths and Mark Steyvers. 2004. Finding scientific topics. Proc. of the National Academy of Sciences of the United States of America.","Sangmok Han, David R Wallace, and Robert C Miller. 2009. Code completion from abbreviated input. In Automated Software Engineering, 2009. ASE’09. 24th IEEE/ACM International Conference on, pages 332–343. IEEE.","Abram Hindle, Earl T Barr, Zhendong Su, Mark Gabel, and Premkumar Devanbu. 2012. On the naturalness of software. In Software Engineering (ICSE), 2012 34th International Conference on. IEEE.","Ferosh Jacob and Robert Tairas. 2010. Code template inference using language models. In Proceedings of the 48th Annual Southeast Regional Conference. ACM.","Reinhard Kneser and Hermann Ney. 1995. Improved backing-off for m-gram language modeling. In Acoustics, Speech, and Signal Processing, 1995. ICASSP-95., volume 1, pages 181–184. IEEE.","Naveen Kumar and Benjamin Carterette. 2013. Time based feedback and query expansion for twitter search. In Advances in Information Retrieval, pages 734–737. Springer.","Dawn Lawrie, Christopher Morrell, Henry Feild, and David Binkley. 2006. Whats in a name? a study of identifiers. In Program Comprehension, 2006. ICPC 2006. 14th IEEE International Conference on, pages 3–12. IEEE.","Andrew Kachites McCallum. 2002. Mallet: A machine learning for language toolkit.","Adam Pauls and Dan Klein. 2011. Faster and smaller n-gram language models. In Proceedings of the 49th annual meeting of the Association for Computational Linguistics: Human Language Technologies, volume 1, pages 258–267.","Sarah Rastkar, Gail C Murphy, and Alexander WJ Bradley. 2011. Generating natural language summaries for crosscutting source code concerns. In Software Maintenance (ICSM), 2011 27th IEEE International Conference on, pages 103–112. IEEE. 39","Ronald Rosenfeld. 2000. Two decades of statistical language modeling: Where do we go from here? Proceedings of the IEEE, 88(8):1270–1278.","David Shepherd, Zachary P Fry, Emily Hill, Lori Pollock, and K Vijay-Shanker. 2007. Using natural language program analysis to locate and understand action-oriented concerns. In Proceedings of the 6th international conference on Aspect-oriented software development, pages 212–224. ACM.","Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K Vijay-Shanker. 2010. To-wards automatically generating summary comments for java methods. In Proceedings of the IEEE/ACM international conference on Automated software engineering, pages 43–52. ACM.","Yuen-Hsien Tseng and Da-Wei Juang. 2003. Document-self expansion for text categorization. In Proceedings of the 26th annual international ACM SIGIR conference on Research and development in informaion retrieval, pages 399–400. ACM.","Xiaojun Wan, Jianwu Yang, and Jianguo Xiao. 2007. Single document summarization with document expansion. In Proc. of the National Conference on Artificial Intelligence. Menlo Park, CA; Cambridge, MA; London; AAAI Press; MIT Press; 1999.","Roung-Shiunn Wu and Po-Chun Li. 2011. Video annotation using hierarchical dirichlet process mixture model. Expert Systems with Applications, 38(4):3040–3048. 40"]}],"references":[{"authors":[{"first":"Ramnath","last":"Balasubramanyan"},{"first":"William","middle":"W","last":"Cohen"}],"year":"2011","title":"Block-lda: Jointly modeling entity-annotated text and entity-entity links","source":"Ramnath Balasubramanyan and William W Cohen. 2011. Block-lda: Jointly modeling entity-annotated text and entity-entity links. In Proceedings of the 7th SIAM International Conference on Data Mining."},{"authors":[{"first":"Dave","last":"Binkley"},{"first":"Matthew","last":"Hearn"},{"first":"Dawn","last":"Lawrie"}],"year":"2011","title":"Improving identifier informativeness using part of speech information","source":"Dave Binkley, Matthew Hearn, and Dawn Lawrie. 2011. Improving identifier informativeness using part of speech information. In Proc. of the Working Conference on Mining Software Repositories. ACM."},{"authors":[{"first":"David","middle":"M","last":"Blei"},{"first":"Michael I","last":"Jordan"}],"year":"2003","title":"Modeling annotated data","source":"David M Blei and Michael I Jordan. 2003. Modeling annotated data. In Proceedings of the 26th annual international ACM SIGIR conference on Research and development in informaion retrieval. ACM."},{"authors":[{"first":"David","middle":"M","last":"Blei"},{"first":"Andrew","middle":"Y","last":"Ng"},{"first":"Michael I","last":"Jordan"}],"year":"2003","title":"Latent dirichlet allocation","source":"David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent dirichlet allocation. Journal of Ma-chine Learning Research."},{"authors":[{"first":"Elena","last":"Erosheva"},{"first":"Stephen","last":"Fienberg"},{"first":"John","last":"Lafferty"}],"year":"2004","title":"Mixed-membership models of scientific publications","source":"Elena Erosheva, Stephen Fienberg, and John Lafferty. 2004. Mixed-membership models of scientific publications. Proceedings of the National Academy of Sciences of the United States of America."},{"authors":[{"first":"Yansong","last":"Feng"},{"first":"Mirella","last":"Lapata"}],"year":"2010","title":"How many words is a picture worth? automatic caption generation for news images","source":"Yansong Feng and Mirella Lapata. 2010. How many words is a picture worth? automatic caption generation for news images. In Proc. of the 48th Annual Meeting of the Association for Computational Linguistics. Association for Computational Linguistics."},{"authors":[{"first":"Yansong","last":"Feng"},{"first":"Mirella","last":"Lapata"}],"year":"2013","title":"Automatic caption generation for news images","source":"Yansong Feng and Mirella Lapata. 2013. Automatic caption generation for news images. IEEE transactions on pattern analysis and machine intelligence."},{"authors":[{"first":"Mark","last":"Gabel"},{"first":"Zhendong","last":"Su"}],"year":"2008","title":"Javert: fully automatic mining of general temporal properties from dynamic traces","source":"Mark Gabel and Zhendong Su. 2008. Javert: fully automatic mining of general temporal properties from dynamic traces. In Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of software engineering, pages 339–349. ACM."},{"authors":[{"first":"Thomas","middle":"L","last":"Griffiths"},{"first":"Mark","last":"Steyvers"}],"year":"2004","title":"Finding scientific topics","source":"Thomas L Griffiths and Mark Steyvers. 2004. Finding scientific topics. Proc. of the National Academy of Sciences of the United States of America."},{"authors":[{"first":"Sangmok","last":"Han"},{"first":"David","middle":"R","last":"Wallace"},{"first":"Robert","middle":"C","last":"Miller"}],"year":"2009","title":"Code completion from abbreviated input","source":"Sangmok Han, David R Wallace, and Robert C Miller. 2009. Code completion from abbreviated input. In Automated Software Engineering, 2009. ASE’09. 24th IEEE/ACM International Conference on, pages 332–343. IEEE."},{"authors":[{"first":"Abram","last":"Hindle"},{"first":"Earl","middle":"T","last":"Barr"},{"first":"Zhendong","last":"Su"},{"first":"Mark","last":"Gabel"},{"first":"Premkumar","last":"Devanbu"}],"year":"2012","title":"On the naturalness of software","source":"Abram Hindle, Earl T Barr, Zhendong Su, Mark Gabel, and Premkumar Devanbu. 2012. On the naturalness of software. In Software Engineering (ICSE), 2012 34th International Conference on. IEEE."},{"authors":[{"first":"Ferosh","last":"Jacob"},{"first":"Robert","last":"Tairas"}],"year":"2010","title":"Code template inference using language models","source":"Ferosh Jacob and Robert Tairas. 2010. Code template inference using language models. In Proceedings of the 48th Annual Southeast Regional Conference. ACM."},{"authors":[{"first":"Reinhard","last":"Kneser"},{"first":"Hermann","last":"Ney"}],"year":"1995","title":"Improved backing-off for m-gram language modeling","source":"Reinhard Kneser and Hermann Ney. 1995. Improved backing-off for m-gram language modeling. In Acoustics, Speech, and Signal Processing, 1995. ICASSP-95., volume 1, pages 181–184. IEEE."},{"authors":[{"first":"Naveen","last":"Kumar"},{"first":"Benjamin","last":"Carterette"}],"year":"2013","title":"Time based feedback and query expansion for twitter search","source":"Naveen Kumar and Benjamin Carterette. 2013. Time based feedback and query expansion for twitter search. In Advances in Information Retrieval, pages 734–737. Springer."},{"authors":[{"first":"Dawn","last":"Lawrie"},{"first":"Christopher","last":"Morrell"},{"first":"Henry","last":"Feild"},{"first":"David","last":"Binkley"}],"year":"2006","title":"Whats in a name? a study of identifiers","source":"Dawn Lawrie, Christopher Morrell, Henry Feild, and David Binkley. 2006. Whats in a name? a study of identifiers. In Program Comprehension, 2006. ICPC 2006. 14th IEEE International Conference on, pages 3–12. IEEE."},{"authors":[{"first":"Andrew","middle":"Kachites","last":"McCallum"}],"year":"2002","title":"Mallet: A machine learning for language toolkit","source":"Andrew Kachites McCallum. 2002. Mallet: A machine learning for language toolkit."},{"authors":[{"first":"Adam","last":"Pauls"},{"first":"Dan","last":"Klein"}],"year":"2011","title":"Faster and smaller n-gram language models","source":"Adam Pauls and Dan Klein. 2011. Faster and smaller n-gram language models. In Proceedings of the 49th annual meeting of the Association for Computational Linguistics: Human Language Technologies, volume 1, pages 258–267."},{"authors":[{"first":"Sarah","last":"Rastkar"},{"first":"Gail","middle":"C","last":"Murphy"},{"first":"Alexander","middle":"WJ","last":"Bradley"}],"year":"2011","title":"Generating natural language summaries for crosscutting source code concerns","source":"Sarah Rastkar, Gail C Murphy, and Alexander WJ Bradley. 2011. Generating natural language summaries for crosscutting source code concerns. In Software Maintenance (ICSM), 2011 27th IEEE International Conference on, pages 103–112. IEEE. 39"},{"authors":[{"first":"Ronald","last":"Rosenfeld"}],"year":"2000","title":"Two decades of statistical language modeling: Where do we go from here? Proceedings of the IEEE, 88(8):1270–1278","source":"Ronald Rosenfeld. 2000. Two decades of statistical language modeling: Where do we go from here? Proceedings of the IEEE, 88(8):1270–1278."},{"authors":[{"first":"David","last":"Shepherd"},{"first":"Zachary","middle":"P","last":"Fry"},{"first":"Emily","last":"Hill"},{"first":"Lori","last":"Pollock"},{"first":"K","last":"Vijay-Shanker"}],"year":"2007","title":"Using natural language program analysis to locate and understand action-oriented concerns","source":"David Shepherd, Zachary P Fry, Emily Hill, Lori Pollock, and K Vijay-Shanker. 2007. Using natural language program analysis to locate and understand action-oriented concerns. In Proceedings of the 6th international conference on Aspect-oriented software development, pages 212–224. ACM."},{"authors":[{"first":"Giriprasad","last":"Sridhara"},{"first":"Emily","last":"Hill"},{"first":"Divya","last":"Muppaneni"},{"first":"Lori","last":"Pollock"},{"first":"K","last":"Vijay-Shanker"}],"year":"2010","title":"To-wards automatically generating summary comments for java methods","source":"Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K Vijay-Shanker. 2010. To-wards automatically generating summary comments for java methods. In Proceedings of the IEEE/ACM international conference on Automated software engineering, pages 43–52. ACM."},{"authors":[{"first":"Yuen-Hsien","last":"Tseng"},{"first":"Da-Wei","last":"Juang"}],"year":"2003","title":"Document-self expansion for text categorization","source":"Yuen-Hsien Tseng and Da-Wei Juang. 2003. Document-self expansion for text categorization. In Proceedings of the 26th annual international ACM SIGIR conference on Research and development in informaion retrieval, pages 399–400. ACM."},{"authors":[{"first":"Xiaojun","last":"Wan"},{"first":"Jianwu","last":"Yang"},{"first":"Jianguo","last":"Xiao"}],"year":"2007","title":"Single document summarization with document expansion","source":"Xiaojun Wan, Jianwu Yang, and Jianguo Xiao. 2007. Single document summarization with document expansion. In Proc. of the National Conference on Artificial Intelligence. Menlo Park, CA; Cambridge, MA; London; AAAI Press; MIT Press; 1999."},{"authors":[{"first":"Roung-Shiunn","last":"Wu"},{"first":"Po-Chun","last":"Li"}],"year":"2011","title":"Video annotation using hierarchical dirichlet process mixture model","source":"Roung-Shiunn Wu and Po-Chun Li. 2011. Video annotation using hierarchical dirichlet process mixture model. Expert Systems with Applications, 38(4):3040–3048. 40"}],"cites":[{"style":0,"text":"Hindle et al. (2012)","origin":{"pointer":"/sections/2/paragraphs/0","offset":221,"length":20},"authors":[{"last":"Hindle"},{"last":"al."}],"year":"2012","references":["/references/10"]},{"style":0,"text":"Han et al., 2009","origin":{"pointer":"/sections/2/paragraphs/0","offset":467,"length":16},"authors":[{"last":"Han"},{"last":"al."}],"year":"2009","references":["/references/9"]},{"style":0,"text":"Jacob and Tairas, 2010","origin":{"pointer":"/sections/2/paragraphs/0","offset":485,"length":22},"authors":[{"last":"Jacob"},{"last":"Tairas"}],"year":"2010","references":["/references/11"]},{"style":0,"text":"Lawrie et al., 2006","origin":{"pointer":"/sections/2/paragraphs/0","offset":537,"length":19},"authors":[{"last":"Lawrie"},{"last":"al."}],"year":"2006","references":["/references/14"]},{"style":0,"text":"Binkley et al., 2011","origin":{"pointer":"/sections/2/paragraphs/0","offset":558,"length":20},"authors":[{"last":"Binkley"},{"last":"al."}],"year":"2011","references":["/references/1"]},{"style":0,"text":"Gabel and Su, 2008","origin":{"pointer":"/sections/2/paragraphs/0","offset":614,"length":18},"authors":[{"last":"Gabel"},{"last":"Su"}],"year":"2008","references":["/references/7"]},{"style":0,"text":"Sridhara et al., 2010","origin":{"pointer":"/sections/2/paragraphs/2","offset":90,"length":21},"authors":[{"last":"Sridhara"},{"last":"al."}],"year":"2010","references":["/references/20"]},{"style":0,"text":"Tseng and Juang, 2003","origin":{"pointer":"/sections/2/paragraphs/2","offset":509,"length":21},"authors":[{"last":"Tseng"},{"last":"Juang"}],"year":"2003","references":["/references/21"]},{"style":0,"text":"Wan et al., 2007","origin":{"pointer":"/sections/2/paragraphs/2","offset":532,"length":16},"authors":[{"last":"Wan"},{"last":"al."}],"year":"2007","references":["/references/22"]},{"style":0,"text":"Kumar and Carterette, 2013","origin":{"pointer":"/sections/2/paragraphs/2","offset":550,"length":26},"authors":[{"last":"Kumar"},{"last":"Carterette"}],"year":"2013","references":["/references/13"]},{"style":0,"text":"Shepherd et al., 2007","origin":{"pointer":"/sections/2/paragraphs/2","offset":578,"length":21},"authors":[{"last":"Shepherd"},{"last":"al."}],"year":"2007","references":["/references/19"]},{"style":0,"text":"Rastkar et al., 2011","origin":{"pointer":"/sections/2/paragraphs/2","offset":601,"length":20},"authors":[{"last":"Rastkar"},{"last":"al."}],"year":"2011","references":["/references/17"]},{"style":0,"text":"Blei and Jordan, 2003","origin":{"pointer":"/sections/2/paragraphs/2","offset":745,"length":21},"authors":[{"last":"Blei"},{"last":"Jordan"}],"year":"2003","references":["/references/2"]},{"style":0,"text":"Feng and Lapata, 2010","origin":{"pointer":"/sections/2/paragraphs/2","offset":768,"length":21},"authors":[{"last":"Feng"},{"last":"Lapata"}],"year":"2010","references":["/references/5"]},{"style":0,"text":"Feng and Lapata, 2013","origin":{"pointer":"/sections/2/paragraphs/2","offset":791,"length":21},"authors":[{"last":"Feng"},{"last":"Lapata"}],"year":"2013","references":["/references/6"]},{"style":0,"text":"Wu and Li, 2011","origin":{"pointer":"/sections/2/paragraphs/2","offset":814,"length":15},"authors":[{"last":"Wu"},{"last":"Li"}],"year":"2011","references":["/references/23"]},{"style":0,"text":"Rosenfeld, 2000","origin":{"pointer":"/sections/2/paragraphs/3","offset":344,"length":15},"authors":[{"last":"Rosenfeld"}],"year":"2000","references":["/references/18"]},{"style":0,"text":"Blei et al., 2003","origin":{"pointer":"/sections/2/paragraphs/3","offset":566,"length":17},"authors":[{"last":"Blei"},{"last":"al."}],"year":"2003","references":["/references/3"]},{"style":0,"text":"Erosheva et al., 2004","origin":{"pointer":"/sections/2/paragraphs/3","offset":599,"length":21},"authors":[{"last":"Erosheva"},{"last":"al."}],"year":"2004","references":["/references/4"]},{"style":0,"text":"Pauls and Klein, 2011","origin":{"pointer":"/sections/3/paragraphs/0","offset":213,"length":21},"authors":[{"last":"Pauls"},{"last":"Klein"}],"year":"2011","references":["/references/16"]},{"style":0,"text":"Blei et al., 2003","origin":{"pointer":"/sections/3/paragraphs/0","offset":383,"length":17},"authors":[{"last":"Blei"},{"last":"al."}],"year":"2003","references":["/references/3"]},{"style":0,"text":"Erosheva et al., 2004","origin":{"pointer":"/sections/3/paragraphs/6","offset":235,"length":21},"authors":[{"last":"Erosheva"},{"last":"al."}],"year":"2004","references":["/references/4"]},{"style":0,"text":"Griffiths and Steyvers, 2004","origin":{"pointer":"/sections/3/paragraphs/17","offset":48,"length":28},"authors":[{"last":"Griffiths"},{"last":"Steyvers"}],"year":"2004","references":["/references/8"]},{"style":0,"text":"Balasubramanyan and Cohen (2011)","origin":{"pointer":"/sections/3/paragraphs/17","offset":130,"length":32},"authors":[{"last":"Balasubramanyan"},{"last":"Cohen"}],"year":"2011","references":["/references/0"]},{"style":0,"text":"Blei et al. (2003)","origin":{"pointer":"/sections/3/paragraphs/32","offset":10,"length":18},"authors":[{"last":"Blei"},{"last":"al."}],"year":"2003","references":["/references/3"]},{"style":0,"text":"Mc-Callum, 2002","origin":{"pointer":"/sections/4/paragraphs/4","offset":531,"length":15},"authors":[{"last":"Mc-Callum"}],"year":"2002","references":[]}]}
