{"sections":[{"title":"","paragraphs":["Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 525–533, Uppsala, Sweden, 11-16 July 2010. c⃝2010 Association for Computational Linguistics"]},{"title":"Optimal rank reduction for Linear Context-Free Rewriting Systems with Fan-Out Two Benot Sagot INRIA & Université Paris 7 Le Chesnay, France benoit.sagot@inria.fr Giorgio Satta Department of Information Engineering University of Padua, Italy satta@dei.unipd.it Abstract","paragraphs":["Linear Context-Free Rewriting Systems (LCFRSs) are a grammar formalism capable of modeling discontinuous phrases. Many parsing applications use LCFRSs where the fan-out (a measure of the discontinuity of phrases) does not exceed 2. We present an efficient algorithm for optimal reduction of the length of production right-hand side in LCFRSs with fan-out at most 2. This results in asymptotical running time improvement for known parsing algorithms for this class."]},{"title":"1 Introduction","paragraphs":["Linear Context-Free Rewriting Systems (LCFRSs) have been introduced by Vijay-Shanker et al. (1987) for modeling the syntax of natural language. The formalism extends the generative capacity of context-free grammars, still remaining far below the class of context-sensitive grammars. An important feature of LCFRSs is their ability to generate discontinuous phrases. This has been recently exploited for modeling phrase structure treebanks with discontinuous constituents (Maier and Søgaard, 2008), as well as non-projective dependency treebanks (Kuhlmann and Satta, 2009).","The maximum number f of tuple components that can be generated by an LCFRS G is called the fan-out of G, and the maximum number r of nonterminals in the right-hand side of a production is called the rank of G. As an example, context-free grammars are LCFRSs with f = 1 and r given by the maximum length of a production right-hand side. Tree adjoining grammars (Joshi and Levy, 1977) can also be viewed as a special kind of LCFRS with f = 2, since each auxiliary tree generates two strings, and with r given by the maximum number of adjunction and substitution sites in an elementary tree. Beyond tree adjoining languages, LCFRSs with f = 2 can also generate languages in which pair of strings derived from different nonterminals appear in so-called crossing configurations. It has recently been observed that, in this way, LCFRSs with f = 2 can model the vast majority of data in discontinuous phrase structure treebanks and non-projective dependency treebanks (Maier and Lichte, 2009; Kuhlmann and Satta, 2009).","Under a theoretical perspective, the parsing problem for LCFRSs with f = 2 is NP-complete (Satta, 1992), and in known parsing algorithms the running time is exponentially affected by the rank r of the grammar. Nonetheless, in natural language parsing applications, it is possible to achieve efficient, polynomial parsing if we succeed in reducing the rank r (number of nonterminals in the right-hand side) of individual LCFRSs’ productions (Kuhlmann and Satta, 2009). This process is called production factorization. Pro-duction factorization is very similar to the reduction of a context-free grammar production into Chomsky normal form. However, in the LCFRS case some productions might not be reducible to r = 2, and the process stops at some larger value for r, which in the worst case might as well be the rank of the source production (Rambow and Satta, 1999).","Motivated by parsing efficiency, the factorization problem for LCFRSs with f = 2 has at-tracted the attention of many researchers in recent years. Most of the literature has been focusing on binarization algorithms, which attempt to find a reduction to r = 2 and return a failure if this is not possible. G ómez-Rodrı́guez et al. (2009) report a general binarization algorithm for LCFRS which, in the case of f = 2, works in time O(|p|7","), where |p| is the size of the input production. A more efficient binarization algorithm for the case f = 2 is presented in (G ómez-Rodrı́guez and Satta, 2009), working in time O(|p|). 525","In this paper we are interested in general factorization algorithms, i.e., algorithms that find factorizations with the smallest possible rank (not necessarily r = 2). We present a novel technique that solves the general factorization problem in time O(|p|2",") for LCFRSs with f = 2.","Strong generative equivalence results between LCFRS and other finite copying parallel rewriting systems have been discussed in (Weir, 1992) and in (Rambow and Satta, 1999). Through these equivalence results, we can transfer the factorization techniques presented in this article to other finite copying parallel rewriting systems."]},{"title":"2 LCFRSs","paragraphs":["In this section we introduce the basic notation for LCFRS and the notion of production factorization. 2.1 Definitions","Let ΣT be a finite alphabet of terminal symbols.","As usual, Σ ∗","T denotes the set of all finite strings","over ΣT , including the empty string ε. For in-","teger k ≥ 1, (Σ ∗","T )k","denotes the set of all tuples","(w1, . . . , wk) of strings wi ∈ Σ ∗","T . In what follows","we are interested in functions mapping several tu-","ples of strings in Σ ∗","T into tuples of strings in Σ ∗","T .","Let r and f be two integers, r ≥ 0 and f ≥ 1.","We say that a function g has rank r if there exist","integers fi ≥ 1, 1 ≤ i ≤ r, such that g is defined","on (Σ ∗","T )f1","× (Σ ∗","T )f2","× · · · × (Σ ∗","T )fr",". We also say","that g has fan-out f if the range of g is a subset of","(Σ ∗ T )f",". Let y","h, xij, 1 ≤ h ≤ f , 1 ≤ i ≤ r and 1 ≤ j ≤ fi, be string-valued variables. A function g as above is said to be linear regular if it is defined by an equation of the form g(⟨x11, . . . , x1f1 ⟩, . . . , ⟨xr1, . . . , xrfr ⟩) = = ⟨y1, . . . , yf ⟩, (1) where ⟨y1, . . . , yf ⟩ represents some grouping into f sequences of all and only the variables appear-ing in the left-hand side of (1) (without repetitions) along with some additional terminal symbols (with possible repetitions).","For a mathematical definition of LCFRS we refer the reader to (Weir, 1992, p. 137). Informally, in a LCFRS every nonterminal symbol A is associated with an integer φ(A) ≥ 1, called its fan-out, and it generates tuples in (Σ ∗","T )φ(A)",". Productions in a LCFRS have the form p : A → g(B1, B2, . . . , Bρ(p)),","where ρ(p) ≥ 0, A and Bi, 1 ≤ i ≤ ρ(p), are non-","terminal symbols, and g is a linear regular func-","tion having rank ρ(p) and fan-out φ(A), defined","on (Σ ∗","T )φ(B1)","× · · · × (Σ ∗","T )φ(Bρ(p))","and taking values in (Σ ∗","T )φ(A)",". The basic idea underlying the rewriting relation associated with LCFRS is that production p applies to any sequence of string tuples generated by the Bi’s, and provides a new string tuple in (Σ ∗","T )φ(A)","obtained through function g. We say that φ(p) = φ(A) is the fan-out of p, and ρ(p) is the rank of p.","Example 1 Let L be the language L =","{an","bn","am bm an","bn","am","bm","| n, m ≥ 1}. A LCFRS","generating L is defined by means of the nonter-","minals S, φ(S) = 1, and A, φ(A) = 2, and the","productions in figure 1. Observe that nonterminal","A generates all tuples of the form ⟨an","bn",", an","bn","⟩. ","Recognition and parsing for a given LCFRS can be carried out in polynomial time on the length of the input string. This is usually done by exploit-ing standard dynamic programming techniques; see for instance (Seki et al., 1991).1","However, the polynomial degree in the running time is a monotonically strictly increasing function that depends on both the rank and the fan-out of the productions in the grammar. To optimize running time, one can then recast the source grammar in such a way that the value of the above function is kept to a minimum. One way to achieve this is by factorizing the productions of a LCFRS, as we now explain. 2.2 Factorization Consider a LCFRS production of the form p : A → g(B1, B2, . . . , Bρ(p)), where g is specified as in (1). Let also C be a subset of {B1, B2, . . . , Bρ(p)} such that |C| ̸= 0 and |C| ̸= ρ(p). We let ΣC be the alphabet of all variables xij defined as in (1), for all values of i and j such that Bi ∈ C and 1 ≤ j ≤ fi. For each i with 1 ≤ i ≤ f , we rewrite each string yi in (1) in a form yi = y′","i0zi1y′","i1 · · · y′","idi−1 zidi y′","idi, with di ≥ 0, such that the following conditions are all met:","• each zij , 1 ≤ j ≤ di, is a string with one or more occurrences of variables, all in ΣC;","• each y′","ij, 1 ≤ j ≤ di − 1, is a non-empty string with no occurrences of symbols in ΣC; • y′","0j and y′","0di are (possibly empty) strings with no occurrences of symbols in ΣC. 1 In (Seki et al., 1991) a syntactic variant of LCFRS is","used, called multiple context-free grammars. 526 S → gS(A, A), gS(⟨x11, x12⟩, ⟨x21, x22⟩) = ⟨x11x21x12x22⟩; A → gA(A), gA(⟨x11, x12⟩) = ⟨ax11b, ax12b⟩; A → g′","A(), g′","A() = ⟨ab, ab⟩.","Figure 1: A LCFRS for language L = {an","bn","am","bm an","bn","am","bm","| n, m ≥ 1}. Let c = |C| and c = ρ(p) − |C|. Assume that","C = {Bh1 , . . . , Bhc}, and {B1, . . . , Bρ(p)} − C =","{Bh′ 1 , . . . , Bh′","c }. We introduce a fresh nonterminal C with φ(C) =","∑f","i=1 di and replace pro-","duction p in our grammar by means of the two","new productions p1 : C → g1(Bh1 , . . . , Bhc) and","p2 : A → g2(C, Bh′ 1 , . . . , Bh′","c ). Functions g1 and g2 are defined as:","g1(⟨xh11, . . . , xh1fh 1","⟩, . . . , ⟨xhc1, . . . , xhcfhc ⟩)","= ⟨z11, · · · , z1d1 , z21, · · · , zfdf ⟩;","g2(⟨xh′","11, . . . , xh′","1fh′","1","⟩, . . . , ⟨xh′","c1, . . . , xh′","cfh′","c ⟩)","= ⟨y′","10, . . . , y′ 1d1 , y′","20, . . . , y′","fdf ⟩. Note that productions p1 and p2 have rank strictly smaller than the source production p. Further-more, if it is possible to choose set C in such a way that","∑f","i=0 di ≤ f , then the fan-out of p1 and p2 will be no greater than the fan-out of p. We can iterate the procedure above as many times as possible, under the condition that the fan-out of the productions does not increase. Example 2 Let us consider the following production with rank 4:","A → gS(B, C, D, E), gA(⟨x11, x12⟩, ⟨x21, x22⟩, ⟨x31, x32⟩, ⟨x41, x42⟩)","= ⟨x11x21x31x41x12x42, x22x32⟩. Applyng the above procedure twice, we obtain a factorization consisting of three productions with rank 2 (variables have been renamed to reflect our conventions):","A → gA(A1, A2), gA(⟨x11, x12⟩, ⟨x21, x22⟩)","= ⟨x11x21x12, x22⟩;","A1 → gA1(B, E), gA1(⟨x11, x12⟩, ⟨x21, x22⟩) = ⟨x11, x21x12x22⟩;","A2 → gA2(C, D), gA2(⟨x11, x12⟩, ⟨x21, x22⟩) = ⟨x11x21, x12x22⟩. ","The factorization procedure above should be applied to all productions of a LCFRS with rank larger than two. This might result in an asymptotic improvement of the running time of existing dynamic programming algorithms for parsing based on LCFRS.","The factorization technique we have discussed can also be viewed as a generalization of well-known techniques for casting context-free grammars into binary forms. These are forms where no more than two nonterminal symbols are found in the right-hand side of productions of the grammar; see for instance (Harrison, 1978). One important difference is that, while production factorization into binary form is always possible in the context-free case, for LCFRS there are worst case grammars in which rank reduction is not possible at all, as shown in (Rambow and Satta, 1999)."]},{"title":"3 A graph-based representation for LCFRS productions","paragraphs":["Rather than factorizing LCFRS productions di-rectly, in this article we work with a more abstract representation of productions based on graphs. From now on we focus on LCFRS whose nonterminals and productions all have fan-out smaller than or equal to 2. Consider then a production p : A → g(B1, B2, . . . , Bρ(p)), with φ(A), φ(Bi) ≤ 2, 1 ≤ i ≤ ρ(p), and with g defined as","g(⟨x11, . . . , x1φ(B1)⟩, . . . . . . , ⟨xρ(p)1, . . . , xρ(p)φ(Bρ(p))⟩) = ⟨y1, . . . , yφ(A)⟩. In what follows, if φ(A) = 1 then ⟨y1, . . . , yφ(A)⟩ should be read as ⟨y1⟩ and y1 · · · yφ(A) should be read as y1. The same convention applies to all other nonterminals and tuples.","We now introduce a special kind of undirected graph that is associated with a linear order defined over the set of its vertices. The p-graph associated with production p is a triple (Vp, Ep, ≺p) such that • Vp = {xij | 1 ≤ i ≤ ρ(p), φ(Bi) = 2, 1 ≤","j ≤ φ(Bi)} is a set of vertices;2 2 Here we are overloading symbols xij. It will always be","clear from the context whether xij is a string-valued variable","or a vertex in a p-graph. 527","• Ep = {(xi1, xi2) | xi1, xi2 ∈ Vp} is a set of undirected edges;","• for x, x′ ∈ Vp, x ≺p x′","if x ̸= x′","and the","(unique) occurrence of x in y1 · · · yφ(A) pre-","cedes the (unique) occurrence of x′",". Note that in the above definition we are ignor-ing all string-valued variables xij associated with nonterminals Bi with φ(Bi) = 1. This is because nonterminals with fan-out one can always be treated as in the context-free grammar case, as it will be explained later. Example 3 The p-graph associated with the LCFRS production in Example 2 is shown in Figure 2. Circled sets of edges indicate the factorization in that example. x21 x31 x41x11 B CD E A1 A2 x42x12 x22 x32 Figure 2: The p-graph associated with the LCFRS production in Example 2.","We close this section by introducing some additional notation related to p-graphs that will be used throughout this paper. Let E ⊆ Ep be some set of edges. The cover set for E is defined as V (E) = {x | (x, x′",") ∈ E} (recall that our edges are unordered pairs, so (x, x′",") and (x′",", x) denote the same edge). Conversely, let V ⊆ Vp be some set of vertices. The incident set for V is defined as E(V ) = {(x, x′",") | (x, x′",") ∈ Ep, x ∈ V }.","Assume φ(p) = 2, and let x1, x2 ∈ Vp. If x1 and x2 do not occur both in the same string y1 or y2, then we say that there is a gap between x1 and x2. If x1 ≺p x2 and there is no gap between x1 and x2, then we write [x1, x2] to denote the set {x1, x2} ∪ {x | x ∈ Vp, x1 ≺p x ≺p x2}. For x ∈ Vp we also let [x, x] = {x}. A set [x, x′","] is called a range. Let r and r′","be two ranges. The pair (r, r′",") is called a tandem if the following conditions are both satisfied: (i) r ∪r′","is not a range, and (ii) there exists some edge (x, x′",") ∈ Ep with x ∈ r and x′","∈ r′",". Note that the first condition means that r and r′","are disjoint sets and, for any pair of vertices x ∈ r and x′","∈ r′",", either there is a gap between x and x′","or else there exists some xg ∈ Vp such that","x ≺p xg ≺p x′ and xg ̸∈ r ∪ r′",".","A set of edges E ⊆ Ep is called a bundle with fan-out one if V (E) = [x1, x2] for some x1, x2 ∈ Vp, i.e., V (E) is a range. Set E is called a bundle with fan-out two if V (E) = [x1, x2] ∪ [x3, x4] for some x1, x2, x3, x4 ∈ Vp, and ([x1, x2], [x3, x4]) is a tandem. Note that if E is a bundle with fan-out two with V (E) = [x1, x2] ∪ [x3, x4], then neither E([x1, x2]) nor E([x3, x4]) are bundles with fan-out one, since there is at least one edge incident upon a vertex in [x1, x2] and a vertex in [x3, x4]. We also use the term bundle to denote a bundle with fan-out either one or two.","Intuitively, in a p-graph associated with a LCFRS production p, a bundle E with fan-out f and with |E| > 1 identifies a set of nonterminals C in the right-hand side of p that can be factorized into a new production. The nonterminals in C are then replaced in p by a fresh nonterminal C with fan-out f , as already explained. Our factorization algorithm is based on efficient methods for the detection of bundles with fan-out one and two."]},{"title":"4 The algorithm","paragraphs":["In this section we provide an efficient, recursive algorithm for the decomposition of a p-graph into bundles, which corresponds to factorizing the represented LCFRS production. 4.1 Overview of the algorithm The basic idea underlying our graph-based algorithm can be described as follows. We want to compute an optimal hierarchical decomposition of an input bundle with fan-out 1 or 2. This decomposition can be represented by a tree, in which each node N corresponds to a bundle (the root node corresponds to the input bundle) and the daughters of N represent the bundles in which N is immediately decomposed. The decomposition is optimal in so far as the maximum arity of the decomposition tree is as small as possible. As already explained above, this decomposition represents a factorization of some production p of a LCFRS, resulting in optimal rank reduction. All the internal nodes in the decomposition represent fresh nonterminals that will be created during the factorization process.","The construction of the decomposition tree is carried out recursively. For a given bundle with fan-out 1 or 2, we apply a procedure for decomposing this bundle in its immediate sub-bundles with fan-out 1 or 2, in an optimal way. Then, 528 we recursively apply our procedure to the obtained sub-bundles. Recursion stops when we reach bundles containing only one edge (which correspond to the nonterminals in the right-hand side of the input production). We shall prove that the result is an optimal decomposition.","The procedure for computing an optimal decomposition of a bundle F into its immediate sub-bundles, which we describe in the first part of this section, can be sketched as follows. First, we identify and temporarily remove all maximal bundles with fan-out 1 (Section 4.3). The result is a new bundle F ′","which is a subset of the original bundle, and has the same fan-out. Next, we identify all sub-bundles with fan-out 2 in F ′","(Section 4.4). We compute the optimal decomposition of F ′",", rest-ing on the hypothesis that there are no sub-bundles with fan-out 1. Each resulting sub-bundle is later expanded with the maximal sub-bundles with fan-out 1 that have been previously removed. This results in a “first level” decomposition of the original bundle F . We then recursively decompose all individual sub-bundles of F , including the bundles with fan-out 1 that have been later attached. 4.2 Backward and forward quantities For a set V ⊆ Vp of vertices, we write max(V ) (resp. min(V )) the maximum (resp. minimum) vertex in V w.r.t. the ≺p total order.","Let r = [x1, x2] be a range. We write r.left = x1 and r.right = x2. The set of backward edges for r is defined as Br = {(x, x′",") | (x, x′",") ∈ Er, x ≺p r.left , x′","∈ r}. The set of forward edges for r is defined symmetrically as Fr = {(x, x′",") | (x, x′",") ∈ Er, x ∈ r, r.right ≺p x′ }. For E ∈ {Br, Fr} we also define L(E) = {x | (x, x′",") ∈ E, x ≺","p x′ } and R(E) =","{x′ | (x, x′",") ∈ E, x ≺","p x′","}.","Let us assume Br ̸= ∅. We write r.b.left = min(L(Br)). Intuitively, r.b.left is the leftmost vertex of the p-graph that is located at the left of range r and that is connected to some vertex in r through some edge. Similarly, we write r.b.right = max(L(Br)). If Br = ∅, then we set r.b.left = r.b.right = ⊥. Quantities r.b.left and r.b.right are called backward quantities.","We also introduce local backward quantities, defined as follows. We write r.lb.left = min(R(Br)). Intuitively, r.lb.left is the leftmost vertex among all those vertices in r that are connected to some vertex to the left of r. Similarly, we write r.lb.right = max(R(Br)). If Br = ∅, then we set r.lb.left = r.lb.right = ⊥.","We define forward and local forward quantities in a symmetrical way.","The backward quantities r.b.left and r.b.right and the local backward quantities r.lb.left and r.lb.right for all ranges r in the p-graph can be computed efficiently as follows. We process ranges in increasing order of size, expanding each range r by one unit at a time by adding a new vertex at its right. Backward and local backward quantities for the expanded range can be expressed as a function of the same quantities for r. Therefore if we store our quantities for previously processed ranges, each new range can be annotated with the desired quantities in constant time. This algorithm runs in time O(n2","), where n is the number of vertices in Vp. This is an optimal result, since O(n2",") is also the size of the output.","We compute in a similar way the forward quantities r.f .left and r.f .right and the local forward quantities r.lf .left and r.lf .right , this time expanding each range by one unit at its left. 4.3 Bundles with fan-out one The detection of bundles with fan-out 1 within the p-graph can be easily performed in O(n2","), where n is the number of its vertices. Indeed, the incident set E(r) of a range r is a bundle with fan-out one if and only if r.b.left = r.f .left = ⊥. This immediately follows from the definitions given in Section 4.2. It is therefore possible to check all ranges the one after the other, once the backward and forward properties have been computed. These checks take constant time for each of the Θ(n2",") ranges, hence the quadratic complexity.","We now remove from F all bundles with fan-out 1 from the original bundle F . The result is the new bundle F ′",", that has no sub-bundles with fan-out 1. 4.4 Bundles with fan-out two Efficient detection of bundles with fan-out two in F ′","is considerably more challenging. A direct generalization of the technique proposed for detecting bundles with fan-out 1 would use the following property, that is also a direct corollary of the definitions in Section 4.2: the incident set E(r ∪ r′",") of a tandem (r, r′",") is a bundle with fan-out two if and only if all of the following conditions hold: (i) r.b.left = r′",".f .left = ⊥, (ii) r.f .left ∈ r′",", r.f .right ∈ r′",", (iii) r′",".b.left ∈ r, r′",".b.right ∈ r. 529 However, checking all O(n4",") tandems the one after the other would require time O(n4","). Therefore, preserving the quadratic complexity of the overall algorithm requires a more complex representation.","From now on, we assume that Vp = {x1, . . . , xn}, and we write [i, j] as a shorthand for the range [xi, xj].","First, we need to compute an additional data structure that will store local backward figures in a convenient way. Let us define the expansion table T as follows: for a given range r′","= [i′",", j′","], T (r′",") is the set of all ranges r = [i, j] such that r.lb.lef t = i′","and r.lb.right = j′",", ordered by increasing left boundary i. It turns out that the construction of such a table can be achieved in time O(n2","). Moreover, it is possible to compute in O(n2",") an auxiliary table T ′","that associates with r the first range r′′","in T ([r.f.lef t, r.f.right]) such that r′′",".b.right ≥ r. Therefore, either (r, T ′","(r)) anchors a valid bundle, or there is no bundle E such that the first component of V (E) is r.","We now have all the pieces to extract bundles with fan-out 2 in time O(n2","). We proceed as follows. For each range r = [i, j]:","• We first retrieve r′","= [r.f.lef t, r.f.right] in constant time.","• Then, we check in constant time whether r′",".b.lef t lies within r. If it doesn’t, r is not the first part of a valid bundle with fan-out 2, and we move on to the next range r.","• Finally, for each r′′","in the ordered set T (r′","), starting with T ′","(r), we check whether r′′",".b.right is inside r. If it is not, we stop and move on to the next range r. If it is, we out-put the valid bundle (r, r′′",") and move on to the next element in T (r′","). Indeed, in case of a failure, the backward edge that relates a vertex in r′′","with a vertex outside r will still be included in all further elements in T (r′",") since T (r′",") is ordered by increasing left boundary. This step costs a constant time for each success, and a constant time for the unique failure, if any.","This algorithm spends a constant time on each range plus a constant time on each bundle with fan-out 2. We shall prove in Section 5 that there are O(n2",") bundles with fan-out 2. Therefore, this algorithm runs in time O(n2",").","Now that we have extracted all bundles, we need to extract an optimal decomposition of the input bundle F ′",", i.e., a minimal size partition of all n elements (edges) in the input bundle such that each of these partition is a bundle (with fan-out 2, since bundles with fan-out 1 are excluded, except for the input bundle). By definition, a partition has minimal size if there is no other partition it is a refinment of.3 4.5 Extracting an optimal decomposition We have constructed the set of all (fan-out 2) sub-bundles of F ′",". We now need to build one optimal decomposition of F ′","into sub-bundles. We need some more theoretical results on the properties of bundles. Lemma 1 Let E1 and E2 be two sub-bundles of F ′","(with fan-out 2) that have non-empty intersection, but that are not included the one in the other. Then E1 ∪ E2 is a bundle (with fan-out 2). PROOF This lemma can be proved by considering all possible respective positions of the covers of E1 and E2, and discarding all situations that would lead to the existence of a fan-out 1 sub-bundle. ■ Theorem 1 For any bundle E, either it has at least one binary decomposition, or all its decompositions are refinements of a unique optimal one. PROOF Let us suppose that E has no binary decomposition. Its cover corresponds to the tandem (r, r′",") = ([i, j], [i′",", j′","]). Let us consider two different decompositions of E, that correspond respectively to decompositions of the range r in two sets of sub-ranges of the form [i, k1], [k1 + 1, k2], . . . , [km, j] and [i, k′","1], [k′","1 + 1, k′","2], . . . , [k′","m′ , j]. For simplifying the notations, we write k0 = k′","0 = i and km+1 =","km′ +1 = j. Since k0 = k′","0, there exist an in-","dex p > 0 such that for any l < p, kl = k′","l, but kp ̸= k′","p: p is the index that identifies the first discrepancy between both decomposition. Since km+1 = km′","+1, there must exist q ≤ m and q′ ≤ m′","such that q and q′","are strictly greater than p and that are the minimal indexes such that kq = k′","q′ . By definition, all bundles of the form E[kl−1,kl] (p ≤ l ≤ q) have a non-empty intersection with at least one bundle of the form E[k′","l−1,k′","l]","3","The term “refinement” is used in the usual way concern-ing partitions, i.e., a partition P1 is a refinement of another one P2 if all constituents in P1 are constituents of P2, or be-longs to a subset of the partition P1 that is a partition of one element of P2. 530 (p ≤ l ≤ q′","). The reverse is true as well. Applying Lemma 1, this shows that E([kp+1, kq]) is a bundle with fan-out 2. Therefore, by replacing all ranges involved in this union in one decomposition or the other, we get a third decomposition for which the two initial ones are strict refinements. This is a contradiction, which concludes the proof. ■ Lemma 2 Let E = V (r ∪ r′",") be a bundle, with r = [i, j]. We suppose it has a unique (non-binary) optimal decomposition, which decomposes [i, j] into [i, k1], [k1 + 1, k2], . . . , [km, j]. There exist no range r′′","⊂ r such that (i) Er′′ is a bundle and (ii) ∃l, 1 ≤ l ≤ m such that [kl, kl+1] ⊂ r′′",". PROOF Let us consider a range r′′","that would contradict the lemma. The union of r′′","and of the ranges in the optimal decomposition that have a non-empty intersection with r′′","is a fan-out 2 bundle that includes at least two elements of the optimal decomposition, but that is strictly included in E because the decomposition is not binary. This is a contradiction. ■ Lemma 3 Let E = V (r, r′",") be a bundle, with r = [i, j]. We suppose it has a binary (optimal) decomposition (not necessarily unique). Let r′′","= [i, k] be the largest range starting in i such that k < j and such that it anchors a bundle, namely E(r′′","). Then E(r′′",") and E([k + 1, j]) form a binary decomposition of E. PROOF We need to prove that E([k + 1, j]) is a bundle. Each (optimal) binary decomposition of E decomposes r in 1, 2 or 3 sub-ranges. If no optimal decomposition decomposes r in at least 2 sub-ranges, then the proof given here can be adapted by reasoning on r′","instead of r. We now suppose that at least one of them decomposes r in at least 2 sub-ranges. Therefore, it decomposes r in [i, k1] and [k1 + 1, j] or in [i, k1], [k1 + 1, k2] and [k2 + 1, j]. We select one of these optimal decomposition by taking one such that k1 is maximal. We shall now distinguish between two cases.","First, let us suppose that r is decomposed into two sub-ranges [i, k1] and [k1 + 1, j] by the selected optimal decomposition. Obviously, E([i, k1]) is a “crossing” bundle, i.e., the right component of its cover is is a sub-range of r′",". Since r is decomposed in two sub-ranges, it is necessarily the same for r′",". Therefore, E([i, k1])","has a cover of the form [i, k1] ∪ [i′ , k′","1] or [i, k1] ∪","[k′","1 + 1, j]. Since r′′","includes [i, k1], E(r′′",") has a cover of the form [i, k]∪[i′",", k′","] or [i, k]∪[k′","+ 1, j]. This means that r′","is decomposed by E(r′′",") in only 2 ranges, namely the right component of E(r′′",")’s cover and another range, that we can call r′′′",". Since r \\ r′′","= [k + 1, j] may not anchor a bundle with fan-out 1, it must contain at least one crossing edge. All such edges necessarily fall within r′′′",". Conversely, any crossing edge that falls inside r′′′","necessarily has its other end inside [k + 1, j]. Which means that E(r′′",") and E(r′′′",") form a binary decomposition of E. Therefore, by definition of k1, k = k1.","Second, let us suppose that r is decomposed into 3 sub-ranges by the selected original decomposition (therefore, r′","is not decomposed by this decomposition). This means that this decomposition involves a bundle with a cover of the form [i, k1]∪[k2 + 1, j] and another bundle with a cover of the form [k1 + 1, k2] ∪ r′","(this bundle is in fact E(r′",")). If k ≥ k2, then the left range of both members of the original decomposition are included in r′′",", which means that E(r′′",") = E, and therefore r′′","= r which is excluded. Note that k is at least as large as k1 (since [i, k1] is a valid “range starting in i such that k < j and such that it anchors a bundle”). Therefore, we have k1 ≤ k < k2. Therefore, E([i, k1]) ⊂ E(r′′","), which means that all edges anchored inside [k2 + 1, j]) are included in E(r′′","). Hence, E(r′′",") can not be a crossing bundle without having a left component that is [i, j], which is excluded (it would mean E(r′′",") = E). This means that E(r′′",") is a bundle with a cover of the form [i, k] ∪ [k′","+ 1, j]. Which means that E(r′",") is in fact the bundle whose cover is [k + 1, k′","+ 1] ∪ r′",". Hence, E(r′′",") and E(r′",") form a binary decomposition of E. Hence, by definition of k1, k = k1. ■","As an immediate consequence of Lemmas 2 and 3, our algorithm for extracting the optimal decomposition for F ′","consists in applying the following procedure recursively, starting with F ′",", and repeating it on each constructed sub-bundle E, until sub-bundles with only one edge are reached.","Let E = E(r, r′",") be a bundle, with r = [i, j]. One optimal decomposition of E can be obtained as follows. One selects the bundle with a left component starting in i and with the maximum length, and iterating this selection process until r is covered. The same is done with r′",". We retain the optimal among both resulting decompositions (or one of them if they are both optimal). Note that this 531 decomposition is unique if and only if it has four components or more; it can not be ternary; it may be binary, and in this case it may be non-unique.","This algorithm gives us a way to extract an optimal decomposition of F ′","in linear time w.r.t. the number of sub-bundles in this optimal decomposition. The only required data structure is, for each i (resp. k), the list of bundles with a cover of the form [i, j] ∪ [k, l] ordered by decreasing j (resp. l). This can trivially be constructed in time O(n2",") from the list of all bundles we built in time O(n2",") in the previous section. Since the number of bundles is bounded by O(n2",") (as mentioned above and proved in Section 5), this means we can extract an optimal decomposition for F ′","in O(n2",").","Similar ideas apply to the simpler case of the decomposition of bundles with fan-out 1. 4.6 The main decomposition algorithm We now have to generalize our algorithm in order to handle the possible existence of fan-out 1 bundles. We achieve this by using the fan-out 2 algorithm recursively. First, we extract and remove (maximal) bundles with fan-out 1 from F , and recursively apply to each of them the complete algorithm. What remains is F ′",", which is a set of bundles with no sub-bundles with fan-out 1. This means we can apply the algorithm presented above. Then, for each bundle with fan-out 1, we group it with a randomly chosen adjacent bundle with fan-out 2, which builds an expanded bundle with fan-out 2, which has a binary decomposition into the original bundle with fan-out 2 and the bundle with fan-out 1."]},{"title":"5 Time complexity analysis","paragraphs":["In Section 4, we claimed that there are no more","than O(n2",") bundles. In this section we sketch the","proof of this result, which will prove the quadratic","time complexity of our algorithm. Let us compute an upper bound on the num-","ber of bundles with fan-out two that can be found","within the p-graph processed in Section 4.5, i.e., a","p-graph with no fan-out 1 sub-bundle. Let E, E′","⊆ Ep be bundles with fan-out two. If","E ⊂ E′",", then we say that E′","expands E. E′","is","said to immediately expand E, written E → E′",",","if E′","expands E and there is no bundle E′′","such","that E′′","expands E and E′","expands E′′",". Let us represent bundles and the associated im-","mediate expansion relation by means of a graph. Let E denote the set of all bundles (with fan-out two) in our p-graph. The e-graph associated with our LCFRS production p is the directed graph with vertices E and edges defined by the relation →. For E ∈ E, we let out (E) = {E′","| E → E′","} and in(E) = {E′","| E′","→ E}.","Lack of space prevents us from providing the proof of the following property. For any E ∈ E that contains more than one edge, |out (E)| ≤ 2 and |in(E)| ≥ 2. This allows us to prove our upper bound on the size of E. Theorem 2 The e-graph associated with an LCFRS production p has at most n2","vertices, where n is the rank of p. PROOF Consider the e-graph associated with production p, with set of vertices E. For a vertex E ∈ E, we define the level of E as the number |E| of edges in the corresponding bundle from the p-graph associated with p. Let d be the maximum level of a vertex in E. We thus have 1 ≤ d ≤ n. We now prove the following claim. For any integer k with 1 ≤ k ≤ d, the set of vertices in E with level k has no more than n elements.","For k = 1, since there are no more than n edges in such a p-graph, the statement holds.","We can now consider all vertices in E with level k > 1 (k ≤ d). Let E(k−1)","be the set of all vertices in E with level smaller than or equal to k − 1, and let us call T (k−1)","the set of all edges in the e-graph that are leaving from some vertex in E(k−1)",". Since for each bundle E in E(k−1)","we know that |out (E)| ≤ 2, we have |T (k−1)","| ≤ 2|E(k−1)","|.","The number of vertices in E(k)","with level larger than one is at least |E(k−1)","| − n. Since for each E ∈ E(k−1)","we know that |in(E)| ≥ 2, we conclude that at least 2(|E(k−1)","| − n) edges in T (k−1) must end up at some vertex in E(k)",". Let T be the set of edges in T (k−1)","that impinge on some vertex in E \\ E(k)",". Thus we have |T | ≤ 2|E(k−1)","| − 2(|E(k−1)","| − n) = 2n. Since the vertices of level k in E must have incoming edges from set T , and because each of them have at least 2 incoming edges, there cannot be more than n such vertices. This concludes the proof of our claim.","Since the the level of a vertex in E is necessarily lower than n, this completes the proof. ■","The overall complexity of the complete algorithm can be computed by induction. Our in-duction hypothesis is that for m < n, the time complexity is in O(m2","). This is obviously true for n = 1 and n = 2. Extracting the bundles 532 with fan-out 1 costs O(n2","). These bundles are of length n1 . . . nm. Extracting bundles with fan-out 2 costs O((n − n1 − . . . − nm)2","). Applying recursively the algorithm to bundles with fan-out 1 costs O(n2","1) + . . . + O(n2","m). Therefore, the complexity is in O(n2",") + O((n − n","1 − . . . − nm)2 ) +","∑n","i=1 O(ni) = O(n2 ) + O(∑n","i=1 ni) = O(n2",")."]},{"title":"6 Conclusion","paragraphs":["We have introduced an efficient algorithm for optimal reduction of the rank of LCFRSs with fan-out at most 2, that runs in quadratic time w.r.t. the rank of the input grammar. Given the fact that fan-out 1 bundles can be attached to any adjacent bundle in our factorization, we can show that our algorithm also optimizes time complexity for known tabular parsing algorithms for LCFRSs with fan-out 2.","As for general LCFRS, it has been shown by Gildea (2010) that rank optimization and time complexity optimization are not equivalent. Furthermore, all known algorithms for rank or time complexity optimization have an exponential time complexity (G ómez-Rodrı́guez et al., 2009)."]},{"title":"Acknowledgments","paragraphs":["Part of this work was done while the second author was a visiting scientist at Alpage (INRIA Paris-Rocquencourt and Université Paris 7), and was financially supported by the hosting institutions."]},{"title":"References","paragraphs":["Daniel Gildea. 2010. Optimal parsing strategies for linear context-free rewriting systems. In Human Language Technologies: The 11th Annual Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, Los Angeles, California. To appear.","Carlos Gómez-Rodrı́guez and Giorgio Satta. 2009. An optimal-time binarization algorithm for linear context-free rewriting systems with fan-out two. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, pages 985–993, Suntec, Singapore, August. Association for Computational Linguistics.","Carlos Gómez-Rodrı́guez, Marco Kuhlmann, Giorgio Satta, and David J. Weir. 2009. Optimal reduction of rule length in linear context-free rewriting systems. In Proceedings of the North American Chapter of the Association for Computational Linguistics - Human Language Technologies Conference (NAACL’09:HLT), Boulder, Colorado. To appear.","Michael A. Harrison. 1978. Introduction to Formal Language Theory. Addison-Wesley, Reading, MA.","Aravind K. Joshi and Leon S. Levy. 1977. Constraints on local descriptions: Local transformations. SIAM Journal of Computing","Marco Kuhlmann and Giorgio Satta. 2009. Treebank grammar techniques for non-projective dependency parsing. In Proceedings of the 12th Meeting of the European Chapter of the Association for Computational Linguistics (EACL 2009), Athens, Greece. To appear.","Wolfgang Maier and Timm Lichte. 2009. Characterizing discontinuity in constituent treebanks. In Proceedings of the 14th Conference on Formal Grammar (FG 2009), Bordeaux, France.","Wolfgang Maier and Anders Søgaard. 2008. Treebanks and mild context-sensitivity. In Philippe de Groote, editor, Proceedings of the 13th Conference on Formal Grammar (FG 2008), pages 61–76, Hamburg, Germany. CSLI Publications.","Owen Rambow and Giorgio Satta. 1999. Independent parallelism in finite copying parallel rewriting systems. Theoretical Computer Science, 223:87–120.","Giorgio Satta. 1992. Recognition of linear context-free rewriting systems. In Proceedings of the 30th Meeting of the Association for Computational Linguistics (ACL’92), Newark, Delaware.","Hiroyuki Seki, Takashi Matsumura, Mamoru Fujii, and Tadao Kasami. 1991. On multiple context-free grammars. Theoretical Computer Science, 88:191– 229.","K. Vijay-Shanker, David J. Weir, and Aravind K. Joshi. 1987. Characterizing structural descriptions produced by various grammatical formalisms. In Proceedings of the 25th Meeting of the Association for Computational Linguistics (ACL’87).","David J. Weir. 1992. Linear context-free rewriting systems and deterministic tree-walk transducers. In Proceedings of the 30th Meeting of the Association for Computational Linguistics (ACL’92), Newark, Delaware. 533"]}],"references":[{"authors":[{"first":"Daniel","last":"Gildea"}],"year":"2010","title":"Optimal parsing strategies for linear context-free rewriting systems","source":"Daniel Gildea. 2010. Optimal parsing strategies for linear context-free rewriting systems. In Human Language Technologies: The 11th Annual Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Conference, Los Angeles, California. To appear."},{"authors":[{"first":"Carlos","last":"Gómez-Rodrı́guez"},{"first":"Giorgio","last":"Satta"}],"year":"2009","title":"An optimal-time binarization algorithm for linear context-free rewriting systems with fan-out two","source":"Carlos Gómez-Rodrı́guez and Giorgio Satta. 2009. An optimal-time binarization algorithm for linear context-free rewriting systems with fan-out two. In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, pages 985–993, Suntec, Singapore, August. Association for Computational Linguistics."},{"authors":[{"first":"Carlos","last":"Gómez-Rodrı́guez"},{"first":"Marco","last":"Kuhlmann"},{"first":"Giorgio","last":"Satta"},{"first":"David","middle":"J.","last":"Weir"}],"year":"2009","title":"Optimal reduction of rule length in linear context-free rewriting systems","source":"Carlos Gómez-Rodrı́guez, Marco Kuhlmann, Giorgio Satta, and David J. Weir. 2009. Optimal reduction of rule length in linear context-free rewriting systems. In Proceedings of the North American Chapter of the Association for Computational Linguistics - Human Language Technologies Conference (NAACL’09:HLT), Boulder, Colorado. To appear."},{"authors":[{"first":"Michael","middle":"A.","last":"Harrison"}],"year":"1978","title":"Introduction to Formal Language Theory","source":"Michael A. Harrison. 1978. Introduction to Formal Language Theory. Addison-Wesley, Reading, MA."},{"authors":[{"first":"Aravind","middle":"K.","last":"Joshi"},{"first":"Leon","middle":"S.","last":"Levy"}],"year":"1977","title":"Constraints on local descriptions: Local transformations","source":"Aravind K. Joshi and Leon S. Levy. 1977. Constraints on local descriptions: Local transformations. SIAM Journal of Computing"},{"authors":[{"first":"Marco","last":"Kuhlmann"},{"first":"Giorgio","last":"Satta"}],"year":"2009","title":"Treebank grammar techniques for non-projective dependency parsing","source":"Marco Kuhlmann and Giorgio Satta. 2009. Treebank grammar techniques for non-projective dependency parsing. In Proceedings of the 12th Meeting of the European Chapter of the Association for Computational Linguistics (EACL 2009), Athens, Greece. To appear."},{"authors":[{"first":"Wolfgang","last":"Maier"},{"first":"Timm","last":"Lichte"}],"year":"2009","title":"Characterizing discontinuity in constituent treebanks","source":"Wolfgang Maier and Timm Lichte. 2009. Characterizing discontinuity in constituent treebanks. In Proceedings of the 14th Conference on Formal Grammar (FG 2009), Bordeaux, France."},{"authors":[{"first":"Wolfgang","last":"Maier"},{"first":"Anders","last":"Søgaard"}],"year":"2008","title":"Treebanks and mild context-sensitivity","source":"Wolfgang Maier and Anders Søgaard. 2008. Treebanks and mild context-sensitivity. In Philippe de Groote, editor, Proceedings of the 13th Conference on Formal Grammar (FG 2008), pages 61–76, Hamburg, Germany. CSLI Publications."},{"authors":[{"first":"Owen","last":"Rambow"},{"first":"Giorgio","last":"Satta"}],"year":"1999","title":"Independent parallelism in finite copying parallel rewriting systems","source":"Owen Rambow and Giorgio Satta. 1999. Independent parallelism in finite copying parallel rewriting systems. Theoretical Computer Science, 223:87–120."},{"authors":[{"first":"Giorgio","last":"Satta"}],"year":"1992","title":"Recognition of linear context-free rewriting systems","source":"Giorgio Satta. 1992. Recognition of linear context-free rewriting systems. In Proceedings of the 30th Meeting of the Association for Computational Linguistics (ACL’92), Newark, Delaware."},{"authors":[{"first":"Hiroyuki","last":"Seki"},{"first":"Takashi","last":"Matsumura"},{"first":"Mamoru","last":"Fujii"},{"first":"Tadao","last":"Kasami"}],"year":"1991","title":"On multiple context-free grammars","source":"Hiroyuki Seki, Takashi Matsumura, Mamoru Fujii, and Tadao Kasami. 1991. On multiple context-free grammars. Theoretical Computer Science, 88:191– 229."},{"authors":[{"first":"K.","last":"Vijay-Shanker"},{"first":"David","middle":"J.","last":"Weir"},{"first":"Aravind","middle":"K.","last":"Joshi"}],"year":"1987","title":"Characterizing structural descriptions produced by various grammatical formalisms","source":"K. Vijay-Shanker, David J. Weir, and Aravind K. Joshi. 1987. Characterizing structural descriptions produced by various grammatical formalisms. In Proceedings of the 25th Meeting of the Association for Computational Linguistics (ACL’87)."},{"authors":[{"first":"David","middle":"J.","last":"Weir"}],"year":"1992","title":"Linear context-free rewriting systems and deterministic tree-walk transducers","source":"David J. Weir. 1992. Linear context-free rewriting systems and deterministic tree-walk transducers. In Proceedings of the 30th Meeting of the Association for Computational Linguistics (ACL’92), Newark, Delaware. 533"}],"cites":[{"style":0,"text":"Vijay-Shanker et al. (1987)","origin":{"pointer":"/sections/2/paragraphs/0","offset":71,"length":27},"authors":[{"last":"Vijay-Shanker"},{"last":"al."}],"year":"1987","references":["/references/11"]},{"style":0,"text":"Maier and Søgaard, 2008","origin":{"pointer":"/sections/2/paragraphs/0","offset":472,"length":23},"authors":[{"last":"Maier"},{"last":"Søgaard"}],"year":"2008","references":["/references/7"]},{"style":0,"text":"Kuhlmann and Satta, 2009","origin":{"pointer":"/sections/2/paragraphs/0","offset":546,"length":24},"authors":[{"last":"Kuhlmann"},{"last":"Satta"}],"year":"2009","references":["/references/5"]},{"style":0,"text":"Joshi and Levy, 1977","origin":{"pointer":"/sections/2/paragraphs/1","offset":361,"length":20},"authors":[{"last":"Joshi"},{"last":"Levy"}],"year":"1977","references":["/references/4"]},{"style":0,"text":"Maier and Lichte, 2009","origin":{"pointer":"/sections/2/paragraphs/1","offset":962,"length":22},"authors":[{"last":"Maier"},{"last":"Lichte"}],"year":"2009","references":["/references/6"]},{"style":0,"text":"Kuhlmann and Satta, 2009","origin":{"pointer":"/sections/2/paragraphs/1","offset":986,"length":24},"authors":[{"last":"Kuhlmann"},{"last":"Satta"}],"year":"2009","references":["/references/5"]},{"style":0,"text":"Satta, 1992","origin":{"pointer":"/sections/2/paragraphs/2","offset":91,"length":11},"authors":[{"last":"Satta"}],"year":"1992","references":["/references/9"]},{"style":0,"text":"Kuhlmann and Satta, 2009","origin":{"pointer":"/sections/2/paragraphs/2","offset":441,"length":24},"authors":[{"last":"Kuhlmann"},{"last":"Satta"}],"year":"2009","references":["/references/5"]},{"style":0,"text":"Rambow and Satta, 1999","origin":{"pointer":"/sections/2/paragraphs/2","offset":842,"length":22},"authors":[{"last":"Rambow"},{"last":"Satta"}],"year":"1999","references":["/references/8"]},{"style":0,"text":"Rodrı́guez et al. (2009)","origin":{"pointer":"/sections/2/paragraphs/3","offset":312,"length":24},"authors":[{"last":"Rodrı́guez"},{"last":"al."}],"year":"2009","references":[]},{"style":0,"text":"Rodrı́guez and Satta, 2009","origin":{"pointer":"/sections/2/paragraphs/4","offset":133,"length":26},"authors":[{"last":"Rodrı́guez"},{"last":"Satta"}],"year":"2009","references":[]},{"style":0,"text":"Weir, 1992","origin":{"pointer":"/sections/2/paragraphs/7","offset":128,"length":10},"authors":[{"last":"Weir"}],"year":"1992","references":["/references/12"]},{"style":0,"text":"Rambow and Satta, 1999","origin":{"pointer":"/sections/2/paragraphs/7","offset":148,"length":22},"authors":[{"last":"Rambow"},{"last":"Satta"}],"year":"1999","references":["/references/8"]},{"style":0,"text":"Weir, 1992","origin":{"pointer":"/sections/3/paragraphs/28","offset":63,"length":10},"authors":[{"last":"Weir"}],"year":"1992","references":["/references/12"]},{"style":0,"text":"Seki et al., 1991","origin":{"pointer":"/sections/3/paragraphs/59","offset":210,"length":17},"authors":[{"last":"Seki"},{"last":"al."}],"year":"1991","references":["/references/10"]},{"style":0,"text":"Seki et al., 1991","origin":{"pointer":"/sections/3/paragraphs/69","offset":77,"length":17},"authors":[{"last":"Seki"},{"last":"al."}],"year":"1991","references":["/references/10"]},{"style":0,"text":"Harrison, 1978","origin":{"pointer":"/sections/3/paragraphs/114","offset":304,"length":14},"authors":[{"last":"Harrison"}],"year":"1978","references":["/references/3"]},{"style":0,"text":"Rambow and Satta, 1999","origin":{"pointer":"/sections/3/paragraphs/114","offset":549,"length":22},"authors":[{"last":"Rambow"},{"last":"Satta"}],"year":"1999","references":["/references/8"]},{"style":0,"text":"Gildea (2010)","origin":{"pointer":"/sections/7/paragraphs/1","offset":43,"length":13},"authors":[{"last":"Gildea"}],"year":"2010","references":["/references/0"]},{"style":0,"text":"Rodrı́guez et al., 2009","origin":{"pointer":"/sections/7/paragraphs/1","offset":252,"length":23},"authors":[{"last":"Rodrı́guez"},{"last":"al."}],"year":"2009","references":[]}]}
