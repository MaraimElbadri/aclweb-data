{"sections":[{"title":"","paragraphs":["Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 928–935, Prague, Czech Republic, June 2007. c⃝2007 Association for Computational Linguistics"]},{"title":"Using Mazurkiewicz Trace Languages for Partition-Based Morphology Franc‚ois Barth·elemy CNAM Cedric, 292 rue Saint-Martin, 75003 Paris (France) INRIA Atoll, domaine de Voluceau, 78153 Le Chesnay cedex (France) barthe@cnam.fr Abstract","paragraphs":["Partition-based morphology is an approach of nite-state morphology where a grammar describes a special kind of regular relations, which split all the strings of a given tuple into the same number of substrings. They are compiled in nite-state machines. In this paper, we address the question of merging grammars using different partitionings into a single nite-state machine. A morphological description may then be obtained by parallel or sequential application of constraints expressed on different partition notions (e.g. morpheme, phoneme, grapheme). The theory of Mazurkiewicz Trace Languages, a well known semantics of parallel systems, provides a way of representing and compil-ing such a description."]},{"title":"1 Partition-Based Morphology","paragraphs":["Finite-State Morphology is based on the idea that regular relations are an appropriate formalism to describe the morphology of a natural language. Such a relation is a set of pairs, the rst component being an actual form called surface form, the second component being an abstract description of this form called lexical form. It is usually implemented by a nite-state transducer. Relations are not oriented, so the same transducer may be used both for analysis and generation. They may be non-deterministic, when the same form belongs to several pairs. Further-more, nite state machines have interesting properties, they are composable and efcient.","There are two main trends in Finite-State Morphology: rewrite-rule systems and two-level rule systems. Rewrite-rule systems describe the morphology of languages using contextual rewrite rules which are easily applied in cascade. Rules are compiled into nite-state transducers and merged using transducer composition (Kaplan and Kay, 1994).","The other important trend of Finite-State Morphology is Two-Level Morphology (Koskenniemi, 1983). In this approach, not only pairs of lexical and surface strings are related, but there is a one-to-one correspondence between their symbols. It means that the two strings of a given pair must have the same length. Whenever a symbol of one side does not have an actual counterpart in the other string, a special symbol 0 is inserted at the relevant position in order to fulll the same-length constraint. For example, the correspondence between the surface form spies and the morpheme concatenation spy+s is given as follows:","s p y 0 + s","s p i e 0 s Same-length relations are closed under intersection, so two-level grammars describe a system as the simultaneous application of local constraints.","A third approach, Partition-Based Morphology, consists in splitting the strings of a pair into the same number of substrings. The same-length constraint does not hold on symbols but on substrings. For example, spies and spy+s may be partitioned as follows:","s p y + s","s p ie ε s The partition-based approach was rst proposed","by (Black et al., 1987) and further improved by (Pul-","man and Hepple, 1993) and (Grimley-Evans et al., 928 1996). It has been used to describe the morphology of Syriac (Kiraz, 2000), Akkadian (Barth·elemy, 2006) and Arabic Dialects (Habash et al., 2005). These works use multi-tape transducers instead of usual two tape transducers, describing a special case of n-ary relations instead of binary relations. Denition 1 Partitioned n-relation A partitioned n-relation is a set of nite sequences of string n-tuples.","For instance, the n-tuple sequence of the example (spy, spies) given above is (s, s)(p, p)(y, ie)(+, ε)(s, s). Of course, all the partitioned n-relations are not recognizable using a nite-state machine. Grimley-Evans and al. propose a partition-based formalism with a strong restriction: the string n-tuples used in the sequences belong to a nite set of such n-tuples (the centers of context-restriction rules). They describe an algorithm which compiles a set of contextual rules describing a partitioned n-relation into an epsilon-free letter transducer. (Barth·elemy, 2005) proposed a more powerful framework, where the relations are dened by concatenating tuples of independent regular expressions and operations on partitioned n-relations such as intersection and complementation are considered.","In this paper, we propose to use Mazurkiewicz Trace Languages instead of partitioned relation as the semantics of partition-based morphological formalisms. The benets are twofold: rstly, there is an extension of the formal power which allows the combination of morphological description using different partitionings of forms. Secondly, the compilation of such languages into nite-state machines has been exhaustively studied. Their closure properties provide operations useful for morphological purposes.","They include the concatenation (for instance for compound words), the intersection used to merge local constraints, the union (modular lexicon), the composition (cascading descriptions, form recognition and generation), the projection (to extract one level of the relation), the complementation and set difference, used to compile contextual rules following the algorithms in (Kaplan and Kay, 1994), (Grimley-Evans et al., 1996) and (Yli-Jyr¤a and Koskenniemi, 2004).","The use of the new semantics does not imply any change of the user-level formalisms, thanks to a straightforward homomorphism from partitioned n-relations to Mazurkiewicz Trace Languages."]},{"title":"2 Mazurkiewicz Trace Languages","paragraphs":["Within a given n-tuple, there is no meaningful order between symbols of the different levels. Mazurkiewicz trace languages is a theory which expresses partial ordering between symbols. They have been dened and studied in the realm of parallel computing. In this section, we recall their denition and some classical results. (Diekert and M·etivier, 1997) gives an exhaustive presentation on the subject with a detailed bibliography. It contains all the results mentioned here and refers to their original publication. 2.1 Denitions A Partially Commutative Monoid is dened on an alphabet Σ with an independence binary relation I over Σ × Σ which is symmetric and irreexive. Two independent symbols commute freely whereas non-independent symbols do not. I denes an equivalence relation ∼I on Σ∗",": two words are equivalent if one is the result of a series of commutation of pairs of successive symbols which belong to I. The notation [x] is used to denote the equivalence class of a string x with respect to ∼I .","The Partially Commutative Monoid M (Σ, I) is the quotient of the free monoid Σ∗","by the equivalence relation ∼I .","The binary relation D = (Σ × Σ) − I is called the dependence relation. It is reexive and symmetric.","φ is the canonical homomorphism dened by:","φ : Σ∗","→ M (Σ, I) x ↦→ [x]","A Mazurkiewicz trace language (abbreviation: trace language) is a subset of a partially commutative monoid M (Σ, I). 2.2 Recognizable Trace Languages A trace language T is said recognizable if there exists an homomorphism ν from M (Σ, I) to a - nite monoid S such that T = ν−1","(F ) for some F ⊆ S. A recognizable Trace Language may be implemented by a Finite-State Automaton. 929","A trace [x] is said to be connected if the dependence relation restricted to the alphabet of [x] is a connected graph. A trace language is connected if all its traces are connected.","A string x is said to be in lexicographic normal form if x is the smallest string of its equivalence class [x] with respect to the lexicographic ordering induced by an ordering on Σ. The set of strings in lexicographic normal form is written LexN F . This set is a regular language which is described by the following regular expression: LexN F = Σ∗","− ⋃ (a,b)∈I,a<b Σ∗","b(I(a))∗","aΣ∗","where I(a) denotes the set of symbols independent","from a. Property 1 Let T ⊆ M (Σ, I) be a trace language. The following assertions are equivalent: • T is recognizable","• T is expressible as a rational expression where the Kleene star is used only on connected languages.","• The set M in(T ) = { x ∈ LexN F | [x] ∈ T } is a regular language over Σ∗",".","Recognizability is closely related to the notion of iterative factor, which is the language-level equivalent of a loop in a nite-state machine. If two symbols a and b such that a < b belong to a loop, and if the loop is traversed several times, then occurrences of a and b are interlaced. For such a string to be in lexicographic normal form, a dependent symbol must appear in the loop between b and a. 2.3 Operations and closure properties Recognizable trace languages are closed under intersection and union. Furthermore, Min(T1) ∪ Min(T2) = Min(T1 ∪T2) and Min(T1)∩Min(T2) = Min(T1 ∩ T2). It comes from the fact that intersection and union do not create new iterative factor. The property on lexicographic normal form comes from the fact that all the traces in the result of the operation belong to at least one of the operands which are in normal form.","Recognizable trace language are closed under concatenation. Concatenation do not create new iterative factors. The concatenation Min(T1)Min(T2) is not necessarily in lexicographic normal form. For instance, suppose that a > b. Then { [a]} .{ [b]} = { [ab]} , but Min({ [a]} ) = a, Min({ [b]} ) = b, and Min({ [ab]} ) = ba.","Recognizable trace languages are closed under complementation.","Recognizable Trace Languages are not closed under Kleene star. For instance, a < b, Min([ab]∗",") = an","bn","which is known not to be regular.","The projection on a subset S of Σ is the operation written πS, which deletes all the occurrences of symbols in Σ − S from the traces. Recognizable trace languages are not closed under projection. The reason is that the projection may delete symbols which makes the languages of loops connected."]},{"title":"3 Partitioned relations and trace languages","paragraphs":["It is possible to convert a partitioned relation into a trace language as follows:","• represent the partition boundaries using a symbol ω not in Σ.","• distinguish the symbols according to the component (tape) of the n-tuple they belong to. For this purpose, we will use a subscript. • dene the dependence relation D by:","ω is dependent from all the other symbols","symbols in Σ sharing the same subscript are mutually dependent whereas symbols having different subscript are mutually independent.","For instance, the spy n-tuple sequence (s, s)(p, p)(y, ie)(+, ε)(s, s) is translated into the trace ωs1s2ωp1p2ωy1i2e2ω +1 ωs1s2ω. The gure 1 gives the partial order between symbols of this trace.","The dependence relation is intuitively sound. For instance, in the third n-tuple, there is a dependency between i and e which cannot be permuted, but there is no dependency between i (resp. e) and y: i is neither before nor after y. There are three equivalent permutations: y1i2e2, i2y1e2 and i2e2y1. In an implementation, one canonical representation must be chosen, in order to ensure that set operations, such as intersection, are correct. The notion of lexicographic normal form, based on any arbitrary but xed order on symbols, gives such a canonical form. 930"]},{"title":"tape 1 tape 2 w s1 s2 w w p1 p2 i2 e2 y1 w +1 w s1 s2 w","paragraphs":["Figure 1: Partially ordered symbols","The compilation of the trace language into a nite-state automaton has been studied through the notion of recognizability. This automaton is very similar to an n-tape transducer. The Trace Language theory gives properties such as closure under intersection and soundness of the lexicographic normal form, which do not hold for usual transducers classes. It also provides a criterion to restrict the description of languages through regular expressions. This restriction is that the closure operator (Kleene star) must occur on connected languages only. In the translation of a partition-based regular expression, a star may appear either on a string of symbols of a given tape or on a string with at least one occurrence of ω.","Another benet of Mazurkiewicz trace languages with respect to partitioned relations is their ability to represent the segmentation of the same form using two different partitionings. The example of gure 2 uses two partitionings of the form spy+s, one based on the notion of morpheme, the other on the notion of phoneme. The notation <pos=noun> and <number=pl> stands for two single symbols. Flat feature structures over (small) nite domains are easily represented by a string of such symbols. N-tuples are not very convenient to represent such a system.","Partition-based formalism are especially adapted to express relations between different representation such as feature structures and afxes, with respect to two-level morphology which imposes an articial symbol-to-symbol mapping.","A multi-partitioned relation may be obtained by merging the translation of two partition-based grammars which share one or more common tapes. Such a merging is performed by the join operator of the relational algebra. Using a partition-based grammar for recognition or generation implies such an operation: the grammar is joined with a 1-tape machine without partitioning representing the form to be recognized (surface level) or generated (lexical level)."]},{"title":"4 Multi-Tape Trace Languages","paragraphs":["In this section, we dene a subclass of Mazurkiewicz Trace Languages especially adapted to partition-based morphology, thanks to an explicit notion of tape partially synchronized by partition boundaries. Denition 2 A multi-tape partially commutative monoid is dened by a tuple (Σ, Θ, Ω, μ) where • Σ is a nite set of symbols called the alphabet. • Θ is a nite set of symbols called the tapes.","• Ω is a nite set of symbols which do not belong to Σ, called the partition boundaries.","• μ is a mapping from Σ ∪ Ω to 2θ","such that μ(x) is a singleton for any x ∈ Σ. It is the Partially Commutative Monoid M (Σ ∪ Ω, Iμ) where the independence relation is dened by Iμ = { (x, y) ∈ Σ ∪ Ω × Σ ∪ Ω| μ(x) ∩ μ(y) = ∅} . Notation: M P M (Σ, Θ, Ω, μ).","A Multi-Tape Trace Language is a subset of a Multi-Tape partially commutative monoid.","We now address the problem of relational operations over Recognizable Multi-Tape Trace Languages. Recognizable languages may be implemented by nite-state automata in lexicographic normal form, using the morphism φ−1",". Operations on trace languages are implemented by operations on nite-state automata. We are looking for implementations preserving the normal form property, because changing the order in regular languages is not a standard operation.","Some set operations are very simple to implement, namely union, intersection and difference. 931 tape 1 tape 3 tape 2 w1 w2 <pos=noun> s2 s3 w2 w2 p3 p2 i3 e3 w2 y2 w1 <number=pl> w1 w2 s2 s3 Figure 2: Two partitions of the same tape The elements of the result of such an operation belongs to one or both operands, and are therefore in lexicographic normal form. If we write M in(T ) the set M in(T ) = { x ∈ LexN F | [x] ∈ T } , where T is a Multi-Tape Trace Language, we have trivially the properties: • M in(T1 ∪ T2) = M in(T1) ∪ M in(T2) • M in(T1 ∩ T2) = M in(T1) ∩ M in(T2) • M in(T1 − T2) = M in(T1) − M in(T2)","Implementing the complementation is not so straightforward because M in(T ) is usually not equal to M in(T ). The later set contains strings not in lexical normal forms which may belong to the equivalence class of a member of T with respect to ∼I . The complementation must not be computed with respect to regular languages but to LexNF. M in(T ) = LexN F − M in(T )","As already mentioned, the concatenation of two regular languages in lexicographic normal form is not necessarily in normal form. We do not have a general solution to the problem but two partial so-lutions. Firstly, it is easy to test whether the result is actually in normal form or not. Secondly, the result is in normal form whenever a synchronization point belonging to all the levels is inserted between the strings of the two languages. Let ωu ∈ Ω, μ(ωu) = Θ. Then, M in(T1.{ ωu} .T2) = M in(T1).M in(ωu).M in(T2).","The closure (Kleene star) operation creates a new iterative factor and therefore, the result may be a non recognizable trace language. Here again, concatenating a global synchronization point at the end of the language gives a trace language closed under Kleene star. By denition, such a language is connected. Furthermore, the result is in normal form.","So far, operations have operands and the result belonging to the same Multi-tape Monoid. It is not the case of the last two operations: projection and join.","We use the the operators Dom, Range, and the relations Id and Insert as dened in (Kaplan and Kay, 1994): • Dom(R) = { x|∃ y, (x, y) ∈ R} • Range(R) = { y|∃ x, (x, y) ∈ R} • Id(L) = { (x, x)| x ∈ L}","• Insert(S) = (Id(Σ) ∪ ({ ε} × S))∗",". It is used to insert freely symbols from S in a string from Σ∗",". Conversely, Insert(S)−1","removes all the occurrences of symbols from S, if S ∩ Σ = ∅.","The result of a projection operation may not be recognizable if it deletes symbols making iterative factors connected. Furthermore, when the result is recognizable, the projection on M in(T ) is not necessarily in normal form. Both phenomena come from the deletion of synchronization points. Therefore, a projection which deletes only symbols from Σ is safe. The deletion of synchronization points is also possible whenever they do not synchronize any-thing more in the result of the projection because all but possibly one of its tapes have been deleted.","In the tape-oriented computation system, we are mainly interested in the projection which deletes some tapes and possibly some related synchronization points. Property 2 Projection Let T be a trace language over the MTM M = (Σ, Θ, w, μ). Let Ω1 ⊂ Ω and Θ1 ⊂ Θ. If 932 ∀ω ∈ Ω − Ω1, | μ(ω) ∩ Θ1| ≤ 1, then M in(πΘ1,Ω1(T )) = Range(Insert({ x ∈ Σ| μ(x) /∈ Θ1} ∪ Ω − Ω1)−1","◦ M in(T ))","The join operation is named by analogy with the operator of the relational algebra. It has been dened on nite-state transducers (Kempe et al., 2004). Denition 3 Multi-tape join Let T1 ⊂ M T M (Σ1, Θ1, Ω1, μ1) and T2 ⊂ T M (Σ2, Θ2, Ω2, μ2) be two multi-tape trace languages. T1 T2 is dened if and only if • ∀σ ∈ Σ1 ∩ Σ2, μ1(σ) ∩ Θ2 = μ2(σ) ∩ Θ1 • ∀ω ∈ Ω1 ∩ Ω2, μ1(ω) ∩ Θ2 = μ2(ω) ∩ Θ1 The Multi-tape Trace Language T1 T2 is dened on the Multi-tape Partially Commutative Monoid M T M (Σ1 ∪Σ2, Θ1 ∪Θ2, Ω1 ∪Ω2, μ) where μ(x) = μ1(x) ∪ μ2(x). It is dened by πΣ1∪Θ1∪Ω1 (T1 T2) = T1 and πΣ2∪Θ2∪Ω2 (T1 T2) = T2.","If the two operands T1 and T2 belong to the same MTM, then T1 T2 = T1 ∩ T2. If the operands belong to disjoint monoids (which do not share any symbol), then the join is a Cartesian product.","The implementation of the join relies on the nite-state intersection algorithm. This algorithm works whenever the common symbols of the two languages appear in the same order in the two operands. The normal form does not ensure this property, because symbols in the common part of the join may be synchronized by tapes not in the common part, by transitivity, like in the example of the gure 3. In this example, c on tape 3 and f on tape 1 are ordered c < f by transitivity using tape 2. b c w1 a w2 f g tape 1 tape 2 tape 3 w0 w0d e Figure 3: indirect tape synchronization","Let T ⊆ M P M (Σ, Θ, Ω, μ) a multi-partition trace language. Let GT be the labeled graph where the nodes are the tape symbols from Θ and the edges are the set { (x, ω, y) ∈ Θ × Ω × Θ| x ∈ μ(ω) and y ∈ μ(ω)} . Let Sync(Θ) be the set dened by Sync(Θ) = { ω ∈ Ω| ω appears in GT on a path between two tapes of Θ} .","The GT graph for example of the gure 3 is given in gure 4 and Sync({ 1, 3} ) = { ω0, ω1, ω2} . tape 2 w0 w0w1 tape 1 w2 w0 tape 3 Figure 4: the GT graph Sync(Θ) is different from μ−1","(Θ) ∩ Ω because some synchronization points may induce an order between two tapes by transitivity, using other tapes. Property 3 Let T1 ⊆ M P M (Σ1, Θ1, Ω1, μ1) and T2 ⊆ M P M (Σ2, Θ2, Ω2, μ2) be two multi-partition trace languages. Let Σ = Σ1 ∩ Σ2 and Ω = Ω1 ∩ Ω2. If Sync(Θ1 ∩ Θ2) ⊆ Ω, then πΣ∪Ω(M in(T1)) ∩ πΣ∪Ω(M in(T2)) = M in(πΣ∪Ω(T1) ∩ πΣ∪Ω(T2)","This property expresses the fact that symbols belonging to both languages appear in the same order in lexicographic normal forms whenever all the direct and indirect synchronization symbols belong to the two languages too. Property 4 Let T1 ⊆ M P M (Σ1, Θ1, Ω1, μ1) and T2 ⊆ M P M (Σ2, Θ2, Ω2, μ2) be two multi-partition trace languages. If Θ1 ∩ Θ2 is a singleton { θ} and if ∀ω ∈ Ω1 ∩ Ω2, θ ∈ μ(ω), then πΣ∪Ω(M in(T1)) ∩ πΣ∪Ω(M in(T2)) = M in(πΣ∪Ω(T1) ∩ πΣ∪Ω(T2)","This second property expresses the fact that symbols appear necessarily in the same order in the two operands if the intersection of the two languages is restricted to symbols of a single tape. This property is straightforward since symbols of a given tape are mutually dependent.","We now dene a computation over (Σ∪Ω)∗","which computes M in(T1 T2).","Let T1 ⊂ M T M (Σ1, Θ1, ω1, μ1) and T2 ⊂ M T M (Σ2, Θ2, Ω2, μ2) be two recognizable multi-tape trace languages. If Sync(Θ1 ∩ Θ2) ⊆ Ω, then M in(T1 T2) = Range(M in(T1 ◦ Insert(Σ2 − Σ1) ◦ Id(LexNF)) ∩ Range(M in(T2) ◦ Insert(Σ1 − Σ2) ◦ Id(LexNF)). 933"]},{"title":"5 A short example","paragraphs":["We have written a morphological description of Turkish verbal morphology using two different partitionings. The rst one corresponds to the notion of afx (morpheme). It is used to describe the morphotactics of the language using rules such as the following context-restriction rule: (y?","I4","m,1 sing) ⇒","(I?","yor,prog)| (y?","E2","cE2","k,future)","In this rule, y?","stands for an optional y, I 4","and E2 for abstract vowels which realizations are subject to vowel harmony and I ?","is an optional occurrence of the rst vowel. The rule may be read: the sufx y?","I4","m denoting a rst person singular may appear only after the sufx of progressive or the sufx of future1",". Such rules describe simply afx order in verbal forms.","The second partitioning is a symbol-to-symbol correspondence similar to the one used in standard two-level morphology. This partitioning is more convenient to express the constraints of vowel harmony which occurs anywhere in the afxes and does not depend on afx boundaries.","Here are two of the rules implementing vowel harmony: (I4",",i) ⇒ (Vow,e|i) (Cons,Cons)* (I4",",u) ⇒ (Vow,o|u) (Cons,Cons)* Vow and Cons denote respectively the sets of vowels and consonants. These rules may be read: a symbol I4","is realized as i (resp. u) whenever the closest preceding vowel is realized as e or i (resp. o or u).","The realization or not of an optional letter may be expressed using one or the other partitioning. These optional letters always appear in the rst position of an afx and depends only on the last letter of the preceding afx. (y?",",y) ⇒ (Vow,Vow)","Here is an example of a verbal form given as a 3-tape relation partitioned using the two partitionings. verbal root prog 1 sing g e l I?","y o r Y?","I4","m g e l i y o r ε u m The translation of each rule into a Multi-tape","Trace Language involves two tasks: introducing par-1 The actual rule has 5 other alternative tenses. It has been","shortened for clarity. tition boundary symbols at each frontier between partitions. A different symbol is used for each kind of partitioning. Distinguishing symbols from different tapes in order to ensure that μ(x) is a singleton for each x ∈ Σ. Symbols of Σ are therefore pairs with the symbol appearing in the rule as rst component and the tape identier, a number, as second component.","Any complete order between symbols would dene a lexicographic normal form. The order used by our system orders symbol with respect to tapes: symbols of the rst tape are smaller than the symbols of tape 2, and so on. The order between symbols of a same tape is not important because these symbols are mutually dependent. The translation of a tuple (a1 . . . an, b1 . . . bm) is (a1, 1) . . . (an, 1)(b1, 2) . . . (bm, 2)ω1. Such a string is in lexicographic normal form. Furthermore, this expression is connected, thanks to the partition boundary which synchronizes all the tapes, so its closure is recognizable. The concatenation too is safe.","All contextual rules are compiled following the algorithm in (Yli-Jyr¤a and Koskenniemi, 2004) 2",". Then all the rules describing afxes are intersected in an automaton, and all the rules describing surface transformation are intersected in another automaton. Then a join is performed to obtain the nal machine. This join is possible because the intersection of the two languages consists in one tape (cf. property 4). Using it either for recognition or generation is also done by a join, possibly followed by a projection.","For instance, to recognize a surface form geliyorum, rst compile it in the multi-tape trace language (g, 3)(e, 3)(l, 3) . . . (m, 3), join it with the morphological description, and then project the result on tape 1 to obtain an abstract form (verbal root,1)(prog,1)(1 sing,1). Finally extract the rst component of each pair."]},{"title":"6 Conclusion","paragraphs":["Partition-oriented rules are a convenient way to describe some of the constraints involved in the morphology of the language, but not all the constraints refer to the same partition notion. Describing a rule","2","Two other compilation algorithm also work on the rules of this example (Kaplan and Kay, 1994), (Grimley-Evans et al., 1996). (Yli-Jyr¤a and Koskenniemi, 2004) is more general. 934 with an irrelevant one is sometimes difcult and in-elegant. For instance, describing vowel harmony using a partitioning based on morphemes takes necessarily several rules corresponding to the cases where the harmony is within a morpheme or across several morphemes.","Previous partition-based formalisms use a unique partitioning which is used in all the contextual rules. Our proposition is to use several partitionings in order to express constraints with the proper granularity. Typically, these partitionings correspond to the notions of morphemes, phonemes and graphemes.","Partition-based grammars have the same theoretical power as two-level morphology, which is the power of regular languages. It was designed to remain nite-state and closed under intersection. It is compiled in nite-state automata which are formally equivalent to the epsilon-free letter transducers used by two-level morphology. It is simply more easy to use in some cases, just like two-level rules are more convenient than simple regular expressions for some applications.","Partition-Based morphology is convenient whenever the different levels use very different representations, like feature structures and strings, or different writing systems (e.g. Japanese hiragana and transcription). Two-level rules on the other hand are convenient whenever the related strings are variants of the same representation like in the example (spy+s,spies). Note that multi-partition morphology may use a one-to-one correspondence as one of its partitionings, and therefore is compatible with usual two-level morphology.","With respect to rewrite rule systems, partition-based morphology gives better support to parallel rule application and context denition may involve several levels. The counterpart is a risk of conicts between contextual rules. Acknowledgement We would like to thank an anonymous referee of this paper for his/her helpful comments."]},{"title":"References","paragraphs":["Franc‚ois Barth·elemy. 2005. Partitioning multitape transducers. In International Workshop on Finite State Methods in Natural Language Processing (FSMNLP), Helsinki, Finland.","Franc‚ois Barth·elemy. 2006. Un analyseur morphologique utilisant la jointure. In Traitement Automatique de la Langue Naturelle (TALN), Leuven, Belgium.","Alan Black, Graeme Ritchie, Steve Pulman, and Graham Russell. 1987. Formalisms for morphographemic description. In Proceedings of the third conference on European chapter of the Association for Computational Linguistics (EACL), pages 1118.","Volker Diekert and Yves M·etivier. 1997. Partial commutation and traces. In G. Rozenberg and A. Salomaa, editors, Handbook of Formal Languages, Vol. 3, pages 457534. Springer-Verlag, Berlin.","Edmund Grimley-Evans, George Kiraz, and Stephen Pulman. 1996. Compiling a partition-based two-level formalism. In COLING, pages 454459, Copenhagen, Denmark.","Nizar Habash, Owen Rambow, and George Kiraz. 2005. Morphological analysis and generation for arabic dialects. In Proceedings of the ACL Workshop on Semitic Languages, Ann Harbour, Michigan.","Ronald M. Kaplan and Martin Kay. 1994. Regular models of phonological rule systems. Computational Linguistics, 20:3:331378.","Andr·e Kempe, Jean-Marc Champarnaud, and Jason Eisner. 2004. A note on join and auto-intersection of n-ary rational relations. In B. Watson and L. Cleophas, editors, Proc. Eindhoven FASTAR Days, Eindhoven, Netherlands.","George Anton Kiraz. 2000. Multitiered nonlinear morphology using multitape nite automata: a case study on syriac and arabic. Comput. Linguist., 26(1):77 105.","Kimmo Koskenniemi. 1983. Two-level model for morphological analysis. In IJCAI-83, pages 683685, Karlsruhe, Germany.","Stephen G. Pulman and Mark R. Hepple. 1993. A feature-based formalism for two-level phonology. Computer Speech and Language, 7:333358.","Anssi Yli-Jyr¤a and Kimmo Koskenniemi. 2004. Compiling contextual restrictions on strings into nite-state automata. In B. Watson and L. Cleophas, editors, Proc. Eindhoven FASTAR Days, Eindhoven, Netherlands. 935"]}],"references":[{"authors":[{"first":"Franc‚ois","last":"Barth·elemy"}],"year":"2005","title":"Partitioning multitape transducers","source":"Franc‚ois Barth·elemy. 2005. Partitioning multitape transducers. In International Workshop on Finite State Methods in Natural Language Processing (FSMNLP), Helsinki, Finland."},{"authors":[{"first":"Franc‚ois","last":"Barth·elemy"}],"year":"2006","title":"Un analyseur morphologique utilisant la jointure","source":"Franc‚ois Barth·elemy. 2006. Un analyseur morphologique utilisant la jointure. In Traitement Automatique de la Langue Naturelle (TALN), Leuven, Belgium."},{"authors":[{"first":"Alan","last":"Black"},{"first":"Graeme","last":"Ritchie"},{"first":"Steve","last":"Pulman"},{"first":"Graham","last":"Russell"}],"year":"1987","title":"Formalisms for morphographemic description","source":"Alan Black, Graeme Ritchie, Steve Pulman, and Graham Russell. 1987. Formalisms for morphographemic description. In Proceedings of the third conference on European chapter of the Association for Computational Linguistics (EACL), pages 1118."},{"authors":[{"first":"Volker","last":"Diekert"},{"first":"Yves","last":"M·etivier"}],"year":"1997","title":"Partial commutation and traces","source":"Volker Diekert and Yves M·etivier. 1997. Partial commutation and traces. In G. Rozenberg and A. Salomaa, editors, Handbook of Formal Languages, Vol. 3, pages 457534. Springer-Verlag, Berlin."},{"authors":[{"first":"Edmund","last":"Grimley-Evans"},{"first":"George","last":"Kiraz"},{"first":"Stephen","last":"Pulman"}],"year":"1996","title":"Compiling a partition-based two-level formalism","source":"Edmund Grimley-Evans, George Kiraz, and Stephen Pulman. 1996. Compiling a partition-based two-level formalism. In COLING, pages 454459, Copenhagen, Denmark."},{"authors":[{"first":"Nizar","last":"Habash"},{"first":"Owen","last":"Rambow"},{"first":"George","last":"Kiraz"}],"year":"2005","title":"Morphological analysis and generation for arabic dialects","source":"Nizar Habash, Owen Rambow, and George Kiraz. 2005. Morphological analysis and generation for arabic dialects. In Proceedings of the ACL Workshop on Semitic Languages, Ann Harbour, Michigan."},{"authors":[{"first":"Ronald","middle":"M.","last":"Kaplan"},{"first":"Martin","last":"Kay"}],"year":"1994","title":"Regular models of phonological rule systems","source":"Ronald M. Kaplan and Martin Kay. 1994. Regular models of phonological rule systems. Computational Linguistics, 20:3:331378."},{"authors":[{"first":"Andr·e","last":"Kempe"},{"first":"Jean-Marc","last":"Champarnaud"},{"first":"Jason","last":"Eisner"}],"year":"2004","title":"A note on join and auto-intersection of n-ary rational relations","source":"Andr·e Kempe, Jean-Marc Champarnaud, and Jason Eisner. 2004. A note on join and auto-intersection of n-ary rational relations. In B. Watson and L. Cleophas, editors, Proc. Eindhoven FASTAR Days, Eindhoven, Netherlands."},{"authors":[{"first":"George","middle":"Anton","last":"Kiraz"}],"year":"2000","title":"Multitiered nonlinear morphology using multitape nite automata: a case study on syriac and arabic","source":"George Anton Kiraz. 2000. Multitiered nonlinear morphology using multitape nite automata: a case study on syriac and arabic. Comput. Linguist., 26(1):77 105."},{"authors":[{"first":"Kimmo","last":"Koskenniemi"}],"year":"1983","title":"Two-level model for morphological analysis","source":"Kimmo Koskenniemi. 1983. Two-level model for morphological analysis. In IJCAI-83, pages 683685, Karlsruhe, Germany."},{"authors":[{"first":"Stephen","middle":"G.","last":"Pulman"},{"first":"Mark","middle":"R.","last":"Hepple"}],"year":"1993","title":"A feature-based formalism for two-level phonology","source":"Stephen G. Pulman and Mark R. Hepple. 1993. A feature-based formalism for two-level phonology. Computer Speech and Language, 7:333358."},{"authors":[{"first":"Anssi","last":"Yli-Jyr¤a"},{"first":"Kimmo","last":"Koskenniemi"}],"year":"2004","title":"Compiling contextual restrictions on strings into nite-state automata","source":"Anssi Yli-Jyr¤a and Kimmo Koskenniemi. 2004. Compiling contextual restrictions on strings into nite-state automata. In B. Watson and L. Cleophas, editors, Proc. Eindhoven FASTAR Days, Eindhoven, Netherlands. 935"}],"cites":[{"style":0,"text":"Kaplan and Kay, 1994","origin":{"pointer":"/sections/2/paragraphs/1","offset":317,"length":20},"authors":[{"last":"Kaplan"},{"last":"Kay"}],"year":"1994","references":["/references/6"]},{"style":0,"text":"Koskenniemi, 1983","origin":{"pointer":"/sections/2/paragraphs/2","offset":78,"length":17},"authors":[{"last":"Koskenniemi"}],"year":"1983","references":["/references/9"]},{"style":0,"text":"Black et al., 1987","origin":{"pointer":"/sections/2/paragraphs/8","offset":4,"length":18},"authors":[{"last":"Black"},{"last":"al."}],"year":"1987","references":["/references/2"]},{"style":0,"text":"Hepple, 1993","origin":{"pointer":"/sections/2/paragraphs/9","offset":8,"length":12},"authors":[{"last":"Hepple"}],"year":"1993","references":[]},{"style":0,"text":"Kiraz, 2000","origin":{"pointer":"/sections/2/paragraphs/9","offset":115,"length":11},"authors":[{"last":"Kiraz"}],"year":"2000","references":["/references/8"]},{"style":0,"text":"Barth·elemy, 2006","origin":{"pointer":"/sections/2/paragraphs/9","offset":139,"length":17},"authors":[{"last":"Barth·elemy"}],"year":"2006","references":["/references/1"]},{"style":0,"text":"Habash et al., 2005","origin":{"pointer":"/sections/2/paragraphs/9","offset":179,"length":19},"authors":[{"last":"Habash"},{"last":"al."}],"year":"2005","references":["/references/5"]},{"style":0,"text":"Barth·elemy, 2005","origin":{"pointer":"/sections/2/paragraphs/10","offset":557,"length":17},"authors":[{"last":"Barth·elemy"}],"year":"2005","references":["/references/0"]},{"style":0,"text":"Kaplan and Kay, 1994","origin":{"pointer":"/sections/2/paragraphs/12","offset":377,"length":20},"authors":[{"last":"Kaplan"},{"last":"Kay"}],"year":"1994","references":["/references/6"]},{"style":0,"text":"Grimley-Evans et al., 1996","origin":{"pointer":"/sections/2/paragraphs/12","offset":401,"length":26},"authors":[{"last":"Grimley-Evans"},{"last":"al."}],"year":"1996","references":["/references/4"]},{"style":0,"text":"Yli-Jyr¤a and Koskenniemi, 2004","origin":{"pointer":"/sections/2/paragraphs/12","offset":434,"length":31},"authors":[{"last":"Yli-Jyr¤a"},{"last":"Koskenniemi"}],"year":"2004","references":["/references/11"]},{"style":0,"text":"Diekert and M·etivier, 1997","origin":{"pointer":"/sections/3/paragraphs/0","offset":325,"length":27},"authors":[{"last":"Diekert"},{"last":"M·etivier"}],"year":"1997","references":["/references/3"]},{"style":0,"text":"Kaplan and Kay, 1994","origin":{"pointer":"/sections/6/paragraphs/12","offset":82,"length":20},"authors":[{"last":"Kaplan"},{"last":"Kay"}],"year":"1994","references":["/references/6"]},{"style":0,"text":"Kempe et al., 2004","origin":{"pointer":"/sections/6/paragraphs/20","offset":129,"length":18},"authors":[{"last":"Kempe"},{"last":"al."}],"year":"2004","references":["/references/7"]},{"style":0,"text":"Yli-Jyr¤a and Koskenniemi, 2004","origin":{"pointer":"/sections/7/paragraphs/29","offset":62,"length":31},"authors":[{"last":"Yli-Jyr¤a"},{"last":"Koskenniemi"}],"year":"2004","references":["/references/11"]},{"style":0,"text":"Kaplan and Kay, 1994","origin":{"pointer":"/sections/8/paragraphs/2","offset":72,"length":20},"authors":[{"last":"Kaplan"},{"last":"Kay"}],"year":"1994","references":["/references/6"]},{"style":0,"text":"Grimley-Evans et al., 1996","origin":{"pointer":"/sections/8/paragraphs/2","offset":96,"length":26},"authors":[{"last":"Grimley-Evans"},{"last":"al."}],"year":"1996","references":["/references/4"]},{"style":0,"text":"Yli-Jyr¤a and Koskenniemi, 2004","origin":{"pointer":"/sections/8/paragraphs/2","offset":126,"length":31},"authors":[{"last":"Yli-Jyr¤a"},{"last":"Koskenniemi"}],"year":"2004","references":["/references/11"]}]}
