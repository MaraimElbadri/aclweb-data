{"sections":[{"title":"k-valued Non-Associative Lambek Categorial Grammars are not Learnable from Strings Denis Béchet INRIA, IRISA Campus Universitaire de Beaulieu Avenue du Général Leclerc 35042 Rennes Cedex France Denis.Bechet@irisa.fr Annie Foret Université de Rennes1, IRISA Campus Universitaire de Beaulieu Avenue du Général Leclerc 35042 Rennes Cedex France Annie.Foret@irisa.fr Abstract","paragraphs":["This paper is concerned with learning categorial grammars in Gold’s model. In contrast to k-valued classical categorial grammars, k-valued Lambek grammars are not learnable from strings. This result was shown for several variants but the question was left open for the weakest one, the non-associative variant NL. We show that the class of rigid and k-valued NL grammars is unlearnable from strings, for each k; this result is obtained by a specific construction of a limit point in the considered class, that does not use product operator. Another interest of our construction is that it provides limit points for the whole hierarchy of Lambek grammars, including the recent pregroup grammars. Such a result aims at clarifying the possible directions for future learning algorithms: it expresses the difficultyof learning categorial grammars from strings and the need for an adequate structure on examples."]},{"title":"1 Introduction","paragraphs":["Categorial grammars (Bar-Hillel, 1953) and Lambek grammars (Lambek, 1958; Lambek, 1961) have been studied in the fieldof natural language processing. They are well adapted to learning perspectives since they are completely lexicalized and an actual way of research is to determine the sub-classes of such grammars that remain learnable in the sense of Gold (Gold, 1967).","We recall that learning here consists to define an algorithm on a finite set of sentences that converge to obtain a grammar in the class that generates the examples. Let G be a class of grammars, that we wish to learn from positive examples. Formally, let L(G) denote the language associated with grammar G, and let V be a given alphabet, a learning algorithm is a function from finitesets of words in V","to G, such that for all G 2 G with L(G) =< ei >i2N there exists a grammar G0","2 G and there exists n","0 2 N such that: 8n > n0 (fe1; : : : ; eng) = G0","2 G with L(G0",") = L(G).","After pessimistic unlearnability results in (Gold, 1967), learnability of non trivial classes has been proved in (Angluin, 1980) and (Shinohara, 1990). Recent works from (Kanazawa, 1998) and (Nicolas, 1999) following (Buszkowski and Penn, 1990) have answered the problem for different sub-classes of classical categorial grammars (we recall that the whole class of classical categorial grammars is equivalent to context free grammars; the same holds for the class of Lambek grammars (Pentus, 1993) that is thus not learnable in Gold’s model).","The extension of such results for Lambek grammars is an interesting challenge that is addressed by works on logic types from (Dudau-Sofronie et al., 2001) (these grammars enjoy a direct link with Montague semantics), learning from structures in (Retor and Bonato, september 2001), complexity results from (Florêncio, 2002) or unlearnability results from (Foret and Le Nir, 2002a; Foret and Le Nir, 2002b); this result was shown for several variants but the question was left open for the basic variant, the non-associative variant NL.","In this paper, we consider the following question: is the non-associative variant NL of k-valued Lambek grammars learnable from strings; we answer by constructing a limit point for this class. Our construction is in some sense more complex than those for the other systems since they do not directly translate as limit point in the more restricted system NL.","The paper is organized as follows. Section 2 gives some background knowledge on three main aspects: Lambek categorial grammars ; learning in Gold’s model ; Lambek pregroup grammars that we use later as models in some proofs. Section 3 then presents our main result on NL (NL denotes non-associative Lambek grammars not allowing empty sequence): after a construction overview, we discuss some corollaries and then provide the details of proof. Section 4 concludes."]},{"title":"2 Background 2.1 Categorial Grammars","paragraphs":["The reader not familiar with Lambek Calculus and its non-associative version will find nice presentation in the first ones written by Lambek (Lambek, 1958; Lambek, 1961) or more recently in (Kandulski, 1988; Aarts and Trautwein, 1995; Buszkowski, 1997; Moortgat, 1997; de Groote, 1999; de Groote and Lamarche, 2002).","The types T p, or formulas, are generated from a set of primitive types P r, or atomic formulas by three binary connectives “ = ” (over), “ n ” (under) and “ ” (product): T p ::= P r j T p n T p j T p = T p j T p T p. As a logical system, we use a Gentzen-style sequent presentation. A sequent ‘ A is composed of a sequence of formulas which is the antecedent configurationand a succedent formula A.","Let be a fixed alphabet. A categorial grammar over is a finite relation G between and T p. If < c; A >2 G, we say that G assigns A to c, and we write G : c 7! A. 2.1.1 Lambek Derivation ‘L","The relation ‘L is the smallest relation ‘ between","T p+ and T p, such that for all ; 0","2 T p+","; ; 0","2","T p and for all A; B; C 2 T p :","; A; 0 ‘ C ‘ A (Cut)","; ; 0 ‘ C A ‘ A (Id)","‘ A ; B; 0 ‘ C =L","; B = A; ; 0 ‘ C ; A ‘ B =R ‘ B = A","‘ A ; B; 0 ‘ C nL","; ; A n B; 0 ‘ C A; ‘ B nR ‘ A n B","; A; B; 0 ‘ C L","; A B; 0 ‘ C","‘ A 0 ‘ B R","; 0 ‘ A B","We write L; for the Lambek calculus with empty antecedents (left part of the sequent). 2.1.2 Non-associative Lambek Derivation ‘NL","In the Gentzen presentation, the derivability relation of NL holds between a term in S and a formula in T p, where the term language is S ::= T pj(S; S). Terms in S are also called G-terms. A sequent is a pair ( ; A) 2 S T p. The notation [] represents a G-term with a distinguished occurrence of (with the same position in premise and conclusion of a rule). The relation ‘NL is the smallest relation ‘ between S and T p, such that for all ; 2 S and for all A; B; C 2 T p : [ A] ‘ C ‘ A (Cut) [] ‘ C A ‘ A (Id) ‘ A [ B] ‘ C =L [( B = A; )] ‘ C ( ; A) ‘ B =R ‘ B = A ‘ A [ B] ‘ C nL [( ; A n B)] ‘ C (A; ) ‘ B nR ‘ A n B [( A; B)] ‘ C L [ A B] ‘ C ‘ A ‘ B R ( ; ) ‘ (A B)","We write NL; for the non-associative Lambek calculus with empty antecedents (left part of the sequent). 2.1.3 Notes Cut elimination. We recall that cut rule can be eliminated in ‘L and ‘NL: every derivable sequent has a cut-free derivation.","Type order. The order ord(A) of a type A of L or","NL is definedby: ord(A) = 0 if A is a primitive type ord(C1 = C2) = max(ord(C1); ord(C2) + 1) ord(C1 n C2) = max(ord(C1) + 1; ord(C2)) ord(C1 C2) = max(ord(C1); ord(C2)) 2.1.4 Language.","Let G be a categorial grammar over . G generates a string c1 : : : cn 2 +","iff there are types A1; : : : ; An 2 T p such that: G : ci 7! Ai (1 i n) and A1; : : : ; An ‘L S: The language of G, written LL(G) is the set of strings generated by G. We definesimilarly LL;(G), LNL(G) and LNL;(G) replacing ‘L by ‘L;, ‘NL and ‘NL; in the sequent where the types are parenthesized in some way. 2.1.5 Notation.","In some sections, we may write simply ‘ instead of ‘L, ‘L;, ‘NL or ‘NL; . We may simply write L(G) accordingly. 2.1.6 Rigid and k-valued Grammars.","Categorial grammars that assign at most k types to each symbol in the alphabet are called k-valued grammars; 1-valued grammars are also called rigid grammars. Example 1 Let 1 = fJ ohn; M ary; likesg and let P r = fS; N g for sentences and nouns respectively. Let G1 = fJ ohn 7! N; M ary 7! N; likes 7! N n (S = N )g. We get (J ohn likes M ary) 2 LNL(G1) since ((N; N n (S = N )); N ) ‘NL S. G1 is a rigid (or 1-valued) grammar. 2.2 Learning and Limit Points We now recall some useful definitions and known properties on learning. 2.2.1 Limit Points","A class CL of languages has a limit point iff there exists an infinite sequence < Ln >n2N of languages in CL and a language L 2 CL such that: L0 ( L1 : : : ( ::: ( Ln ( : : : and L = S n2N Ln (L is a limit point of CL). 2.2.2 Limit Points Imply Unlearnability","The following property is important for our purpose. If the languages of the grammars in a class G have a limit point then the class G is unlearnable. 1 2.3 Some Useful Models For ease of proof, in next section we use two kinds of models that we now recall: free groups and pregroups introduced recently by (Lambek, 1999) as an alternative of existing type grammars. 2.3.1 Free Group Interpretation. Let F G denote the free group with generators P r, operation and with neutral element 1. We associate with each formula C of L or NL, an element in F G written [[C]] as follows: [[A]] = A if A is a primitive type [[C1 n C2]] = [[C1]] 1","[[C2]] [[C1 = C2]] = [[C1]] [[C2]] 1","[[C1 C2]] = [[C1]] [[C2]] We extend the notation to sequents by:","[[C1; C2; : : : ; Cn]] = [[C1]] [[C2]] [[Cn]] The following property states that F G is a model for L (hence for NL): if ‘L C then [[] ] =F G [[C]] 2.3.2 Free Pregroup Interpretation","Pregroup. A pregroup is a structure (P;","; ; l; r; 1) such that (P; ; ; 1) is a partially ordered","monoid2","and l; r are two unary operations on P","that satisfy for all a 2 P al","a 1 aal","and","aar","1 ar","a. Free pregroup. Let (P; ) be an ordered set of primitive types, P (  ) = fp(i)","j p 2 P; i 2 Zg is","the set of atomic types and T(P; ) =  P (  ) = fp (i1) 1 p","(in)","n j 0 k n; pk 2 P and ik 2 Zg is the set of types. For X and Y 2 T(P; ), X Y iif this relation is deductible in the following system where p; q 2 P , n; k 2 Z and X; Y; Z 2 T(P; ):","1","This implies that the class has infinite elasticity. A class CL of languages has infinite elasticity iff 9 < ei >i2N sentences 9 < Li >i2N languages in CL 8i 2 N : ei 62 Li and fe1; : : : ; eng Ln+1 .","2","We briefly recall that a monoid is a structure < M; ; 1 >, such that is associative and has a neutral element 1 (8x 2 M : 1 x = x 1 = x). A partially ordered monoid is a monoid M; ; 1) with a partial order that satisfies 8a; b; c: a b ) c a c b and a c b c. X X (Id) X Y Y Z (Cut) X Z XY Z (AL)","Xp(n) p(n+1)","Y Z X Y Z (AR)","X Y p(n+1) p(n)","Z","Xp(k) Y Z (INDL)","Xq(k) Y Z","X Y p(k) Z (INDR) X Y q(k)","Z","q p if k is even, and p q if k is odd This construction, proposed by Buskowski, de-fines a pregroup that extends on primitive types P to T(P; )3",". Cut elimination. As for L and NL, cut rule can be eliminated: every derivable inequality has a cut-free derivation. Simple free pregroup. A simple free pregroup is a free pregroup where the order on primitive type is equality. Free pregroup interpretation. Let FP denotes the simple free pregroup with P r as primitive types. We associate with each formula C of L or NL, an element in FP written [C] as follows:","[A] = A if A is a primitive type","[C1 n C2] = [C1]r","[C","2] [C1 = C2] = [C1][C2]l [C1 C2] = [C1][C2]","We extend the notation to sequents by: [A1; : : : ; An] = [A1] [An]","The following property states that FP is a model for","L (hence for NL): if ‘L C then [] FP [C]."]},{"title":"3 Limit Point Construction 3.1 Method overview and remarks Form of grammars.","paragraphs":["We define grammars Gn where A, B, Dn and En are complex types and S is the main type of each grammar: Gn = fa 7! A = B; b 7! Dn; c 7! En n Sg Some key points.","We prove that fak bc j 0 k ng L(G n) using the following properties:","3","Left and right adjoints are defined by (p(n)",")l","= p(n 1)",",","(p(n)",")r","= p(n+1)",", (XY )l = Y l","Xl","and (XY )r","= Y r","Xr",". We","write p for p(0)",". B ‘ A (but A 6‘ B) (A = B; Dn+1) ‘ Dn Dn ‘ En En ‘ En+1 we get: bc 2 L(Gn) since Dn ‘ En if w 2 L(Gn) then aw 2 L(Gn+1) since (A = B; Dn+1) ‘ Dn ‘ En ‘ En+1","The condition A 6‘ B is crucial for strictness of language inclusion. In particular: (A = B; A) 6‘ A, where A = D0","This construction is in some sense more complex than those for the other systems (Foret and Le Nir, 2002a; Foret and Le Nir, 2002b) since they do not directly translate as limit points in the more restricted system NL. 3.2 Definitionand Main Results Definitionsof Rigid grammars Gn and G","Definition1 Let p, q, S, three primitive types. We","define: A = D0 = E0 = q = (p n q) B = p Dn+1 = (A = B) n Dn En+1 = (A = A) n En Let Gn = 8 < : a 7! A = B = (q = (p n q)) = p b 7! Dn c 7! En n S 9 = ; Let G = fa 7! (p = p) b 7! p c 7! (p n S)g Main Properties Proposition 1 (language description)","L(Gn) = fak bc j 0 k ng","L(G ) = fak bc j 0 kg. From this construction we get a limit point and the following result. Proposition 2 (NL-non-learnability) The class of languages of rigid (or k-valued for an arbitrary k) non-associative Lambek grammars (not allowing empty sequence and without product) admits a limit point ; the class of rigid (or k-valued for an arbitrary k) non-associative Lambek grammars (not allowing empty sequence and without product) is not learnable from strings. 3.3 Details of proof for Gn","Lemma fak","bc j 0 k ng L(G n) Proof: It is relatively easy to see that for 0 k n, ak","bc 2 L(G n). We have to consider","((a (a(a | {z }","k b)) )c) and prove the following sequent in NL: (","(a (a z }| { ((A = B); : : : ; ((A = B); | {z }","k","b z }| { ((A = B) n n ((A = B) n | {z }","n A) ); );","c z }| { ((A = A) n n ((A = A) n | {z }","n A) ) n S)) ‘NL S Models of NL","For the converse, (for technical reasons and to ease proofs) we use both free group and free pregroup models of NL since a sequent is valid in NL only if its interpretation is valid in both models. Translation in free groups","The free group translation for the types of Gn is: [[p]] = p, [[q]] = q, [[S]] = S [[x = y]] = [[x]] [[y]] 1 [[x n y]] = [[x]] 1","[[y]] [[x y]] = [[x]] [[y]]","Type-raising disappears by translation: [[x = (y n x)]] = [[x]] ([[y]] 1","[[x]]) 1 = [[y]]","Thus, we get : [[A]] = [[D0]] = [[E0]] = [[q = (p n q)]] = p [[B]] = p [[A = B]] = [[A]] [[B]] 1","= pp 1","= 1","[[Dn+1]] = [[(A = B) n Dn]] = [[Dn]] = [[D0]] = p","[[En+1]] = [[(A = A) n En]] = [[En]] = [[E0]] = p Translation in free pregroups","The free pregroup translation for the types of Gn is: [p] = p, [q] = q, [S] = S [x n y] = [x]r","[y] [y = x] = [y][x]l [x y] = [x][y]","Type-raising translation:","[x = (y n x)] = [x]([y]r","[x])l","= [x][x]l","[y]","[x = (x n x)] = [x]([x]r","[x])l","= [x][x]l","[x] = [x]","Thus, we get:","[A] = [D0] = [E0] = [q = (p n q)] = qql","p","[B] = p","[A = B] = [A][B]l","= qql","ppl","[Dn+1] = [(A = B)]r [D","n] = ppr","qqr | {z } n+1","qql p","[En+1] = [(A = A) n En] = [A][A]l qql p = qql","p","Lemma L(Gn) fak","bak0 cak00","; 0 k; 0 k0 ; 0 k00","g Proof: Let n denote the type assignment by the rigid grammar Gn. Suppose n(w) ‘ S, using free groups [[ n(w)]] = S; - This entails that w has exactly one occurrence of c (since [[ n(c)]] = p 1","S and the other type images are either 1 or p) - Then, this entails that w has exactly one occurrence of b on the left of the occurrence of c (since [[ n(c)]] = p 1","S, [[ n(b)]] = p and [[ n(a)]] = 1)","Lemma L(Gn) fak","bc j 0 kg Proof: Suppose n(w) ‘ S, using pregroups [ n(w)] S. We can write w = ak","bak0 cak00 for","some k; k0","; k00 , such that:","[ n(w)] = qql","ppl | {z }","k ppr","qqr | {z } n","qql p qql","ppl | {z }","k0","pr","qqr S qql","ppl | {z }","k00","For q = 1, we get ppl |{z} k ppr |{z} n p ppl |{z} k0","pr S ppl |{z}","k00 S","and it yields p ppl |{z} k0","pr S ppl |{z}","k00 S.","We now discuss possible deductions (note that","ppl","ppl","ppl","= ppl","):","if k0","and k00","6= 0: pppl","pr","Sppl","S impossible.","if k0","6= 0 and k00 = 0: pppl","pr","S S impossible.","if k0","= 0 and k00 6= 0: ppr","Sppl","S impossible.","if k0","= k00","= 0: w 2 fak","bc j 0 kg","(Final) Lemma L(Gn) fak","bc j 0 k ng","Proof: Suppose n(w) ‘ S, using pregroups","[ n(w)] S. We can write w = ak","bc for some","k, such that :","[ n(w)] = qql","ppl","| {z }","k ppr","qqr | {z } n","qql ppr qqr","S We use the following property (its proof is in Appendix A) that entails that 0 k n.","(Auxiliary) Lemma:","if (1) X; Y; qql","p; pr qqr","; S S","where X 2 fppl ; qql","g","and Y 2 fqqr","; ppr","g then ","(2) nbalt(Xqql ) nbalt(qqr","Y )","(2bis) nbalt(Xppl ) nbalt(ppr","Y ) where nbalt counts the alternations of p’s and q’s sequences (forgetting/dropping their exponents). 3.4 Details of proof for G","Lemma fak","bc j 0 kg L(G ) Proof: As with Gn, it is relatively easy to see that for k 0, ak","bc 2 L(G ). We have to consider","((a (a(a | {z }","k b)) )c) and prove the following sequent in NL: (((p = p); : : : ; ((p = p); | {z }","k p) ); (p n S)) ‘NL S","Lemma L(G ) fak","bc j 0 kg Proof: Like for w 2 Gn, due to free groups, a word of L(G ) has exactly one occurrence of c and one occurrence of b on the left of c (since [[ (c)]] = p 1","S, [[ (b)]] = p and [[ (a)]] = 1).","Suppose w = ak","bak0 cak00 a similar discussion as","for Gn in pregroups, gives k0 = k00","= 0, hence the","result 3.5 Non-learnability of a Hierarchy of Systems An interest point of this construction: It provides a limit point for the whole hierarchy of Lambek grammars, and pregroup grammars. Limit point for pregroups The translation [ ] of Gn gives a limit point for the simple free pregroup since for i 2 f ; 0; 1; 2; : : : g: i(w) ‘NL S iff w 2 LNL(Gi) by definition; i(w) ‘NL S implies [ i(w)] S by models ; [ i(w)] S implies w 2 LNL(Gi) from above. Limit point for NL; The same grammars and languages work since for i 2 f ; 0; 1; 2; : : : g: i(w) ‘NL S iff [ i(w)] S from above ; i(w) ‘NL S implies i(w) ‘NL; S by hierarchy ; i(w) ‘NL; S implies [ i(w)] S by models. Limit point for L and L; The same grammars and languages work since for i 2 f ; 0; 1; 2; : : : g : i(w) ‘NL S iff [ i(w)] S from above ; i(w) ‘NL S implies i(w) ‘L S using hierarchy ; i(w) ‘L S implies i(w) ‘L; S using hierarchy ; i(w) ‘L; S implies [ i(w)] S by models. To summarize : w 2 LNL(Gi) iff [ i(w)] S iff w 2 LNL;(Gi) iff w 2 LL(Gi) iff w 2 LL;(Gi)"]},{"title":"4 Conclusion and Remarks Lambek grammars.","paragraphs":["We have shown that without empty sequence, non-associative Lambek rigid grammars are not learnable from strings. With this result, the whole landscape of Lambek-like rigid grammars (or k-valued for an arbitrary k) is now de-scribed as for the learnability question (from strings, in Gold’s model). Non-learnability for subclasses. Our construct is of order 5 and does not use the product operator. Thus, we have the following corollaries: Restricted connectives: k-valued NL, NL;, L and","L; grammars without product are not learnable","from strings. Restricted type order: - k-valued NL, NL;, L and L; grammars (without product) with types not greater than order 5 are not learnable from strings4",". - k-valued free pregroup grammars with types not greater than order 1 are not learnable from strings5",".","The learnability question may still be raised for NL","grammars of order lower than 5. 4 Even less for some systems. For example in L ;, all En","collapse to A","5","The order of a type pi","1","1 pi","k","k is the maximum of the ab-","solute value of the exponents: max(ji1j; : : : ; jikj). Special learnable subclasses. Note that however, we get specific learnable subclasses of k-valued grammars when we consider NL, NL;, L or L; without product and we bind the order of types in grammars to be not greater than 1. This holds for all variants of Lambek grammars as a corollary of the equivalence between generation in classical categorial grammars and in Lambek systems for grammars with such product-free types (Buszkowski, 2001). Restriction on types. An interesting perspective for learnability results might be to introduce reasonable restrictions on types. From what we have seen, the order of type alone (order 1 excepted) does not seem to be an appropriate measure in that context. Structured examples. These results also indicate the necessity of using structured examples as input of learning algorithms. What intermediate structure should then be taken as a good alternative between insufficientstructures (strings) and linguistic unrealistic structures (full proof tree structures) remains an interesting challenge."]},{"title":"References","paragraphs":["E. Aarts and K. Trautwein. 1995. Non-associative Lambek categorial grammar in polynomial time. Mathematical Logic Quaterly, 41:476–484.","Dana Angluin. 1980. Inductive inference of formal languages from positive data. Information and Control, 45:117–135.","Y. Bar-Hillel. 1953. A quasi arithmetical notation for syntactic description. Language, 29:47–58.","Wojciech Buszkowski and Gerald Penn. 1990. Categorial grammars determined from linguistic data by unification. Studia Logica, 49:431–454.","W. Buszkowski. 1997. Mathematical linguistics and proof theory. In van Benthem and ter Meulen (van Benthem and ter Meulen, 1997), chapter 12, pages 683–736.","Wojciech Buszkowski. 2001. Lambek grammars based on pregroups. In Philippe de Groote, Glyn Morill, and Christian Retoré, editors, Logical aspects of computational linguistics: 4th International Conference, LACL 2001, Le Croisic, France, June 2001, volume 2099. Springer-Verlag.","Philippe de Groote and Franco̧is Lamarche. 2002. Classical non-associative lambek calculus. Studia Logica, 71.1 (2).","Philippe de Groote. 1999. Non-associative Lambek calculus in polynomial time. In 8t","h Workshop on theorem proving with analytic tableaux and related methods, number 1617 in Lecture Notes in ArtificialIntelligence. Springer-Verlag, March.","Dudau-Sofronie, Tellier, and Tommasi. 2001. Learning categorial grammars from semantic types. In 13th Amsterdam Colloquium.","C. Costa Florêncio. 2002. Consistent Identification in the Limit of the Class k-valued is NP-hard. In LACL.","Annie Foret and Yannick Le Nir. 2002a. Lambek rigid grammars are not learnable from strings. In COL-ING’2002, 19th International Conference on Computational Linguistics, Taipei, Taiwan.","Annie Foret and Yannick Le Nir. 2002b. On limit points for some variants of rigid lambek grammars. In IC-GI’2002, the 6th International Colloquium on Grammatical Inference, number 2484 in Lecture Notes in ArtificialIntelligence. Springer-Verlag.","E.M. Gold. 1967. Language identification in the limit. Information and control, 10:447–474.","Makoto Kanazawa. 1998. Learnable classes of categorial grammars. Studies in Logic, Language and Information. FoLLI & CSLI. distributed by Cambridge University Press.","Maciej Kandulski. 1988. The non-associative lambek calculus. In W. Marciszewski W. Buszkowski and J. Van Bentem, editors, Categorial Grammar, pages 141–152. Benjamins, Amsterdam.","Joachim Lambek. 1958. The mathematics of sentence structure. American mathematical monthly, 65:154– 169.","Joachim Lambek. 1961. On the calculus of syntactic types. In Roman Jakobson, editor, Structure of language and its mathematical aspects, pages 166–178. American Mathematical Society.","J. Lambek. 1999. Type grammars revisited. In Alain Lecomte, Franco̧is Lamarche, and Guy Perrier, editors, Logical aspects of computational linguistics: Second International Conference, LACL ’97, Nancy, France, September 22–24,1997; selected papers, volume 1582. Springer-Verlag.","Michael Moortgat. 1997. Categorial type logic. In van Benthem and ter Meulen (van Benthem and ter Meulen, 1997), chapter 2, pages 93–177.","Jacques Nicolas. 1999. Grammatical inference as unification. Rapport de Recherche RR-3632, INRIA. http://www.inria.fr/RRRT/publications-eng.html.","Mati Pentus. 1993. Lambek grammars are context-free. In Logic in Computer Science. IEEE Computer Society Press.","Christian Retoré and Roberto Bonato. september 2001. Learning rigid lambek grammars and minimalist grammars from struc tured sentences. Third work-shop on Learning Language in Logic, Strasbourg.","T. Shinohara. 1990. Inductive inference from positive data is powerful. In The 1990 Workshop on Computational Learning Theory, pages 97–110, San Mateo, California. Morgan Kaufmann.","J. van Benthem and A. ter Meulen, editors. 1997. Handbook of Logic and Language. North-Holland Elsevier, Amsterdam."]},{"title":"Appendix A. Proof of Auxiliary Lemma (Auxiliary) Lemma:","paragraphs":["if (1) XY qql","ppr","qqr S S","where X 2 fppl ; qql","g","and Y 2 fqqr","; ppr","g then ","(2) nbalt(Xqql ) nbalt(qqr","Y )","(2bis) nbalt(Xppl ) nbalt(ppr","Y ) where nbalt counts the alternations of p’s and q’s sequences (forgetting/dropping their exponents). Proof: By induction on derivations in Gentzen style presentation of free pregroups (without Cut). Suppose XY ZS S where 8 < :","X 2 fppl","; qql g","Y 2 fqqr","; ppr g","Z 2 f(qql","ppr qqr","); (qql","qqr","); (qqr","); 1g We show that  nbalt(Xqql",") nbalt(qqr","Y ) nbalt(Xppl",") nbalt(ppr","Y )","The last inference rule can only be (AL)","Case (AL) on X: The antecedent is similar with","X0","instead of X, where X is obtained from X 0","by","insertion (in fact inserting ql","q in the middle of qql","as the replacement of qql","with qql","qql","or similarly","with p instead of q).","- By such an insertion: (i) nbalt(X 0","qql",") =","nbalt(Xqql ) (similar for p).","- By induction hypothesis: (ii) nbalt(X 0","qql",")","nbalt(qqr","Y ) (similar for p).","- Therefore from (i) (ii): nbalt(Xqql",")","nbalt(qqr","Y ) (similar for p).","Case (AL) on Y : The antecedent is XY 0","ZS","S where Y is obtained from Y 0","by inser-","tion (in fact insertion of ppr","or qqr","), such","that Y 0","2 fppr","; qqr g",". Therefore the induc-","tion applies nbalt(Xqql",") nbalt(qqr","Y 0",") and","nbalt(qqr","Y ) nbalt(qqr","Y 0",") (similar for p)","hence the result.","Case (AL) on Z ( Z non empty):","- if Z = (qql","ppr","qqr",") the antecedent is","XY Z0","S S, where Z0","= qql","qqr",".","- if Z = (qql qqr",") the antecedent is XY Z 0","S","S, where Z0 = qqr",";","- if Z = (qqr ) the antecedent is XY Z 0","S S,","where Z0","= .","In all three cases the hypothesis applies to XY Z 0","and gives the relationship between X and Y .","case (AL) between X and Y : Either X = X 00","qql","and Y = qqr","Y 00","or X = X00","ppl","and Y = ppr","Y 00",".","In the q case, the last inference step is the intro-","duction of ql","q: X00","qqr","Y 00","ZS S","X00 qql","| {z } X qqr","Y 00 | {z } Y ZS S","We now detail the q case. The antecedent can be","rewritten as X00","Y ZS S and we have: (i)","nbalt(Xqql",") = nbalt(X00 qql","qql",")","= nbalt(X00 qql",")","nbalt(Xppl",") = nbalt(X00 qql","ppl",")","= 1 + nbalt(X00","qql",")","nbalt(qqr","Y ) = nbalt(qqr qqr","Y 00",")","= nbalt(qqr Y 00",")","nbalt(ppr","Y ) = nbalt(ppr qqr","Y 00",")","= 1 + nbalt(qqr","Y 00",")","We can apply the induction hypothesis to","X00 Y ZS S and get (ii): nbalt(X00","qql",") nbalt(qqr","Y )","Finally from (i) (ii) and the induction hypothesis:","nbalt(Xqql",") = nbalt(X00 qql",")","nbalt(qqr Y )","nbalt(Xppl",") = 1 + nbalt(X00","qql",")","1 + nbalt(qqr","Y )","= 1 + nbalt(qqr","qqr","Y 00",")","= 1 + nbalt(qqr","Y 00",")","= nbalt(ppr Y ) The second case with p instead of q is similar."]}],"references":[{"authors":[{"first":"E.","last":"Aarts"},{"first":"K.","last":"Trautwein"}],"year":"1995","title":"Non-associative Lambek categorial grammar in polynomial time","source":"E. Aarts and K. Trautwein. 1995. Non-associative Lambek categorial grammar in polynomial time. Mathematical Logic Quaterly, 41:476–484."},{"authors":[{"first":"Dana","last":"Angluin"}],"year":"1980","title":"Inductive inference of formal languages from positive data","source":"Dana Angluin. 1980. Inductive inference of formal languages from positive data. Information and Control, 45:117–135."},{"authors":[{"first":"Y.","last":"Bar-Hillel"}],"year":"1953","title":"A quasi arithmetical notation for syntactic description","source":"Y. Bar-Hillel. 1953. A quasi arithmetical notation for syntactic description. Language, 29:47–58."},{"authors":[{"first":"Wojciech","last":"Buszkowski"},{"first":"Gerald","last":"Penn"}],"year":"1990","title":"Categorial grammars determined from linguistic data by unification","source":"Wojciech Buszkowski and Gerald Penn. 1990. Categorial grammars determined from linguistic data by unification. Studia Logica, 49:431–454."},{"authors":[{"first":"W.","last":"Buszkowski"}],"year":"1997","title":"Mathematical linguistics and proof theory","source":"W. Buszkowski. 1997. Mathematical linguistics and proof theory. In van Benthem and ter Meulen (van Benthem and ter Meulen, 1997), chapter 12, pages 683–736."},{"authors":[{"first":"Wojciech","last":"Buszkowski"}],"year":"2001","title":"Lambek grammars based on pregroups","source":"Wojciech Buszkowski. 2001. Lambek grammars based on pregroups. In Philippe de Groote, Glyn Morill, and Christian Retoré, editors, Logical aspects of computational linguistics: 4th International Conference, LACL 2001, Le Croisic, France, June 2001, volume 2099. Springer-Verlag."},{"authors":[{"first":"Philippe","last":"de Groote"},{"first":"Franco̧is","last":"Lamarche"}],"year":"2002","title":"Classical non-associative lambek calculus","source":"Philippe de Groote and Franco̧is Lamarche. 2002. Classical non-associative lambek calculus. Studia Logica, 71.1 (2)."},{"authors":[{"first":"Philippe","last":"de Groote"}],"year":"1999","title":"Non-associative Lambek calculus in polynomial time","source":"Philippe de Groote. 1999. Non-associative Lambek calculus in polynomial time. In 8t"},{"authors":[],"source":"h Workshop on theorem proving with analytic tableaux and related methods, number 1617 in Lecture Notes in ArtificialIntelligence. Springer-Verlag, March."},{"authors":[{"last":"Dudau-Sofronie"},{"last":"Tellier"},{"last":"Tommasi"}],"year":"2001","title":"Learning categorial grammars from semantic types","source":"Dudau-Sofronie, Tellier, and Tommasi. 2001. Learning categorial grammars from semantic types. In 13th Amsterdam Colloquium."},{"authors":[{"first":"C.","middle":"Costa","last":"Florêncio"}],"year":"2002","title":"Consistent Identification in the Limit of the Class k-valued is NP-hard","source":"C. Costa Florêncio. 2002. Consistent Identification in the Limit of the Class k-valued is NP-hard. In LACL."},{"authors":[{"first":"Annie","last":"Foret"},{"first":"Yannick","middle":"Le","last":"Nir"}],"year":"2002a","title":"Lambek rigid grammars are not learnable from strings","source":"Annie Foret and Yannick Le Nir. 2002a. Lambek rigid grammars are not learnable from strings. In COL-ING’2002, 19th International Conference on Computational Linguistics, Taipei, Taiwan."},{"authors":[{"first":"Annie","last":"Foret"},{"first":"Yannick","middle":"Le","last":"Nir"}],"year":"2002b","title":"On limit points for some variants of rigid lambek grammars","source":"Annie Foret and Yannick Le Nir. 2002b. On limit points for some variants of rigid lambek grammars. In IC-GI’2002, the 6th International Colloquium on Grammatical Inference, number 2484 in Lecture Notes in ArtificialIntelligence. Springer-Verlag."},{"authors":[{"first":"E.","middle":"M.","last":"Gold"}],"year":"1967","title":"Language identification in the limit","source":"E.M. Gold. 1967. Language identification in the limit. Information and control, 10:447–474."},{"authors":[{"first":"Makoto","last":"Kanazawa"}],"year":"1998","title":"Learnable classes of categorial grammars","source":"Makoto Kanazawa. 1998. Learnable classes of categorial grammars. Studies in Logic, Language and Information. FoLLI & CSLI. distributed by Cambridge University Press."},{"authors":[{"first":"Maciej","last":"Kandulski"}],"year":"1988","title":"The non-associative lambek calculus","source":"Maciej Kandulski. 1988. The non-associative lambek calculus. In W. Marciszewski W. Buszkowski and J. Van Bentem, editors, Categorial Grammar, pages 141–152. Benjamins, Amsterdam."},{"authors":[{"first":"Joachim","last":"Lambek"}],"year":"1958","title":"The mathematics of sentence structure","source":"Joachim Lambek. 1958. The mathematics of sentence structure. American mathematical monthly, 65:154– 169."},{"authors":[{"first":"Joachim","last":"Lambek"}],"year":"1961","title":"On the calculus of syntactic types","source":"Joachim Lambek. 1961. On the calculus of syntactic types. In Roman Jakobson, editor, Structure of language and its mathematical aspects, pages 166–178. American Mathematical Society."},{"authors":[{"first":"J.","last":"Lambek"}],"year":"1999","title":"Type grammars revisited","source":"J. Lambek. 1999. Type grammars revisited. In Alain Lecomte, Franco̧is Lamarche, and Guy Perrier, editors, Logical aspects of computational linguistics: Second International Conference, LACL ’97, Nancy, France, September 22–24,1997; selected papers, volume 1582. Springer-Verlag."},{"authors":[{"first":"Michael","last":"Moortgat"}],"year":"1997","title":"Categorial type logic","source":"Michael Moortgat. 1997. Categorial type logic. In van Benthem and ter Meulen (van Benthem and ter Meulen, 1997), chapter 2, pages 93–177."},{"authors":[{"first":"Jacques","last":"Nicolas"}],"year":"1999","title":"Grammatical inference as unification","source":"Jacques Nicolas. 1999. Grammatical inference as unification. Rapport de Recherche RR-3632, INRIA. http://www.inria.fr/RRRT/publications-eng.html."},{"authors":[{"first":"Mati","last":"Pentus"}],"year":"1993","title":"Lambek grammars are context-free","source":"Mati Pentus. 1993. Lambek grammars are context-free. In Logic in Computer Science. IEEE Computer Society Press."},{"authors":[{"first":"Christian","last":"Retoré"},{"first":"Roberto","middle":"Bonato.","last":"september"}],"year":"2001","title":"Learning rigid lambek grammars and minimalist grammars from struc tured sentences","source":"Christian Retoré and Roberto Bonato. september 2001. Learning rigid lambek grammars and minimalist grammars from struc tured sentences. Third work-shop on Learning Language in Logic, Strasbourg."},{"authors":[{"first":"T.","last":"Shinohara"}],"year":"1990","title":"Inductive inference from positive data is powerful","source":"T. Shinohara. 1990. Inductive inference from positive data is powerful. In The 1990 Workshop on Computational Learning Theory, pages 97–110, San Mateo, California. Morgan Kaufmann."},{"authors":[{"first":"J.","last":"van Benthem"},{"first":"A.","middle":"ter","last":"Meulen"},{"last":"editors"}],"year":"1997","title":"Handbook of Logic and Language","source":"J. van Benthem and A. ter Meulen, editors. 1997. Handbook of Logic and Language. North-Holland Elsevier, Amsterdam."}],"cites":[{"style":0,"text":"Bar-Hillel, 1953","origin":{"pointer":"/sections/1/paragraphs/0","offset":21,"length":16},"authors":[{"last":"Bar-Hillel"}],"year":"1953","references":["/references/2"]},{"style":0,"text":"Lambek, 1958","origin":{"pointer":"/sections/1/paragraphs/0","offset":60,"length":12},"authors":[{"last":"Lambek"}],"year":"1958","references":["/references/16"]},{"style":0,"text":"Lambek, 1961","origin":{"pointer":"/sections/1/paragraphs/0","offset":74,"length":12},"authors":[{"last":"Lambek"}],"year":"1961","references":["/references/17"]},{"style":0,"text":"Gold, 1967","origin":{"pointer":"/sections/1/paragraphs/0","offset":358,"length":10},"authors":[{"last":"Gold"}],"year":"1967","references":["/references/13"]},{"style":0,"text":"Gold, 1967","origin":{"pointer":"/sections/1/paragraphs/7","offset":45,"length":10},"authors":[{"last":"Gold"}],"year":"1967","references":["/references/13"]},{"style":0,"text":"Angluin, 1980","origin":{"pointer":"/sections/1/paragraphs/7","offset":114,"length":13},"authors":[{"last":"Angluin"}],"year":"1980","references":["/references/1"]},{"style":0,"text":"Shinohara, 1990","origin":{"pointer":"/sections/1/paragraphs/7","offset":134,"length":15},"authors":[{"last":"Shinohara"}],"year":"1990","references":["/references/23"]},{"style":0,"text":"Kanazawa, 1998","origin":{"pointer":"/sections/1/paragraphs/7","offset":171,"length":14},"authors":[{"last":"Kanazawa"}],"year":"1998","references":["/references/14"]},{"style":0,"text":"Nicolas, 1999","origin":{"pointer":"/sections/1/paragraphs/7","offset":192,"length":13},"authors":[{"last":"Nicolas"}],"year":"1999","references":["/references/20"]},{"style":0,"text":"Buszkowski and Penn, 1990","origin":{"pointer":"/sections/1/paragraphs/7","offset":218,"length":25},"authors":[{"last":"Buszkowski"},{"last":"Penn"}],"year":"1990","references":["/references/3"]},{"style":0,"text":"Pentus, 1993","origin":{"pointer":"/sections/1/paragraphs/7","offset":484,"length":12},"authors":[{"last":"Pentus"}],"year":"1993","references":["/references/21"]},{"style":0,"text":"Dudau-Sofronie et al., 2001","origin":{"pointer":"/sections/1/paragraphs/8","offset":126,"length":27},"authors":[{"last":"Dudau-Sofronie"},{"last":"al."}],"year":"2001","references":["/references/9"]},{"style":0,"text":"Florêncio, 2002","origin":{"pointer":"/sections/1/paragraphs/8","offset":306,"length":15},"authors":[{"last":"Florêncio"}],"year":"2002","references":["/references/10"]},{"style":0,"text":"Nir, 2002a","origin":{"pointer":"/sections/1/paragraphs/8","offset":368,"length":10},"authors":[{"last":"Nir"}],"year":"2002a","references":[]},{"style":0,"text":"Nir, 2002b","origin":{"pointer":"/sections/1/paragraphs/8","offset":393,"length":10},"authors":[{"last":"Nir"}],"year":"2002b","references":[]},{"style":0,"text":"Lambek, 1958","origin":{"pointer":"/sections/2/paragraphs/0","offset":142,"length":12},"authors":[{"last":"Lambek"}],"year":"1958","references":["/references/16"]},{"style":0,"text":"Lambek, 1961","origin":{"pointer":"/sections/2/paragraphs/0","offset":156,"length":12},"authors":[{"last":"Lambek"}],"year":"1961","references":["/references/17"]},{"style":0,"text":"Kandulski, 1988","origin":{"pointer":"/sections/2/paragraphs/0","offset":191,"length":15},"authors":[{"last":"Kandulski"}],"year":"1988","references":["/references/15"]},{"style":0,"text":"Aarts and Trautwein, 1995","origin":{"pointer":"/sections/2/paragraphs/0","offset":208,"length":25},"authors":[{"last":"Aarts"},{"last":"Trautwein"}],"year":"1995","references":["/references/0"]},{"style":0,"text":"Buszkowski, 1997","origin":{"pointer":"/sections/2/paragraphs/0","offset":235,"length":16},"authors":[{"last":"Buszkowski"}],"year":"1997","references":["/references/4"]},{"style":0,"text":"Moortgat, 1997","origin":{"pointer":"/sections/2/paragraphs/0","offset":253,"length":14},"authors":[{"last":"Moortgat"}],"year":"1997","references":["/references/19"]},{"style":0,"text":"Groote, 1999","origin":{"pointer":"/sections/2/paragraphs/0","offset":272,"length":12},"authors":[{"last":"Groote"}],"year":"1999","references":[]},{"style":0,"text":"Groote and Lamarche, 2002","origin":{"pointer":"/sections/2/paragraphs/0","offset":289,"length":25},"authors":[{"last":"Groote"},{"last":"Lamarche"}],"year":"2002","references":[]},{"style":0,"text":"Lambek, 1999","origin":{"pointer":"/sections/2/paragraphs/29","offset":308,"length":12},"authors":[{"last":"Lambek"}],"year":"1999","references":["/references/18"]},{"style":0,"text":"Nir, 2002a","origin":{"pointer":"/sections/3/paragraphs/19","offset":95,"length":10},"authors":[{"last":"Nir"}],"year":"2002a","references":[]},{"style":0,"text":"Nir, 2002b","origin":{"pointer":"/sections/3/paragraphs/19","offset":120,"length":10},"authors":[{"last":"Nir"}],"year":"2002b","references":[]},{"style":0,"text":"Buszkowski, 2001","origin":{"pointer":"/sections/4/paragraphs/14","offset":480,"length":16},"authors":[{"last":"Buszkowski"}],"year":"2001","references":["/references/5"]}]}
