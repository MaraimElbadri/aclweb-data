{"sections":[{"title":"[TALAF-O.7] 147","paragraphs":["21¤̂me Traitement Automatique des Langues Naturelles, Marseille, 2014"]},{"title":"Etude et conception d’́un correcteur orthographique pour la langue haoussa Lawaly Salifou et Harouna Naroua D'̂partement de Math'̂matiques et Informatique, Facult'̂ des Sciences et Techniques Universit'̂ Abdou Moumouni, BP 10662 –́ Niamey, NIGER salifoumma@yahoo.fr, hnaroua@yahoo.com  R'̂sum'̂.","paragraphs":["Dans cet article, un correcteur d’́orthographe a '̂t'̂ con§̂u, d'̂velopp'̂ et test'̂ pour la langue haoussa qui est la deuxi¤̂me langue la plus parl'̂e en Afrique et ne disposant encore pas d’́outils de traitement automatique. La pr'̂sente '̂tude est une contribution pour le traitement automatique de la langue haoussa. Nous avons mis en œ́uvre les techniques et m'̂thodes prouv'̂es pour d’́autres langues afin de concevoir un correcteur orthographique pour le haoussa. Le correcteur con§̂u au bout de ce travail exploite pour l’́essentiel le dictionnaire de Mijinguini et les caract'̂ristiques de l’́alphabet haoussa. Apr¤̂s un '̂tat des lieux sur la correction orthographique et l’́informatisation du haoussa, nous avons opt'̂ pour les structures de donn'̂es trie et table de hachage pour implanter le dictionnaire. La distance d’́'̂dition et les sp'̂cificit'̂s de l’́alphabet haoussa ont '̂t'̂ mises ̂profit pour traiter et corriger les erreurs d’́orthographe. L’́impl'̂mentation du correcteur orthographique a '̂t'̂ faite sur un '̂diteur sp'̂cial d'̂velopp'̂ ̂cet effet (LyTextEditor) mais aussi comme une extension (add-on) pour OpenOffice.org. Une comparaison a '̂t'̂ faite sur les performances des deux structures de donn'̂es utilis'̂es."]},{"title":"Abstract.","paragraphs":["In this paper, we have designed, implemented and tested a spell corrector for the Hausa language which is the second most spoken language in Africa and do not yet have processing tools. This study is a contribution to the automatic processing of the Hausa language. We used existing techniques for other languages and adapted them to the special case of the Hausa language. The corrector designed operates essentially on Mijinguini’́s dictionary and characteristics of the Hausa alphabet. After a careful study of the existing spell checking and correcting techniques and the state of art in the computerization o f the Hausa language, we opted for the data structures trie and hash table to represent the dictionary. We used the edit distance and the specificities of the Hausa alphabet to detect and correct spelling errors. The implementation of the spell corrector has been made on a special editor developed for that purpose (LyTexEditor) but also as an extension (add-on) for OpenOffice.org. A comparison was made on the performance of the two data structures used."]},{"title":"Mots-cl'̂s:","paragraphs":["Traitement automatique des langues, informatisation du haoussa, langues africaines, correcteur orthographique."]},{"title":"Keywords:","paragraphs":["Natural Language Processing, computerization of Hausa, African languages, spell checker, spell corrector ."]},{"title":"1 Introduction","paragraphs":["Le traitement automatique des langues naturelles (TALN) a plusieurs applications industrielles dont, entre autres, la v'̂rification et la correction de l’́orthographe et de la grammaire, l’́indexation de texte et l’́extraction d’́informations ̂ partir d’́Internet, la reconnaissance vocale, la synth¤̂se vocale, le contr·̂le vocal des robots domestiques, les syst¤̂mes de r'̂ponse automatique et la traduction automatique (Kukich, 1992) et (Pierre, 2006). Parmi ces applications, la correction orthographique est de loin la plus r'̂pandue. En effet, elle est int'̂gr'̂e ̂des outils informatiques utilis'̂s chaque jour par des millions de personnes ̂travers le monde. Les programmes informatiques concernant l'orthographe sont de deux sortes : les v'̂rificateurs d'orthographe et les correcteurs orthographiques. Un v'̂rificateur d'orthographe d'̂tecte, dans un texte donn'̂ en entr'̂e, les mots qui sont incorrects. Un correcteur orthographique d'̂tecte en m“̂me temps les erreurs d'orthographes et cherche le mot correct le plus probable (Peterson, 1980). La correction peut “̂tre automatique, dans le cas d'un synth'̂tiseur vocal par exemple, ou interactif permettant ̂l'utilisateur de choisir le mot voulu parmi plusieurs suggestions (Kukich, 1992). Cette deuxi¤̂me approche est celle de la plupart des logiciels de traitement de texte. Des tels programmes sont g'̂n'̂ralement con§̂us pour fonctionner pour une langue donn'̂e. La correction orthographique est, de"]},{"title":"[TALAF-O.7] 148","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA nos jours, quasi-pr'̂sente dans toutes les applications informatiques o„̂ du texte est appel'̂ ̂“̂tre entr'̂ par l'utilisateur. Celui-ci est g'̂n'̂ralement avis'̂ d'une saisie incorrecte par un soulignement en rouge du mot erron'̂. Comme exemples de telles applications, nous pouvons citer : les logiciels de traitement de texte, les clients de messagerie, les '̂diteurs de code source et les environnements de programmation, les moteurs de recherche sur Internet. Les causes d'erreurs sont de plusieurs ordres et on rencontre plus d'une fa§̂on de les classifier (Suzan, 2002). Les plus importantes causes sont l’́ignorance de l’́auteur, les erreurs typographiques et les erreurs de transmission et de stockage (Peterson, 1980). Un correcteur orthographique accomplit deux fonctions essentielles, l'une apr¤̂s l'autre : la d'̂tection d’́abord et ensuite la correction d'erreurs d'orthographe. Les m'̂thodes de d'̂tection et de correction fonctionnent selon trois approches (Kukich, 1992):","•́ La d'̂tection d'erreurs consistant en des mots orthographiquement '̂trangers ̂la langue par exemple 'grafe' '̂crit ̂la place de 'girafe'.","•́ La correction de mot isol'̂ qui consiste ̂corriger le mot pr'̂c'̂demment d'̂tect'̂ en le consid'̂rant seul sans tenir compte des mots qui l'entourent.","•́ La d'̂tection et la correction contextuelles d'erreurs o„̂ chaque mot est consid'̂r'̂ en tenant compte du contexte. Ce qui permet de corriger les erreurs orthographiques m“̂me quand elle consiste en des mots pr'̂sents dans la langue mais qui sont mal plac'̂s. C'est le cas par exemple du mot 'dessert' saisi ̂la place de 'd'̂sert'."]},{"title":"2 Techniques et algorithmes de d'̂tection et de correction d'erreurs","paragraphs":["La recherche de solutions au probl¤̂me de correction orthographique de texte est rest'̂e, depuis longtemps, un d'̂fi. Plusieurs chercheurs se sont pench'̂s sur le probl¤̂me et, gr¢̂ce ̂leurs efforts, diverses techniques et de nombreux algorithmes ont vu le jour. La d'̂tection d’́erreurs consiste ̂trouver les mots orthographiquement incorrects dans un texte. Un mot consid'̂r'̂ comme erron'̂ est alors marqu'̂ par l'application charg'̂e de v'̂rifier l'orthographe. Si le mot est vraiment erron'̂ –́ parce que ce n'est pas toujours le cas –́ on dit qu'une erreur est d'̂tect'̂e. Les recherches dans ce domaine ont '̂t'̂ effectu'̂es par de nombreux auteurs comme"]},{"title":"(Enguehard et al.,","paragraphs":["2011). Les principales techniques utilis'̂es pour l'identification de mots erron'̂es dans un texte sont soit bas'̂es sur l'analyse des n-grammes, soit sur la recherche dans un dictionnaire (Kukich, 1992). Un algorithme pour la d'̂tection ̂base d'un dictionnaire est donn'̂ par (Peterson, 1980). La table de hachage est l'une des structures de donn'̂es la plus utilis'̂e pour r'̂duire le temps de r'̂ponse lors de la recherche dans un dictionnaire (Kukich, 1992). L’́id'̂e de la table de hachage fut introduite pour la premi¤̂re fois en 1953 (Knuth, 1973). Elle a l'avantage de permettre, gr¢̂ce au code de hachage, un acc¤̂s s'̂lectif au mot recherch'̂. Ce qui r'̂duit consid'̂rablement le temps de r'̂ponse. Mais l'inconv'̂nient majeur est de trouver une fonction de hachage qui admette tr¤̂s peu de collisions et qui donne des indices r'̂guli¤̂rement r'̂partis dans l'intervalle consid'̂r'̂. Les arbres binaires de recherche sont surtout utiles pour v'̂rifier si un mot donn'̂ fait partie d'un ensemble plus large de mots qui est ici le dictionnaire. Il existe plusieurs variantes d'arbres binaires de recherche qui ont '̂t'̂ utilis'̂s aux fins d'acc'̂l'̂rer la recherche dans un dictionnaire dans le cadre de la v'̂rification orthographique. Les automates finis ont '̂galement '̂t'̂ utilis'̂s dans certains algorithmes de recherche dans un dictionnaire ou dans un texte. L'un des algorithmes c'̂l¤̂bres dans ce domaine est celui de (Aho, Corasick, 1975). L'algorithme consiste ̂avancer dans une structure de donn'̂es abstraite appel'̂e dictionnaire qui contient le ou les mots recherch'̂s en lisant les lettres du texte une par une. La structure de donn'̂es est implant'̂e de mani¤̂re efficace, ce qui garantit que chaque lettre du texte n'est lue qu'une seule fois. G'̂n'̂ralement le dictionnaire est implant'̂ ̂l'aide d'un trie ou arbre digital auquel on rajoute des liens suffixes. Un trie peut “̂tre vu comme la repr'̂sentation de la fonction de transitions d'un automate fini d'̂terministe. Une fois le dictionnaire implant'̂, l'algorithme a une complexit'̂ lin'̂aire en la taille du texte et des chafînes recherch'̂es. Bien que la technique des n-grammes calcul'̂s ̂partir d'un dictionnaire soit bonne, elle offre moins de pr'̂cision que les techniques utilisant toutes les informations du dictionnaire. Mais ces derni¤̂res s'av¤̂rent gourmandes en temps lorsque la structure de donn'̂es impl'̂mentant le dictionnaire est mal choisie. Une '̂tude comparative a prouv'̂ que la table de hachage offre des meilleures performances que l’́AVL tree, le Red-Black tree et la Skip list (Mark, 2009). La comparaison de cinq structures de donn'̂es a '̂t'̂ effectu'̂e dans le cadre du dictionnaire Punjabi (Lehal, Singh, 2000). Il s’́agit de l’́arbre binaire de recherche, le trie, le ‘́ternary search tree’́, le 'multi-way tree' et le 'reduced memory method tree'. Il en r'̂sulte que l'arbre binaire de recherche (ABR) est la structure de donn'̂e la plus convenable en termes de"]},{"title":"[TALAF-O.7] 149","paragraphs":["ETUDE ET CONCEPTION D’́UN CORRECTEUR ORTHOGRAPHIQUE POUR LA LANGUE HAOUSSA m'̂moire utilis'̂e et de temps. Mais l’́ABR est limit'̂ lorsqu'il s'agit de sugg'̂rer une liste de candidats pour la correction ou de trouver tous les mots diff'̂rents d'une ou de deux lettres. Cette limitation peut “̂tre lev'̂e par l'utilisation d'un trie qui offre pratiquement la m“̂me complexit'̂ en temps que l'ABR. Les deux structures de donn'̂es les mieux indiqu'̂es pour impl'̂menter un dictionnaire seraient la table de hachage et le trie. La correction d'erreurs fait r'̂f'̂rence au fait de doter les v'̂rificateurs orthographiques de la capacit'̂ ̂corriger les erreurs d'̂tect'̂es. Cela consiste ̂trouver les mots du dictionnaire (ou lexique) qui sont similaires d'une certaine fa§̂on au mot mal orthographi'̂. La t¢̂che d'un correcteur orthographique se compose donc de trois sous-t¢̂ches : d'̂tecter les erreurs, g'̂n'̂rer les corrections possibles et classer les corrections sugg'̂r'̂es. Pour y arriver, une vari'̂t'̂ de techniques fut invent'̂e. Chacune d'elles est apparent'̂e soit ̂la correction de mot inconnu, soit ̂la correction de mot mal plac'̂, ou aux deux ̂la fois. Les erreurs d'orthographe peuvent “̂tre d'ordre typographique, cognitif ou phon'̂tique. Les erreurs typographiques interviennent lorsque les touches du clavier sont appuy'̂es dans le mauvais ordre (exemple : mian au lieu de main). Les erreurs cognitives r'̂sultent de l'ignorance de la bonne orthographe du mot (exemple : s'̂cretaire au lieu de secr'̂taire). Les erreurs phon'̂tiques constituent des cas d'erreurs cognitives. Une erreur phon'̂tique fait r'̂f'̂rence ̂un mot erron'̂ qui se prononce de la m“̂me fa§̂on que le mot correct (exemple : apeler / appeler). Les taux d’́erreurs d’́orthographe dans les textes dactylographi'̂s sont entre 1 et 3% (Grudin, 1983). (Damerau, 1964) pr'̂cise que 80% de ces erreurs sont de l'un des types suivants: •́ Insertion d'une lettre suppl'̂mentaire •́ Absence d'une lettre (suppression) •́ Substitution d'une lettre par une autre •́ Permutation de deux lettres. La distance minimum d''̂dition ou simplement la distance d''̂dition est jusqu'aujourd'hui la technique la plus utilis'̂e dans la correction des erreurs d’́orthographe. Elle a '̂t'̂ appliqu'̂e dans presque toutes les fonctions de correction orthographique dont les '̂diteurs de texte et les interfaces de langage de commande. Le premier algorithme de correction d'orthographe ̂base de cette technique '̂tait r'̂alis'̂ par (Damerau, 1964). Presque ̂la m“̂me p'̂riode, Levenshtein d'̂veloppa aussi un algorithme similaire et qui semble “̂tre le plus utilis'̂. Plusieurs autres algorithmes sur la distance d''̂dition virent le jour par la suite. La distance d''̂dition est d'̂finie par Wagner comme '̂tant le nombre minimum d'op'̂rations d''̂dition requises pour transformer un mot en un autre (Kukich, 1992). Ces op'̂rations sont l’́insertion, la suppression, la substitution et la transposition. Dans la plupart des cas, la correction d'une erreur d'orthographe n'̂cessite l'insertion, la suppression ou la substitution d'une seule lettre ou la transposition de deux lettres. Quand un mot erron'̂ peut “̂tre transform'̂ en un mot du dictionnaire par l'inversion d'une de ces op'̂rations, le mot du dictionnaire est consid'̂r'̂ comme une correction plausible. Afin de r'̂duire le temps de recherche, on utilise la technique de la distance d''̂dition invers'̂e.Une autre approche pour r'̂duire le nombre de comparaisons consiste ̂trier ou ̂partitionner le dictionnaire selon certains crit¤̂res (ordre alphab'̂tique, longueur des mots, occurrence des mots). Beaucoup d’́autres techniques sont '̂galement utilis'̂es dans la correction d’́erreurs comme : la cl'̂ de similarit'̂, les syst¤̂mes de r¤̂gles, les techniques bas'̂es sur les n-grammes, les techniques probabilistes et les r'̂seaux de neurones. Cependant, La technique la plus largement utilis'̂e dans la correction demeure la distance d''̂dition (Hsuan, 2008). Elle a une complexit'̂ en temps de"]},{"title":"( )mn ·́O","paragraphs":[", avec n et m les tailles respectives des deux mots ̂comparer. Une technique d'̂velopp'̂e par (Horst, 1993) alliant automate et distance d''̂dition a '̂t'̂ utilis'̂e pour une recherche rapide du mot correct le plus proche d’́un mot erron'̂. Elle a une complexit'̂ en temps lin'̂aire par rapport ̂la longueur du mot erron'̂, ind'̂pendamment de la taille du dictionnaire. Mais la complexit'̂ en espace de la m'̂thode de (Horst, 1993) est exponentielle ("]},{"title":"           O ∑","paragraphs":["= N i i"]},{"title":"A","paragraphs":["1"]},{"title":"exp.3","paragraphs":[", les Ai '̂tant les mots du dictionnaire)."]},{"title":"3 Etat des lieux sur l’́informatisation du haoussa","paragraphs":["Le haoussa (s''̂crit aussi hausa ou hawsa) fait partie de la famille des langues afro-asiatiques. Il appartient au groupe des langues tchadiques (sous-groupe des langues tchadiques occidentales). Compar'̂ aux autres langues africaines, le"]},{"title":"[TALAF-O.7] 150","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA haoussa est remarquablement unitaire. On distingue le haoussa standard (dialecte de Kano) du dialecte de l'ouest (Sokoto), des dialectes nig'̂riens (Tibiri, Dogondoutchi, Filingu'̂) et bien d’́autres (http://www.humnet.ucla.edu/humnet/aflang/Hausa/hausa.html). Du point de vue vocalique, les mots haoussa supportent des tons hauts et des tons bas et on y observe une flexion de genre et de nombre (Mijinguini, Naroua, 2012). G'̂ographiquement, le haoussa est la deuxi¤̂me langue la plus parl'̂e en Afrique et la plus r'̂pandue en Afrique noire avec environ cent millions de locuteurs ̂travers le monde. Le haoussa est aujourd'hui diffus'̂ par les grandes stations radiophoniques du monde telles que VOA (t̂ats-Unis), BBC (Grande-Bretagne), CRI (Chine), RFI (France), IRIB (Iran), Deutsche Welle (Allemagne), Radio Moscou (Russie). Au Niger, le haoussa et les autres langues nationales sont utilis'̂es par les m'̂dias nationaux, r'̂gionaux et locaux, publics comme priv'̂s (Maman, Seydou, 2010). Sur le plan cin'̂matographique, l'industrie de vid'̂o en langue haoussa a connu un progr¤̂s remarquable. En effet, ce sont plus de 1000 films haoussa qui sont produits chaque ann'̂e dont la quasi-totalit'̂ vient du Nig'̂ria. La pr'̂sence du haoussa sur Internet est tr¤̂s pr'̂caire. C'est malheureusement le cas de toutes les langues africaines malgr'̂ que celles-ci repr'̂sentent 30% des langues du monde (Van Der, Gilles-Maurice, 2003). Le c'̂l¤̂bre moteur de recherche Google, le navigateur Mozilla Firefox et bien d'autres logiciels et gadgets '̂lectroniques (t'̂l'̂phones mobiles notamment) disposent aujourd'hui d'une interface en langue haoussa. L'identifiant ISO de la langue haoussa est hau ou ha (ISO 639-3 et ISO 639-1). Sur le plan acad'̂mique, les premiers po¤̂mes compos'̂s en haoussa, '̂crits en alphabet arabe adapt'̂ ̂la notation des langues africaines (àjami), datent du d'̂but du XIXe si¤̂cle. ̂cette '̂poque '̂galement prend naissance une tradition de chroniques versifi'̂es en haoussa, dont la plus connue est la Chronique de Kano (not'̂e '̂galement en àjami). ̂cette tradition s'est ajout'̂e dans les ann'̂es 1930, ̂la suite de la colonisation britannique, une production litt'̂raire en alphabet latin (pi¤̂ces de th'̂¢̂tre, contes, nouvelles, romans, po'̂sie) (Bernard, 2000). La langue haoussa est aujourd'hui enseign'̂e dans des universit'̂s africaines et occidentales (Niger, Nigeria, Libye, Inalco (Paris), Universit'̂ de Boston, UCLA). Le haoussa '̂crit est essentiellement fond'̂ sur le dialecte de Kano et il existe deux syst¤̂mes d''̂criture, l'un bas'̂ sur l'alphabet arabe (Àjami), et l'autre utilisant l'alphabet latin (Boko) comme le montre la Figure 1. On remarque, dans le cas du Boko, la pr'̂sence de 4 caract¤̂res sp'̂ciaux suppl'̂mentaires comme consonnes (ɓ, ɗ, ƙ et ƴ) et l'arr“̂t glottale (’́).  ","FIGURE 1 : Syst¤̂mes d''̂criture du haoussa La transcription latine, introduite par les Anglais au Nigeria au d'̂but du 20¤̂me","si¤̂cle, s'est impos'̂e en 1930 comme orthographe officielle (http://www.humnet.ucla.edu/humnet/aflang/Hausa/hausa.html). Au Niger, il a fallu attendre 1981 pour rendre officielle une orthographe du haoussa utilisant l’́alphabet latin. Cet alphabet fut compl'̂t'̂ en 1999 par un arr“̂t'̂ minist'̂riel. Il s’́agit du m“̂me alphabet que celui de la Figure 1 (b) auquel sont ajout'̂s les digraphes fy, gw, kw, ky, ƙw et ƙy repr'̂sentant des sons sp'̂cifiques et consid'̂r'̂s comme des consonnes. Le m“̂me arr“̂t'̂ d'̂finit les symboles du Tableau 1 pour la ponctuation."]},{"title":"[TALAF-O.7] 151","paragraphs":["ETUDE ET CONCEPTION D’́UN CORRECTEUR ORTHOGRAPHIQUE POUR LA LANGUE HAOUSSA  TABLEAU 1 : Ponctuation officielle du texte haoussa au Niger Le Boko est devenu la convention d’́'̂criture dominante pour les documents scientifiques et '̂ducatifs, les mass-m'̂dias, l’́information et la communication g'̂n'̂rale depuis la deuxi¤̂me moiti'̂ du 20¤̂me","si¤̂cle (Ahmed, 2009). Les ressources linguistiques constituent la premi¤̂re '̂tape dans l'informatisation d'une langue (Chanard, Popescu-Belis, 2001). C'est gr¢̂ce ̂elles qu'il peut “̂tre possible de concevoir les outils informatiques ('̂diteurs, correcteurs d'orthographe et de grammaire, dictionnaire '̂lectronique ...) adapt'̂s ̂la langue et d'assurer sa pr'̂sence dans le cyberespace. Mais ces ressources sont rares pour les langues africaines. C’́est ainsi que des projets et '̂tudes d'̂ĵr'̂alis'̂s ou en cours visent la constitution ou l'exploitation de ces ressources linguistiques pour une informatisation totale des langues africaines. Par exemple, le projet PAL vise l’́adaptation des TIC aux langues africaines afin de les rendre plus accessibles aux populations autochtones (Don, 2011). Bien que le premier travail sur la lexicographie du haoussa moderne date de longtemps, le dictionnaire de (Bargery, 1934) parait “̂tre le plus important et le plus large (avec 39000 mots). Il est bilingue haoussa-anglais et renferme une section de vocabulaire anglais-haoussa. Dans leur gen¤̂se de la lexicographie du haoussa, (Roxana, Paul, 2001) mentionnent plusieurs autres dictionnaires avant d’́'̂voquer le dictionnaire bilingue haoussa-fran§̂ais du linguiste nig'̂rien et natif haoussa (Minjinguini, 2003). Ce dictionnaire est, selon eux, «́ la plus r'̂cente r'̂f'̂rence scientifique en lexicographie du haoussa »́. Il comprend 10000 entr'̂es bien illustr'̂es et se base largement sur le haoussa standard du Niger, constitu'̂ essentiellement du dialecte de Damagaram au lieu de celui de Kano qui dominait dans toutes les recherches lexicographiques pr'̂c'̂dentes. Rappelons de passage que (Paul, 2000) est l’́auteur de l’́œ́uvre la plus compl¤̂te sur la grammaire moderne du haoussa. La majorit'̂ des langues bien dot'̂es disposent de corpus bien form'̂s. Ce qui n’́est pas le cas pour les langues africaines. Les recherches actuelles sur ces langues choisissent comme alternative transitoire des corpus '̂crits et oraux. Une autre alternative pour les langues africaines consiste ̂constituer des corpus ̂partir du Web (Gilles-Maurice, 2002). L’́entr'̂e ou la saisie de texte est une autre difficult'̂ ̂surmonter dans l’́informatisation du haoussa et des langues africaines. En effet, les claviers compatibles ̂ces langues ne sont pas encore mis au point. Saisir certains caract¤̂res haoussa sur un clavier demande aujourd’́hui une certaine acrobatie. La solution pour contourner cette difficult'̂ consiste en l’́utilisation de claviers virtuels permettant d''̂crire tous les caract¤̂res des langues africaines. Une '̂valuation (Enguehard, Naroua, 2008) de ce genre de claviers concernant 5 langues du Niger (Fulfulde, Haoussa, Kanuri, Songhai-Zarma, Tamashek) a conclu sur la recommandation, pour ces langues, du clavier virtuel du laboratoire LLACAN. Les logiciels de traitement de texte tels que MS Word et OpenOffice.org Writer peuvent “̂tre utilis'̂s pour la correction d'un texte '̂crit en haoussa gr¢̂ce ̂la constitution de dictionnaire utilisateur. Cependant, toutes les m'̂thodes existantes restent limit'̂es et inad'̂quates dans le cas des langues africaines ; d’́o„̂ le besoin de concevoir des correcteurs orthographiques adapt'̂s ̂ces langues (Enguehard, Mbodj, 2004) . Malgr'̂ la raret'̂ des ressources linguistiques, il est bien possible de mettre au point ces correcteurs quitte ̂les am'̂liorer dans le temps."]},{"title":"[TALAF-O.7] 152","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA Certains logiciels populaires (MS Word, OpenOffice.org Writer, Firefox, etc.) offrant la possibilit'̂ de leur cr'̂er des extensions (add-ons, plugins), il serait avantageux de concevoir des correcteurs d’́orthographe pouvant facilement leur “̂tre int'̂gr'̂s."]},{"title":"4 Conception et r'̂alisation d'un correcteur orthographique pour le haoussa","paragraphs":["Apr¤̂s synth¤̂se des techniques de d'̂tection et de correction d’́erreurs d’́orthographe, la pr'̂sentation de la langue haoussa et le point sur son informatisation, nous nous attelons ̂la conception et la r'̂alisation d’́un correcteur orthographique pour le haoussa. Nous en exposons les approches et techniques choisies ainsi que les d'̂tails d’́impl'̂mentation de la solution propos'̂e."]},{"title":"4.1 Choix techniques","paragraphs":["Dans cette section, nous pr'̂sentons les structures de donn'̂es utilis'̂es pour la conception du correcteur ainsi que les proc'̂dures n'̂cessaires pour la d'̂tection et la correction d’́erreurs en haoussa. Nous avons opt'̂ pour l’́approche de la conception objet avec un langage algorithmique inspir'̂ de Java (Christophe, 2008). Ce sera sans nous attarder sur la th'̂orie des concepts sous-jacents tels que : classe, objet, m'̂thode, attribut, instance, etc. (Brett et al., 2006) et (Christophe, 2008) sont de bonnes r'̂f'̂rences ̂ce sujet. Au vu des ressources linguistiques ̂notre disposition, une technique bas'̂e sur un dictionnaire nous semble la plus adapt'̂e pour la conception du correcteur haoussa. Pour le choix du dictionnaire, nous avons opt'̂ pour celui de (Mijinguini, 2003). D’́abord parce qu’́il nous est accessible, ensuite en raison de ses atouts. Le dictionnaire contient tous les mots (y compris les inflexions et les d'̂rivations). Il est stock'̂ en m'̂moire secondaire sous forme de fichier texte. L’́encodage de caract¤̂res '̂tant '̂videmment UTF-8. La d'̂tection d’́erreurs se fait ind'̂pendamment du contexte. Un mot erron'̂ est identifi'̂ par une simple recherche dans le dictionnaire. Pour implanter le dictionnaire en m'̂moire, nous utilisons soit une table de hachage soit un trie. L’́impl'̂mentation doit permettre au moins les primitives suivantes : •́ Ajouter un mot au dictionnaire (m'̂thode add) •́ V'̂rifier si un mot se trouve dans le dictionnaire (m'̂thode contains) •́ Supprimer un mot du dictionnaire (m'̂thode remove) Chaque nœ́ud du trie a autant de liens qu’́il y a de caract¤̂res dans l’́alphabet et ces derniers sont implicitement stock'̂s dans la structure de donn'̂es. A chaque chafîne de caract¤̂res valide correspond une valeur. Celle-ci peut “̂tre de tout type. Elle peut “̂tre exploit'̂e ici pour stocker des informations (d'̂finition, classe grammaticale, traduction vers une autre langue, etc.) sur chaque mot du dictionnaire. En notation objet le trie se pr'̂sente comme le montre la classe Trie de la Figure 2. Chaque nœ́ud du trie est repr'̂sent'̂ par la structure de donn'̂es Node. L’́attribut R de la classe Trie correspond au nombre des symboles ou lettres de l’́alphabet. Les digraphes de l’́alphabet haoussa du Niger n’́'̂tant pas cod'̂s comme un seul caract¤̂re, nous ne consid'̂rerons que les monographes, soit un total de 28 lettres. A ces lettres nous ajoutons le tiret (‘́-‘́) (code Unicode \\u002D) afin de pouvoir stocker les mots compos'̂s. Pour une langue support'̂e par le code ASCII, il n’́est pas n'̂cessaire d’́avoir un attribut alphabet pour la classe Trie, les caract¤̂res '̂tant repr'̂sent'̂s par des entiers cons'̂cutifs de 0 ̂127 donc par les indices du tableau next ( Node[]). Ce qui n’́est pas le cas du haoussa o„̂ les lettres ont des points de code dans les plages suivantes : •́ Majuscules : 39, 65 ̂80, 82 ̂85, 87 ̂90, 385, 394, 408, 435. •́ Minuscules : 97 ̂112, 114 ̂117, 119 ̂122, 595, 599, 409, 436. Repr'̂senter les caract¤̂res par les indices du tableau next conduira ̂prendre 599 comme valeur de R au lieu de 56 (28x2), ce qui conduit ̂un gaspillage d’́espace m'̂moire (parce qu’́occup'̂e par des liens inutiles) et des v'̂rifications suppl'̂mentaires pour '̂viter que des mots '̂trangers ne soient ajout'̂s au trie. Pour '̂viter ce probl¤̂me, une astuce (Robert, Kevin, 2011) consiste ̂trouver une fonction de correspondance entre les indices du tableau next et les lettres de l’́alphabet. C’́est la raison de la pr'̂sence de l’́attribut alphabet de la classe Trie. Il est ici de type String mais il peut bien “̂tre un tableau de caract¤̂res. Deux m'̂thodes suppl'̂mentaires effectuent la correspondance : toChar pour retrouver le caract¤̂re correspondant ̂un indice donn'̂ et toIndex pour convertir un caract¤̂re donn'̂ en indice. Les m'̂thodes"]},{"title":"[TALAF-O.7] 153","paragraphs":["ETUDE ET CONCEPTION D’́UN CORRECTEUR ORTHOGRAPHIQUE POUR LA LANGUE HAOUSSA charAt et indexOf de la classe String peuvent efficacement “̂tre utilis'̂es. Et pour rendre l’́astuce plus flexible, nous pouvons carr'̂ment d'̂l'̂guer cette t¢̂che ̂une interface Alphabet qui d'̂finirait toChar et toIndex. La m'̂thode keysThatMatch est tr¤̂s int'̂ressante. En effet, elle permet de rechercher dans le trie les mots qui r'̂pondent ̂un motif donn'̂. Les motifs utilis'̂s ici sont ceux avec un caract¤̂re de remplacement (wildcard), par exemple un point (‘́.’́). Ainsi avec un motif comme ‘́.ada’́ cette m'̂thode va renvoyer les mots du dictionnaire qui sont constitu'̂s d’́une lettre (quelconque) suivie du suffixe ‘́ada’́ : dada, fada, kada, lada, tada, wada. C’́est cette possibilit'̂ que nous exploitons pour mettre en œ́uvre la distance d’́'̂dition invers'̂e. La m'̂thode keysThatMatch utilise une structure de donn'̂es List pour conserver les r'̂sultats de la recherche. La classe List dispose de m'̂thodes pour ajouter un '̂l'̂ment, pour v'̂rifier l’́existence d’́un '̂l'̂ment et pour supprimer un '̂l'̂ment. Pour faire abstraction de l’́implantation du dictionnaire r'̂el, ajouter de la flexibilit'̂, simplifier la maintenance et faciliter l’́'̂volutivit'̂ du correcteur, le dictionnaire abstrait est repr'̂sent'̂ par une classe (TrieBasedDico ou HashBasedDico) qui impl'̂mente une interface (ou une classe abstraite) Dico. Celle-ci d'̂finit les m'̂thodes (add, remove, contains) n'̂cessaires pour op'̂rer sur un dictionnaire. Les classes TrieBasedDico et HashBasedDico sont con§̂ues par composition ̂partir respectivement de la classe Trie et de la classe HashSet. La liste des mots candidats pour la correction d’́un mot erron'̂ est d'̂termin'̂e par plusieurs '̂tapes que nous d'̂crivons ici. Une fois qu’́un mot est identifi'̂ comme '̂tant erron'̂, on proc¤̂de ̂la d'̂termination de la forme de l’́erreur. Nous avons d'̂fini trois types d’́erreurs (inspiration venue de nos recherches sur OpenOffice.org) :","•́ IS_NEGATIVE_WORD : Erreur caus'̂e par la pr'̂sence, dans le mot, d’́un chiffre ou d’́un caract¤̂re '̂tranger ̂ l’́alphabet (par exemple x, v, q, etc.). Le mot est alors qualifi'̂ de n'̂gatif.","•́ CAPTION_ERROR : Erreur de casse. C’́est lorsqu’́un mot qui devait “̂tre '̂crit avec la premi¤̂re lettre en majuscule est '̂crit tout en minuscule. •́ SPELLING_ERROR : repr'̂sente toutes les autres formes d’́erreurs d’́orthographe. Les types d’́erreurs sont de type entier court encapsul'̂s comme champs statiques dans la classe LySpellFailure. Le correcteur dispose de deux m'̂thodes pour la d'̂termination des erreurs. D’́abord la m'̂thode getSpellFailure, qui analyse un mot donn'̂, renvoie -1 si le mot est correct ou, dans le cas contraire, un des trois types d’́erreur cit'̂s ci-haut. Ensuite la m'̂thode isValid qui v'̂rifie si un mot donn'̂ est valide en fonction du r'̂sultat renvoy'̂ par getSpellFailure et des param¤̂tres de la correction orthographique. Si getSpellFailure renvoie une valeur : •́ '̂gale ̂-1, le mot est valide et isValid renvoie true","•́ diff'̂rente de -1, les param¤̂tres de correction sont pris en compte pour d'̂terminer la validit'̂. Par exemple lorsqu’́on choisit de ne pas corriger les mots avec chiffres et que le mot ̂corriger contient des chiffres, isValid renvoie true. Cette m'̂thode peut “̂tre exploit'̂e pour corriger l’́orthographe au cours de la frappe. L’́objet currentLanguage repr'̂sente la langue en cours de prise en charge par le correcteur. Il est une instance de la classe Language. La recherche des suggestions de correction est d'̂l'̂gu'̂e ̂proposer, une instance d’́une classe qui impl'̂mente l’́interface Proposer. La m'̂thode getProposals fournit les suggestions de correction pour un mot invalid'̂ par isValid et ce en fonction du type d’́erreur d'̂tect'̂e par getSpellFailure. 1) Exploitation des caract'̂ristiques de l’́alphabet La langue trait'̂e est repr'̂sent'̂e par la classe Language. Apr¤̂s plusieurs tentatives, nous avons pr'̂f'̂r'̂ que le dictionnaire soit un attribut de la langue et non l’́inverse. L’́attribut locale de la classe Language stocke les informations sur la langue trait'̂e. Il est de type Locale et fournit par exemple le code 2 lettres ISO 639-1 de la langue, le code 2 lettres ISO 3166 du pays ainsi que les noms complets de la langue et du pays. Ce qui correspond respectivement ̂ha, NE, haoussa (Niger) pour le haoussa du Niger. Nous exploitons ces donn'̂es pour le nommage des ressources et pour l’́affichage destin'̂ ̂l’́utilisateur. L’́attribut properties qui est de type Map regroupe d’́autres propri'̂t'̂s pour la langue que nous utilisons pour la conception du correcteur et qui ne sont pas fournies par Locale. Il s’́agit pour le moment de l’́alphabet de la langue, des caract¤̂res sp'̂ciaux de l’́alphabet, des caract¤̂res ressemblant aux caract¤̂res sp'̂ciaux et les signes de ponctuation que nous avons repartis en deux propri'̂t'̂s : les s'̂parateurs de mots et les signes de fin de phrase. Tous les caract¤̂res de l’́alphabet sont fournis sous forme de codes Unicode. La classe charg'̂e de trouver les suggestions impl'̂mente l’́interface Proposer qui d'̂finit deux m'̂thodes : isNegativeWord et propose. Les m'̂thodes des classes"]},{"title":"[TALAF-O.7] 154","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA TrieBasedDicoProposer et HashBasedDicoProposer utilisent en partie les caract'̂ristiques de l’́alphabet dans la recherche de suggestions. 2) Utilisation de la distance d’́'̂dition invers'̂e pour trouver les mots ̂sugg'̂rer La recherche des mots candidats pour la correction est faite gr¢̂ce ̂la distance d''̂dition invers'̂e comme suit :","•́ Tous les mots ayant une distance d’́'̂dition '̂gale ̂1 avec le mot erron'̂ sont g'̂n'̂r'̂s par application des op'̂rations d’́'̂dition que sont l’́insertion, la suppression, la substitution et la transposition.","•́ Chaque mot g'̂n'̂r'̂ pr'̂c'̂demment est recherch'̂ dans le trie ou la table de hachage. S’́il y est, alors il est retenu comme une correction possible du mot erron'̂. La recherche est effectu'̂e par la m'̂thode priv'̂e proposeByReverseEditDistance. Cette m'̂thode est bas'̂e en r'̂alit'̂ sur la m'̂thode keysThatMatch. Elle prend en argument un param¤̂tre de type TrieBasedDico et un mot ou un pattern et renvoie le r'̂sultat sous forme d’́un tableau de Strings. Une m'̂thode similaire est con§̂ue dans le cas de la table de hachage. Les m'̂thodes qui permettent d’́appliquer les op'̂rations d’́'̂dition ̂un mot donn'̂ sont fournies par la classe StringTools. Celle-ci regroupe un nombre d’́outils ̂usage partag'̂ entre les diff'̂rentes classes. 3) Utilisation de la distance d’́'̂dition pour ordonner les suggestions La distance minimum d’́'̂dition est utilis'̂e pour classer les mots candidats. Ceux qui sont les plus proches du mot erron'̂ sont plac'̂s en t“̂te de la liste propos'̂e. Pour mettre cela en œ́uvre, un comparateur a '̂t'̂ con§̂u. Le diagramme de classe g'̂n'̂ral de la conception que nous venons de d'̂crire est donn'̂ par la Figure 2 ci-dessous :   FIGURE 2 : Diagramme de classe global"]},{"title":"[TALAF-O.7] 155","paragraphs":["ETUDE ET CONCEPTION D’́UN CORRECTEUR ORTHOGRAPHIQUE POUR LA LANGUE HAOUSSA "]},{"title":"4.2 Codage, d'̂ploiement et test du correcteur","paragraphs":["Pour le codage et le d'̂veloppement du correcteur nous avons opt'̂ pour le langage Java et l’́IDE NetBeans. Deux versions ont '̂t'̂ d'̂velopp'̂es. a) Version autonome : LyTexEditor et LySpell Elle comprend un '̂diteur de texte LyTextEditor qui int¤̂gre LySpell, le correcteur que nous avons con§̂u. LyTextEditor a '̂t'̂ con§̂u dans un premier temps pour les besoins de d'̂veloppement et test du correcteur ind'̂pendamment des contraintes d’́int'̂gration ̂d’́autres '̂diteurs. Il donne les possibilit'̂s suivantes : •́ saisir un texte •́ ouvrir un fichier texte existant •́ corriger un texte avec LySpell •́ sauvegarder un texte. La correction orthographique est accessible via le menu Outils ou par la touche F7. Par exemple, la Figure 3 montre la boite de dialogue pour la correction interactive de l’́orthographe.   FIGURE 3 : Bofîte de dialogue pour la correction de l'orthographe avec LySpell dans LyTextEditor b) Version add-on pour OpenOffice.org Apr¤̂s plusieurs recherches et avec l’́aide de l’́OpenOffice.org Developer’́s Guide, nous avons pu d'̂velopper l’́add-on. Comme OpenOffice.org 3 n’́int¤̂gre pas le haoussa du Niger, obligation est faite de choisir l’́option haoussa du Nig'̂ria ou celui du Ghana. La Figure 4 ci-dessous montre l’́utilisation de LySpell dans OpenOffice.org 3 Writer."]},{"title":"[TALAF-O.7] 156","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA   FIGURE 4 : Correction de l’́orthographe avec LySpell dans OpenOffice.org Avec la portabilit'̂ de Java, LyTextEditor et LySpell peuvent “̂tre utilis'̂s normalement sur toutes les plateformes. LySpell offre '̂galement la possibilit'̂ de prendre en charge, sans besoin de toucher au code, la correction d’́orthographe pour d’́autres langues. Il suffit pour cela de fournir les fichiers n'̂cessaires ̂savoir le dictionnaire et l’́alphabet."]},{"title":"5 Conclusion et perspectives","paragraphs":["Dans ce travail, nous avons con§̂u et d'̂velopp'̂ un correcteur orthographique pour la langue haoussa. Ledit correcteur a '̂t'̂ test'̂ en tant que programme autonome ̂travers un '̂diteur de texte con§̂u ̂cet effet et en tant qu’́extension pour la suite bureautique OpenOffice.org. Ces r'̂sultats montrent qu’́il est bien possible de mettre ̂profit les techniques prouv'̂es et les ressources linguistiques disponibles pour concevoir des outils de traitement automatique pour les langues africaines en g'̂n'̂ral et pour le haoussa en particulier. Ils confirment aussi que les structures de donn'̂es trie et table de hachage offrent de meilleurs performances pour stocker un dictionnaire. Cependant, les possibilit'̂s et les r'̂sultats offerts par la structure de donn'̂es trie sont nettement meilleurs ̂ceux de la table de hachage. Il faut noter que lorsque le nombre de wildcard est sup'̂rieur ̂1, seul le trie donne, sans grande gymnastique, un r'̂sultat satisfaisant. Par exemple, pour le mot incorrect \"zurmakakke\" et lorsque le dictionnaire est implant'̂ par un trie, on obtient la suggestion \"zurmaƙaƙƙe\". Par contre, aucune suggestion n’́est obtenue dans le cas de la table de hachage. Le correcteur LySpell r'̂sultant de cette '̂tude exploite comme seules ressources linguistiques le dictionnaire et l’́alphabet de la langue haoussa. Il a cependant '̂t'̂ pens'̂ de fa§̂on qu’́il puisse aussi servir pour d’́autres dialectes haoussa et d’́autres langues."]},{"title":"[TALAF-O.7] 157","paragraphs":["ETUDE ET CONCEPTION D’́UN CORRECTEUR ORTHOGRAPHIQUE POUR LA LANGUE HAOUSSA Malgr'̂ que nous n’́ayons pas pu effectuer tous les tests n'̂cessaires sur les performances de LySpell, nous osons esp'̂rer que les r'̂sultats auxquels nous avons abouti apporteront une valeur ajout'̂e ̂l’́informatisation du haoussa et contribueront ̂son utilisation effective dans les institutions d’́enseignement et les m'̂dias. Pour am'̂liorer les performances du correcteur ici con§̂u, il peut “̂tre envisag'̂ dans des futurs travaux de :","•́ Exploiter les r¤̂gles de la morphologie de la langue haoussa. Cela aura un triple avantage. D’́abord la taille du dictionnaire en m'̂moire sera consid'̂rablement r'̂duite. Ensuite les suggestions de correction pourraient “̂tre plus pr'̂cises. Enfin, il serait ainsi possible de cr'̂er un correcteur orient'̂ Hunspell pouvant “̂tre int'̂gr'̂ facilement et plus ad'̂quatement ̂un large '̂ventail de programmes ̂commencer par OpenOffice.org. •́ Renforcer la correction orthographique du haoussa en y ajoutant la prise en charge de la grammaire."]},{"title":"R'̂f'̂rences","paragraphs":["AHMED N. (2009). Adaptation des '̂critures et de la lecture des langues '̂trang¤̂res au pays Haoussa de l’́Afrique de l’́Ouest. Synergies Alg'̂rie n°́6 –́ 2009, 61-69. AHO A. V., CORASICK M. J. (1975). Efficient String Matching: An Aid to Bibliographic Search. Communications of the ACM, 18 (6), 333-340. BARGERY G.P. (1934). A Hausa-English Dictionary and English-Hausa Vocabulary. Oxford University Press, London. BERNARD C. (2000). Les langues au Nigeria. Notre Librairie, Revue des litt'̂ratures du Sud, Litt'̂ratures du Nig'̂ria et du Ghana, 2, (141), 8-15. BRETT M., Gary P., David W. (2006). Head First Object-Oriented Analysis and Design. O'Reilly. CHANARD C., POPESCU-BELIS A. (2001). Encodage informatique multilingue : application au contexte du Niger. Les Cahiers du Rifal, 22, 33-45. CHRISTOPHE D. (2008). Apprendre ̂programmer, algorithmes et conception objet. 2e ed., Eyrolles. CYRIL N. A. (1967). String similarity and misspellings. Communications of the A.C.M., 10, (5), 302-313. DAMERAU F.J. (1964). A technique for computer detection and correction of spelling errors. Comm. ACM 7, 3, 171-176. DANIEL J., JAMES H. M. (2000). Speech and Language Processing. Prentice Hall, Englewood Cliffs, Inc. DON O. (2011). Les langues africaines a l’́¤̂re du numerique, d'̂fis et opportunit'̂s de l’́informatisation des langues autochtones. Les Presses de l’́Universit'̂ Laval, CRDI. ENGUEHARD C., NAROUA H. (2008). Evaluation of Virtual Keyboards for West-African Languages. Proceedings of the Sixth International Conference on Language Resources and Evaluation (LREC'08), Marrakech, Morocco, 28-30. ENGUEHARD C., MBODJ C. (2004). Des correcteurs orthographiques pour les langues africaines. Bulletin de Linguistique Appliqu'̂e et G'̂n'̂rale. ENGUEHARD C., SOUMANA K., MATHIEU M., ISSOUF M., MAMADOU L. S. (2011). \"Vers l'informatisation de quelques langues d'Afrique de l'Ouest\", 4¤̂me atelier international sur l'Amazighe et les Nouvelles Technologies, IRCAM, Rabat, Maroc. GILLES-MAURICE D. S. (2002). Web for/as Corpus: A Perspective for the African Languages. Nordic Journal of African Studies, 11 (2), 266-282. GRUDIN J. T. (1983). Error patterns in novice and skilled transcription typing. In Cooper W. E. (Ed.). Cognitive Aspects of Skilled Typewriting, Springer-Verlag, New York, 121-139. HORST B. (1993). A Fast Algorithm for Finding the Nearest Neighbor of a Word in a Dictionary. IAM-93-025. HSUAN L. L. (2008). Spell Checkers and Correctors: a unified treatment. Master dissertation. KNUTH D. (1973). The Art of Computer Programming. Addison-Wesley Publishing Co., Philippines, 3. KUKICH K. (1992). Techniques for automatically correcting words in text. ACM Computing Surveys, 24 (4). LEHAL G. S., SINGH K. (2000). A Comparative Study of Data Structures for Punjabi Dictionary. 5th International Conference on Cognitive Systems, reviews & previews, ICCS’́99, 489-497. MAMAN M. G., SEYDOU H. H. (2010). Les Langues de scolarisation dans l’́enseignement fondamental en Afrique subsaharienne francophone : cas du Niger. Rapport d’́'̂tude pays. MARK P. N. (2009). A Comparison of Dictionary Implementations. MINJINGUINI A. (2003). Dictionnaire '̂l'̂mentaire hausa-fran§̂ais. les '̂ditions GG. MIJIGUIN A., NAROUA H. (2012). R¤̂gles de formation des noms en haoussa. Actes de la conf'̂rence conjointe JEP-TALN-RECITAL 2012, Atelier TALAf 2012: Traitement Automatique des Langues Africaines, 63-74."]},{"title":"[TALAF-O.7] 158","paragraphs":["LAWALY SALIFOU ET HAROUNA NAROUA PAUL N. (2000). The Hausa Language An Encyclopedic Reference Grammar. Yale University Press, New Haven. PETERSON J. L. (1980). Computer Programs for Detecting and Correcting Spelling Errors. Comm. ACM, 23 (12). PIERRE M. N. (2006). An introduction to language processing with Perl and Prolog. Springer-Verlag Berlin Heidelberg, 2-3. ROBERT S., KEVIN W. (2011). Algorithms. 4e ed., Addison Wisley. ROXANA M. N., PAUL N. (2001). The Hausa Lexicographic Tradition. Lexikos11, AFRILEX-reeks, series, 11, 263-286. SUZAN V. (2002). Context-sensitive spell checking based on word trigram probabilities. Master thesis. VAN DER A. V., GILLES-MAURICE D. S. (2003). The African Languages on the Internet: Case Studies for Hausa, Somali, Lingala and isiXhosa. Cahiers Du Rifal, 23, 33–́45. "]}]}
